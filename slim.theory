Website
include 'library' as bob
include '/path/to/my.theory' as myns
ninclude 'complicated.js' as cool

  theory main
    [[body is |sepia; @mobile is beige;
       ::Navigator
       ::Header
       #main
         ::Menu
         ::MyContent
       ::Footer
    ]]
    
    fn sepia() -> 1;
      
  theory MyContent : Content
    [[#content
        #needs-override is |clean, is |sepia
    ]]

  theory Content
    [[#content
      .some
      .other
         .things
      #needs-override is |blacknwhite;
    ]]

    gobblyGook = 'see spot run';

  theory Navigator
    [[#navbar is fixedBar('top', 24px); @mobile is gone;
        a
          img
        ul is dropdown()
          li x 6
            a
    ]]

  fragfn sepia
    ((...
      <- style { def prop: sepiafy(prop, val) for prop, val in colors }
	where colors = {from this.props keep colorProperties};
    ))
    
    // complex properties should 'register' somehow with parent object, so 'font: 16pt/18pt bold Aria;' registers four properties
    colorProperties = ['background-color', 'color', 'border-color', 'font-color', 'background-image' ];

    fn sepiafy(prop, val) -> if (prop is Image) then val.sepia(100) else if (prop is Color) then sepia(val) else val endif;

/*(red << 16) | (green << 8) | blue
      where
        red = (c.red * .393) + (c.green *.769) + (c.blue * .189),
        green = (c.red * .349) + (c.green *.686) + (c.blue * .168),
        blue = (c.red * .272) + (c.green *.534) + (c.blue * .131);*/

  fragfn clean
    ((...
      <- style { def prop:null for prop in this.props.keys };
    ))

  class Font : CssSerializable
    has family(String), size(UnitNum), style(String), variant(String), weight(FontWeight);
    
    fn asCss() -> ""

  class Border : Colorable
    has 

  class Image : Colorable, CssSerializable, HtmlSerializable, FileSerializable
    has src(String), alt(String), title(String), height(UnitNum), width(UnitNum), data(String);

    fn asCss() -> "data:image/png;base64," + base64(data);

