/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var theory = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"file_repetition0":4,"ENDOFFILE":5,"namespace":6,"PREFIX":7,"id":8,"LBRACE":9,"namespace_repetition0":10,"RBRACE":11,"theory":12,"THEORY":13,"theory_option0":14,"theory_repetition0":15,"def":16,"sdef":17,"fdef":18,"ffdef":19,"treefrag":20,"data":21,"DATA":22,"paramlist":23,"dtypelist":24,"EOL":25,"paramdef":26,"PIPE":27,"tfnode":28,"treefrag_repetition_plus0":29,"treefrag_repetition_plus1":30,"XPATHSTART":31,"leafid":32,"tfnode_option0":33,"XPATHEND":34,"NEWLINE":35,"tf_islist":36,"leafid_repetition_plus0":37,"tf_islist_repetition0":38,"FRAGFUNC":39,"LPAREN":40,"RPAREN":41,"ASSIGN":42,"ffnodetree":43,"ffnode":44,"INDENT":45,"DEDENT":46,"LFFNODE":47,"RFFNODE":48,"ffimplist":49,"IMPLICATION":50,"fragexpr":51,"REVIMPLICATION":52,"STYLE":53,"expr":54,"WHERE":55,"YIELD":56,"ID":57,"tuplevarlist":58,"COMMA":59,"typedef":60,"LBRACK":61,"RBRACK":62,"SETSTART":63,"TYPIFY":64,"SETEND":65,"assignment_list":66,"FUNCTION":67,"expression":68,"lside":69,"assignment":70,"CASEASSIGN":71,"caselist":72,"casedef":73,"lit":74,"NATLITERAL":75,"NULL":76,"boollit":77,"TRUE":78,"FALSE":79,"elist":80,"atom":81,"constant":82,"STRING_LIT":83,"postfix_expression":84,"LBRACKET":85,"RBRACKET":86,"INC_OP":87,"DEC_OP":88,"EXCUSEME":89,"unary_expression":90,"unary_op":91,"power_expression":92,"POWER":93,"muldivmod":94,"TIMES":95,"DIVIDE":96,"MOD":97,"multiplicative_expression":98,"MULDIVMOD":99,"additive_expression":100,"ADDSUB":101,"shift":102,"SHIFTL":103,"SHIFTR":104,"shift_expression":105,"compare":106,"GT":107,"LT":108,"GTE":109,"LTE":110,"relational_expression":111,"equiv":112,"EQ":113,"NEQ":114,"equivalence_expression":115,"and_expression":116,"B_AND":117,"xor_expression":118,"XOR":119,"ior_expression":120,"B_OR":121,"logical_and_expression":122,"AND":123,"logical_or_expression":124,"OR":125,"conditional_expression":126,"IF":127,"ELSE":128,"ENDIF":129,"NOT":130,"number":131,"dict":132,"array":133,"integer":134,"hexint":135,"BINNATLITERAL":136,"float":137,"color":138,"HEXCOLOR":139,"MINUS":140,"HEXNATLITERAL":141,"DOT":142,"f":143,"colondeflist":144,"string":145,"COLON":146,"file_repetition0_group0":147,"namespace_repetition0_group0":148,"EXTENDS":149,"theory_repetition0_group0":150,"treefrag_repetition_plus1_group0":151,"leafid_repetition_plus0_group0":152,"tf_islist_repetition0_option0":153,"AT":154,"IS":155,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",7:"PREFIX",9:"LBRACE",11:"RBRACE",13:"THEORY",22:"DATA",25:"EOL",27:"PIPE",31:"XPATHSTART",34:"XPATHEND",35:"NEWLINE",39:"FRAGFUNC",40:"LPAREN",41:"RPAREN",42:"ASSIGN",45:"INDENT",46:"DEDENT",47:"LFFNODE",48:"RFFNODE",50:"IMPLICATION",52:"REVIMPLICATION",53:"STYLE",54:"expr",55:"WHERE",56:"YIELD",57:"ID",59:"COMMA",61:"LBRACK",62:"RBRACK",63:"SETSTART",64:"TYPIFY",65:"SETEND",67:"FUNCTION",71:"CASEASSIGN",75:"NATLITERAL",76:"NULL",78:"TRUE",79:"FALSE",83:"STRING_LIT",85:"LBRACKET",86:"RBRACKET",87:"INC_OP",88:"DEC_OP",89:"EXCUSEME",93:"POWER",95:"TIMES",96:"DIVIDE",97:"MOD",99:"MULDIVMOD",101:"ADDSUB",103:"SHIFTL",104:"SHIFTR",107:"GT",108:"LT",109:"GTE",110:"LTE",113:"EQ",114:"NEQ",117:"B_AND",119:"XOR",121:"B_OR",123:"AND",125:"OR",127:"IF",128:"ELSE",129:"ENDIF",130:"NOT",136:"BINNATLITERAL",139:"HEXCOLOR",140:"MINUS",141:"HEXNATLITERAL",142:"DOT",143:"f",145:"string",146:"COLON",149:"EXTENDS",154:"AT",155:"IS"},
productions_: [0,[3,2],[6,5],[12,6],[16,1],[16,1],[16,1],[16,1],[21,4],[24,4],[24,1],[20,4],[28,6],[32,1],[36,1],[19,7],[43,4],[43,1],[44,3],[44,4],[49,4],[49,2],[49,2],[51,6],[51,4],[51,4],[51,2],[51,2],[8,1],[58,3],[58,1],[60,1],[60,3],[17,6],[17,4],[18,8],[69,1],[69,3],[70,4],[70,4],[66,1],[66,2],[72,2],[72,0],[73,4],[23,3],[23,1],[26,1],[74,1],[74,1],[77,1],[77,1],[80,3],[80,1],[80,0],[81,1],[81,1],[81,1],[81,3],[84,1],[84,4],[84,3],[84,4],[84,2],[84,2],[84,2],[90,2],[92,1],[92,3],[94,1],[94,1],[94,1],[98,1],[98,3],[100,1],[100,3],[102,1],[102,1],[105,1],[105,3],[106,1],[106,1],[106,1],[106,1],[111,1],[111,3],[112,1],[112,1],[115,1],[115,3],[116,1],[116,3],[118,1],[118,3],[120,1],[120,3],[122,1],[122,3],[124,1],[124,3],[126,1],[126,6],[68,1],[91,1],[82,1],[82,1],[82,1],[131,1],[131,1],[131,1],[131,1],[131,1],[138,1],[134,2],[134,1],[135,2],[135,1],[137,3],[137,4],[137,2],[133,3],[132,3],[144,5],[144,3],[144,0],[147,1],[147,1],[4,0],[4,2],[148,1],[148,1],[148,1],[10,0],[10,2],[14,0],[14,2],[150,1],[150,1],[15,0],[15,2],[29,1],[29,2],[151,3],[151,1],[30,1],[30,2],[33,0],[33,2],[152,1],[152,1],[37,1],[37,2],[153,0],[153,2],[38,0],[38,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; 
break;
case 3: this.$ = new yy.Theory($$[$0-4], theorybody, $$[$0-2]); 
break;
case 9: this.$ = $$[$0-1]; this.$.unshift($$[$0-3]); 
break;
case 10: this.$ = [$$[$0]]; 
break;
case 29: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 30: this.$ = [ $$[$0] ]; 
break;
case 31: this.$ = new yy.Type($$[$0]); 
break;
case 32: this.$ = new yy.Type("Array", $$[$0-2]); 
break;
case 33: this.$ = new yy.SetDef($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 34: this.$ = new yy.SetDef($$[$0-2], $$[$0-2], $$[$0]); 
break;
case 35: this.$ = new yy.FnDef($$[$0-6], $$[$0-4], null, $$[$0-1]); 
break;
case 36: this.$ = [ $$[$0] ]; 
break;
case 37: this.$ = $$[$0-1]; 
break;
case 38: this.$ = new yy.Assignment($$[$0-3], $$[$0-1]); 
break;
case 39: this.$ = new yy.CaseAssignment($$[$0-3], $$[$0-1]); 
break;
case 40: this.$ = [ $$[$0] ]; 
break;
case 41: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 42: this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 43: this.$ = []; 
break;
case 44: this.$ = new yy.CaseDef($$[$0-3], $$[$0-1]); 
break;
case 45: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 46: this.$ = [ $$[$0] ]; 
break;
case 47: this.$ = new yy.ParamDef(typedef, id); 
break;
case 48: this.$ = parseInt($$[$0]); 
break;
case 49: this.$ = null; 
break;
case 50: this.$ = true; 
break;
case 51: this.$ = false; 
break;
case 52: this.$ = $$[$0]; this.$.unshift(e); 
break;
case 53: this.$ = [ e ]; 
break;
case 127:this.$ = [];
break;
case 128:$$[$0-1].push($$[$0]);
break;
case 132:this.$ = [];
break;
case 133:$$[$0-1].push($$[$0]);
break;
case 138:this.$ = [];
break;
case 139:$$[$0-1].push($$[$0]);
break;
case 140:this.$ = [$$[$0]];
break;
case 141:$$[$0-1].push($$[$0]);
break;
case 144:this.$ = [$$[$0]];
break;
case 145:$$[$0-1].push($$[$0]);
break;
case 150:this.$ = [$$[$0]];
break;
case 151:$$[$0-1].push($$[$0]);
break;
case 154:this.$ = [];
break;
case 155:$$[$0-4].push($$[$0-3]);
break;
}
},
table: [{3:1,4:2,5:[2,127],7:[2,127],35:[2,127]},{1:[3]},{5:[1,3],6:5,7:[1,7],35:[1,6],147:4},{1:[2,1]},{5:[2,128],7:[2,128],35:[2,128]},{5:[2,125],7:[2,125],35:[2,125]},{5:[2,126],7:[2,126],35:[2,126]},{8:8,57:[1,9]},{9:[1,10]},{9:[2,28],11:[2,28],25:[2,28],27:[2,28],34:[2,28],35:[2,28],40:[2,28],41:[2,28],42:[2,28],48:[2,28],50:[2,28],57:[2,28],59:[2,28],64:[2,28],65:[2,28],71:[2,28],85:[2,28],86:[2,28],87:[2,28],88:[2,28],89:[2,28],93:[2,28],99:[2,28],101:[2,28],103:[2,28],104:[2,28],107:[2,28],108:[2,28],109:[2,28],110:[2,28],117:[2,28],119:[2,28],121:[2,28],123:[2,28],125:[2,28],127:[2,28],128:[2,28],129:[2,28],130:[2,28],142:[2,28],149:[2,28],155:[2,28]},{10:11,11:[2,132],13:[2,132],22:[2,132],35:[2,132]},{11:[1,12],12:14,13:[1,17],21:15,22:[1,18],35:[1,16],148:13},{5:[2,2],7:[2,2],35:[2,2]},{11:[2,133],13:[2,133],22:[2,133],35:[2,133]},{11:[2,129],13:[2,129],22:[2,129],35:[2,129]},{11:[2,130],13:[2,130],22:[2,130],35:[2,130]},{11:[2,131],13:[2,131],22:[2,131],35:[2,131]},{8:19,57:[1,9]},{23:20,26:21,68:22,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{9:[2,134],14:37,149:[1,38]},{24:39,26:40,68:22,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{41:[2,46],59:[1,41],130:[2,46]},{25:[2,47],27:[2,47],41:[2,47],59:[2,47],127:[1,42],130:[2,47]},{11:[2,102],25:[2,102],27:[2,102],35:[2,102],41:[2,102],59:[2,102],86:[2,102],127:[2,102],129:[2,102],130:[2,102]},{11:[2,100],25:[2,100],27:[2,100],35:[2,100],41:[2,100],59:[2,100],86:[2,100],125:[1,43],127:[2,100],129:[2,100],130:[2,100]},{11:[2,98],25:[2,98],27:[2,98],35:[2,98],41:[2,98],59:[2,98],86:[2,98],123:[1,44],125:[2,98],127:[2,98],128:[2,98],129:[2,98],130:[2,98]},{11:[2,96],25:[2,96],27:[2,96],35:[2,96],41:[2,96],59:[2,96],86:[2,96],121:[1,45],123:[2,96],125:[2,96],127:[2,96],128:[2,96],129:[2,96],130:[2,96]},{11:[2,94],25:[2,94],27:[2,94],35:[2,94],41:[2,94],59:[2,94],86:[2,94],119:[1,46],121:[2,94],123:[2,94],125:[2,94],127:[2,94],128:[2,94],129:[2,94],130:[2,94]},{11:[2,92],25:[2,92],27:[2,92],35:[2,92],41:[2,92],59:[2,92],86:[2,92],117:[1,47],119:[2,92],121:[2,92],123:[2,92],125:[2,92],127:[2,92],128:[2,92],129:[2,92],130:[2,92]},{11:[2,90],25:[2,90],27:[2,90],35:[2,90],41:[2,90],59:[2,90],86:[2,90],106:48,107:[1,49],108:[1,50],109:[1,51],110:[1,52],117:[2,90],119:[2,90],121:[2,90],123:[2,90],125:[2,90],127:[2,90],128:[2,90],129:[2,90],130:[2,90]},{11:[2,84],25:[2,84],27:[2,84],35:[2,84],41:[2,84],59:[2,84],86:[2,84],102:53,103:[1,54],104:[1,55],107:[2,84],108:[2,84],109:[2,84],110:[2,84],117:[2,84],119:[2,84],121:[2,84],123:[2,84],125:[2,84],127:[2,84],128:[2,84],129:[2,84],130:[2,84]},{11:[2,78],25:[2,78],27:[2,78],35:[2,78],41:[2,78],59:[2,78],86:[2,78],101:[1,56],103:[2,78],104:[2,78],107:[2,78],108:[2,78],109:[2,78],110:[2,78],117:[2,78],119:[2,78],121:[2,78],123:[2,78],125:[2,78],127:[2,78],128:[2,78],129:[2,78],130:[2,78]},{11:[2,74],25:[2,74],27:[2,74],35:[2,74],41:[2,74],59:[2,74],86:[2,74],99:[1,57],101:[2,74],103:[2,74],104:[2,74],107:[2,74],108:[2,74],109:[2,74],110:[2,74],117:[2,74],119:[2,74],121:[2,74],123:[2,74],125:[2,74],127:[2,74],128:[2,74],129:[2,74],130:[2,74]},{11:[2,72],25:[2,72],27:[2,72],35:[2,72],41:[2,72],59:[2,72],86:[2,72],93:[1,58],99:[2,72],101:[2,72],103:[2,72],104:[2,72],107:[2,72],108:[2,72],109:[2,72],110:[2,72],117:[2,72],119:[2,72],121:[2,72],123:[2,72],125:[2,72],127:[2,72],128:[2,72],129:[2,72],130:[2,72]},{11:[2,67],25:[2,67],27:[2,67],35:[2,67],41:[2,67],59:[2,67],86:[2,67],93:[2,67],99:[2,67],101:[2,67],103:[2,67],104:[2,67],107:[2,67],108:[2,67],109:[2,67],110:[2,67],117:[2,67],119:[2,67],121:[2,67],123:[2,67],125:[2,67],127:[2,67],128:[2,67],129:[2,67],130:[2,67]},{8:61,9:[1,73],40:[1,64],57:[1,9],75:[1,76],81:60,82:62,83:[1,63],84:59,85:[1,74],131:65,132:66,133:67,134:68,135:69,136:[1,70],137:71,138:72,139:[1,78],140:[1,75],141:[1,77]},{9:[2,103],40:[2,103],57:[2,103],75:[2,103],83:[2,103],85:[2,103],136:[2,103],139:[2,103],140:[2,103],141:[2,103]},{9:[1,79]},{8:80,57:[1,9]},{25:[1,81]},{25:[2,10],27:[1,82]},{23:83,26:21,68:22,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:84,130:[1,36]},{90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:85,130:[1,36]},{90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:86,130:[1,36]},{90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:87,130:[1,36]},{90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:88,130:[1,36]},{90:34,91:35,92:33,98:32,100:31,105:30,111:89,130:[1,36]},{90:34,91:35,92:33,98:32,100:31,105:90,130:[1,36]},{130:[2,80]},{130:[2,81]},{130:[2,82]},{130:[2,83]},{90:34,91:35,92:33,98:32,100:91,130:[1,36]},{130:[2,76]},{130:[2,77]},{90:34,91:35,92:33,98:92,130:[1,36]},{90:34,91:35,92:93,130:[1,36]},{90:94,91:35,130:[1,36]},{11:[2,66],25:[2,66],27:[2,66],35:[2,66],40:[1,96],41:[2,66],59:[2,66],85:[1,95],86:[2,66],87:[1,97],88:[1,98],89:[1,99],93:[2,66],99:[2,66],101:[2,66],103:[2,66],104:[2,66],107:[2,66],108:[2,66],109:[2,66],110:[2,66],117:[2,66],119:[2,66],121:[2,66],123:[2,66],125:[2,66],127:[2,66],128:[2,66],129:[2,66],130:[2,66]},{11:[2,59],25:[2,59],27:[2,59],35:[2,59],40:[2,59],41:[2,59],59:[2,59],85:[2,59],86:[2,59],87:[2,59],88:[2,59],89:[2,59],93:[2,59],99:[2,59],101:[2,59],103:[2,59],104:[2,59],107:[2,59],108:[2,59],109:[2,59],110:[2,59],117:[2,59],119:[2,59],121:[2,59],123:[2,59],125:[2,59],127:[2,59],128:[2,59],129:[2,59],130:[2,59]},{11:[2,55],25:[2,55],27:[2,55],35:[2,55],40:[2,55],41:[2,55],59:[2,55],85:[2,55],86:[2,55],87:[2,55],88:[2,55],89:[2,55],93:[2,55],99:[2,55],101:[2,55],103:[2,55],104:[2,55],107:[2,55],108:[2,55],109:[2,55],110:[2,55],117:[2,55],119:[2,55],121:[2,55],123:[2,55],125:[2,55],127:[2,55],128:[2,55],129:[2,55],130:[2,55]},{11:[2,56],25:[2,56],27:[2,56],35:[2,56],40:[2,56],41:[2,56],59:[2,56],85:[2,56],86:[2,56],87:[2,56],88:[2,56],89:[2,56],93:[2,56],99:[2,56],101:[2,56],103:[2,56],104:[2,56],107:[2,56],108:[2,56],109:[2,56],110:[2,56],117:[2,56],119:[2,56],121:[2,56],123:[2,56],125:[2,56],127:[2,56],128:[2,56],129:[2,56],130:[2,56]},{11:[2,57],25:[2,57],27:[2,57],35:[2,57],40:[2,57],41:[2,57],59:[2,57],85:[2,57],86:[2,57],87:[2,57],88:[2,57],89:[2,57],93:[2,57],99:[2,57],101:[2,57],103:[2,57],104:[2,57],107:[2,57],108:[2,57],109:[2,57],110:[2,57],117:[2,57],119:[2,57],121:[2,57],123:[2,57],125:[2,57],127:[2,57],128:[2,57],129:[2,57],130:[2,57]},{68:100,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{11:[2,104],25:[2,104],27:[2,104],35:[2,104],40:[2,104],41:[2,104],59:[2,104],85:[2,104],86:[2,104],87:[2,104],88:[2,104],89:[2,104],93:[2,104],99:[2,104],101:[2,104],103:[2,104],104:[2,104],107:[2,104],108:[2,104],109:[2,104],110:[2,104],117:[2,104],119:[2,104],121:[2,104],123:[2,104],125:[2,104],127:[2,104],128:[2,104],129:[2,104],130:[2,104]},{11:[2,105],25:[2,105],27:[2,105],35:[2,105],40:[2,105],41:[2,105],59:[2,105],85:[2,105],86:[2,105],87:[2,105],88:[2,105],89:[2,105],93:[2,105],99:[2,105],101:[2,105],103:[2,105],104:[2,105],107:[2,105],108:[2,105],109:[2,105],110:[2,105],117:[2,105],119:[2,105],121:[2,105],123:[2,105],125:[2,105],127:[2,105],128:[2,105],129:[2,105],130:[2,105]},{11:[2,106],25:[2,106],27:[2,106],35:[2,106],40:[2,106],41:[2,106],59:[2,106],85:[2,106],86:[2,106],87:[2,106],88:[2,106],89:[2,106],93:[2,106],99:[2,106],101:[2,106],103:[2,106],104:[2,106],107:[2,106],108:[2,106],109:[2,106],110:[2,106],117:[2,106],119:[2,106],121:[2,106],123:[2,106],125:[2,106],127:[2,106],128:[2,106],129:[2,106],130:[2,106]},{11:[2,107],25:[2,107],27:[2,107],35:[2,107],40:[2,107],41:[2,107],59:[2,107],85:[2,107],86:[2,107],87:[2,107],88:[2,107],89:[2,107],93:[2,107],99:[2,107],101:[2,107],103:[2,107],104:[2,107],107:[2,107],108:[2,107],109:[2,107],110:[2,107],117:[2,107],119:[2,107],121:[2,107],123:[2,107],125:[2,107],127:[2,107],128:[2,107],129:[2,107],130:[2,107],142:[1,101],143:[1,102]},{11:[2,108],25:[2,108],27:[2,108],35:[2,108],40:[2,108],41:[2,108],59:[2,108],85:[2,108],86:[2,108],87:[2,108],88:[2,108],89:[2,108],93:[2,108],99:[2,108],101:[2,108],103:[2,108],104:[2,108],107:[2,108],108:[2,108],109:[2,108],110:[2,108],117:[2,108],119:[2,108],121:[2,108],123:[2,108],125:[2,108],127:[2,108],128:[2,108],129:[2,108],130:[2,108]},{11:[2,109],25:[2,109],27:[2,109],35:[2,109],40:[2,109],41:[2,109],59:[2,109],85:[2,109],86:[2,109],87:[2,109],88:[2,109],89:[2,109],93:[2,109],99:[2,109],101:[2,109],103:[2,109],104:[2,109],107:[2,109],108:[2,109],109:[2,109],110:[2,109],117:[2,109],119:[2,109],121:[2,109],123:[2,109],125:[2,109],127:[2,109],128:[2,109],129:[2,109],130:[2,109]},{11:[2,110],25:[2,110],27:[2,110],35:[2,110],40:[2,110],41:[2,110],59:[2,110],85:[2,110],86:[2,110],87:[2,110],88:[2,110],89:[2,110],93:[2,110],99:[2,110],101:[2,110],103:[2,110],104:[2,110],107:[2,110],108:[2,110],109:[2,110],110:[2,110],117:[2,110],119:[2,110],121:[2,110],123:[2,110],125:[2,110],127:[2,110],128:[2,110],129:[2,110],130:[2,110]},{11:[2,111],25:[2,111],27:[2,111],35:[2,111],40:[2,111],41:[2,111],59:[2,111],85:[2,111],86:[2,111],87:[2,111],88:[2,111],89:[2,111],93:[2,111],99:[2,111],101:[2,111],103:[2,111],104:[2,111],107:[2,111],108:[2,111],109:[2,111],110:[2,111],117:[2,111],119:[2,111],121:[2,111],123:[2,111],125:[2,111],127:[2,111],128:[2,111],129:[2,111],130:[2,111]},{11:[2,124],144:103,145:[1,104]},{68:106,80:105,86:[2,54],90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{75:[1,107],141:[1,108]},{11:[2,114],25:[2,114],27:[2,114],35:[2,114],40:[2,114],41:[2,114],59:[2,114],85:[2,114],86:[2,114],87:[2,114],88:[2,114],89:[2,114],93:[2,114],99:[2,114],101:[2,114],103:[2,114],104:[2,114],107:[2,114],108:[2,114],109:[2,114],110:[2,114],117:[2,114],119:[2,114],121:[2,114],123:[2,114],125:[2,114],127:[2,114],128:[2,114],129:[2,114],130:[2,114],142:[2,114],143:[2,114]},{11:[2,116],25:[2,116],27:[2,116],35:[2,116],40:[2,116],41:[2,116],59:[2,116],85:[2,116],86:[2,116],87:[2,116],88:[2,116],89:[2,116],93:[2,116],99:[2,116],101:[2,116],103:[2,116],104:[2,116],107:[2,116],108:[2,116],109:[2,116],110:[2,116],117:[2,116],119:[2,116],121:[2,116],123:[2,116],125:[2,116],127:[2,116],128:[2,116],129:[2,116],130:[2,116]},{11:[2,112],25:[2,112],27:[2,112],35:[2,112],40:[2,112],41:[2,112],59:[2,112],85:[2,112],86:[2,112],87:[2,112],88:[2,112],89:[2,112],93:[2,112],99:[2,112],101:[2,112],103:[2,112],104:[2,112],107:[2,112],108:[2,112],109:[2,112],110:[2,112],117:[2,112],119:[2,112],121:[2,112],123:[2,112],125:[2,112],127:[2,112],128:[2,112],129:[2,112],130:[2,112]},{11:[2,138],15:109,31:[2,138],35:[2,138],39:[2,138],63:[2,138],67:[2,138]},{9:[2,135]},{11:[2,8],13:[2,8],22:[2,8],35:[2,8]},{24:110,26:40,68:22,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{41:[2,45],130:[2,45]},{125:[1,43],128:[1,111]},{11:[2,99],25:[2,99],27:[2,99],35:[2,99],41:[2,99],59:[2,99],86:[2,99],123:[1,44],125:[2,99],127:[2,99],128:[2,99],129:[2,99],130:[2,99]},{11:[2,97],25:[2,97],27:[2,97],35:[2,97],41:[2,97],59:[2,97],86:[2,97],121:[1,45],123:[2,97],125:[2,97],127:[2,97],128:[2,97],129:[2,97],130:[2,97]},{11:[2,95],25:[2,95],27:[2,95],35:[2,95],41:[2,95],59:[2,95],86:[2,95],119:[1,46],121:[2,95],123:[2,95],125:[2,95],127:[2,95],128:[2,95],129:[2,95],130:[2,95]},{11:[2,93],25:[2,93],27:[2,93],35:[2,93],41:[2,93],59:[2,93],86:[2,93],117:[1,47],119:[2,93],121:[2,93],123:[2,93],125:[2,93],127:[2,93],128:[2,93],129:[2,93],130:[2,93]},{11:[2,91],25:[2,91],27:[2,91],35:[2,91],41:[2,91],59:[2,91],86:[2,91],106:48,107:[1,49],108:[1,50],109:[1,51],110:[1,52],117:[2,91],119:[2,91],121:[2,91],123:[2,91],125:[2,91],127:[2,91],128:[2,91],129:[2,91],130:[2,91]},{11:[2,85],25:[2,85],27:[2,85],35:[2,85],41:[2,85],59:[2,85],86:[2,85],102:53,103:[1,54],104:[1,55],107:[2,85],108:[2,85],109:[2,85],110:[2,85],117:[2,85],119:[2,85],121:[2,85],123:[2,85],125:[2,85],127:[2,85],128:[2,85],129:[2,85],130:[2,85]},{11:[2,79],25:[2,79],27:[2,79],35:[2,79],41:[2,79],59:[2,79],86:[2,79],101:[1,56],103:[2,79],104:[2,79],107:[2,79],108:[2,79],109:[2,79],110:[2,79],117:[2,79],119:[2,79],121:[2,79],123:[2,79],125:[2,79],127:[2,79],128:[2,79],129:[2,79],130:[2,79]},{11:[2,75],25:[2,75],27:[2,75],35:[2,75],41:[2,75],59:[2,75],86:[2,75],99:[1,57],101:[2,75],103:[2,75],104:[2,75],107:[2,75],108:[2,75],109:[2,75],110:[2,75],117:[2,75],119:[2,75],121:[2,75],123:[2,75],125:[2,75],127:[2,75],128:[2,75],129:[2,75],130:[2,75]},{11:[2,73],25:[2,73],27:[2,73],35:[2,73],41:[2,73],59:[2,73],86:[2,73],93:[1,58],99:[2,73],101:[2,73],103:[2,73],104:[2,73],107:[2,73],108:[2,73],109:[2,73],110:[2,73],117:[2,73],119:[2,73],121:[2,73],123:[2,73],125:[2,73],127:[2,73],128:[2,73],129:[2,73],130:[2,73]},{11:[2,68],25:[2,68],27:[2,68],35:[2,68],41:[2,68],59:[2,68],86:[2,68],93:[2,68],99:[2,68],101:[2,68],103:[2,68],104:[2,68],107:[2,68],108:[2,68],109:[2,68],110:[2,68],117:[2,68],119:[2,68],121:[2,68],123:[2,68],125:[2,68],127:[2,68],128:[2,68],129:[2,68],130:[2,68]},{68:112,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{23:114,26:21,41:[1,113],68:22,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{11:[2,63],25:[2,63],27:[2,63],35:[2,63],40:[2,63],41:[2,63],59:[2,63],85:[2,63],86:[2,63],87:[2,63],88:[2,63],89:[2,63],93:[2,63],99:[2,63],101:[2,63],103:[2,63],104:[2,63],107:[2,63],108:[2,63],109:[2,63],110:[2,63],117:[2,63],119:[2,63],121:[2,63],123:[2,63],125:[2,63],127:[2,63],128:[2,63],129:[2,63],130:[2,63]},{11:[2,64],25:[2,64],27:[2,64],35:[2,64],40:[2,64],41:[2,64],59:[2,64],85:[2,64],86:[2,64],87:[2,64],88:[2,64],89:[2,64],93:[2,64],99:[2,64],101:[2,64],103:[2,64],104:[2,64],107:[2,64],108:[2,64],109:[2,64],110:[2,64],117:[2,64],119:[2,64],121:[2,64],123:[2,64],125:[2,64],127:[2,64],128:[2,64],129:[2,64],130:[2,64]},{11:[2,65],25:[2,65],27:[2,65],35:[2,65],40:[2,65],41:[2,65],59:[2,65],85:[2,65],86:[2,65],87:[2,65],88:[2,65],89:[2,65],93:[2,65],99:[2,65],101:[2,65],103:[2,65],104:[2,65],107:[2,65],108:[2,65],109:[2,65],110:[2,65],117:[2,65],119:[2,65],121:[2,65],123:[2,65],125:[2,65],127:[2,65],128:[2,65],129:[2,65],130:[2,65]},{41:[1,115],127:[1,42]},{75:[1,116]},{11:[2,119],25:[2,119],27:[2,119],35:[2,119],40:[2,119],41:[2,119],59:[2,119],85:[2,119],86:[2,119],87:[2,119],88:[2,119],89:[2,119],93:[2,119],99:[2,119],101:[2,119],103:[2,119],104:[2,119],107:[2,119],108:[2,119],109:[2,119],110:[2,119],117:[2,119],119:[2,119],121:[2,119],123:[2,119],125:[2,119],127:[2,119],128:[2,119],129:[2,119],130:[2,119]},{11:[1,117]},{146:[1,118]},{86:[1,119]},{59:[1,120],86:[2,53],127:[1,42]},{11:[2,113],25:[2,113],27:[2,113],35:[2,113],40:[2,113],41:[2,113],59:[2,113],85:[2,113],86:[2,113],87:[2,113],88:[2,113],89:[2,113],93:[2,113],99:[2,113],101:[2,113],103:[2,113],104:[2,113],107:[2,113],108:[2,113],109:[2,113],110:[2,113],117:[2,113],119:[2,113],121:[2,113],123:[2,113],125:[2,113],127:[2,113],128:[2,113],129:[2,113],130:[2,113],142:[2,113],143:[2,113]},{11:[2,115],25:[2,115],27:[2,115],35:[2,115],40:[2,115],41:[2,115],59:[2,115],85:[2,115],86:[2,115],87:[2,115],88:[2,115],89:[2,115],93:[2,115],99:[2,115],101:[2,115],103:[2,115],104:[2,115],107:[2,115],108:[2,115],109:[2,115],110:[2,115],117:[2,115],119:[2,115],121:[2,115],123:[2,115],125:[2,115],127:[2,115],128:[2,115],129:[2,115],130:[2,115]},{11:[1,121],16:123,17:125,18:126,19:127,20:128,28:132,31:[1,133],35:[1,124],39:[1,131],63:[1,129],67:[1,130],150:122},{25:[1,134]},{68:135,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{86:[1,136],127:[1,42]},{11:[2,61],25:[2,61],27:[2,61],35:[2,61],40:[2,61],41:[2,61],59:[2,61],85:[2,61],86:[2,61],87:[2,61],88:[2,61],89:[2,61],93:[2,61],99:[2,61],101:[2,61],103:[2,61],104:[2,61],107:[2,61],108:[2,61],109:[2,61],110:[2,61],117:[2,61],119:[2,61],121:[2,61],123:[2,61],125:[2,61],127:[2,61],128:[2,61],129:[2,61],130:[2,61]},{41:[1,137]},{11:[2,58],25:[2,58],27:[2,58],35:[2,58],40:[2,58],41:[2,58],59:[2,58],85:[2,58],86:[2,58],87:[2,58],88:[2,58],89:[2,58],93:[2,58],99:[2,58],101:[2,58],103:[2,58],104:[2,58],107:[2,58],108:[2,58],109:[2,58],110:[2,58],117:[2,58],119:[2,58],121:[2,58],123:[2,58],125:[2,58],127:[2,58],128:[2,58],129:[2,58],130:[2,58]},{11:[2,117],25:[2,117],27:[2,117],35:[2,117],40:[2,117],41:[2,117],59:[2,117],85:[2,117],86:[2,117],87:[2,117],88:[2,117],89:[2,117],93:[2,117],99:[2,117],101:[2,117],103:[2,117],104:[2,117],107:[2,117],108:[2,117],109:[2,117],110:[2,117],117:[2,117],119:[2,117],121:[2,117],123:[2,117],125:[2,117],127:[2,117],128:[2,117],129:[2,117],130:[2,117],143:[1,138]},{11:[2,121],25:[2,121],27:[2,121],35:[2,121],40:[2,121],41:[2,121],59:[2,121],85:[2,121],86:[2,121],87:[2,121],88:[2,121],89:[2,121],93:[2,121],99:[2,121],101:[2,121],103:[2,121],104:[2,121],107:[2,121],108:[2,121],109:[2,121],110:[2,121],117:[2,121],119:[2,121],121:[2,121],123:[2,121],125:[2,121],127:[2,121],128:[2,121],129:[2,121],130:[2,121]},{68:139,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{11:[2,120],25:[2,120],27:[2,120],35:[2,120],40:[2,120],41:[2,120],59:[2,120],85:[2,120],86:[2,120],87:[2,120],88:[2,120],89:[2,120],93:[2,120],99:[2,120],101:[2,120],103:[2,120],104:[2,120],107:[2,120],108:[2,120],109:[2,120],110:[2,120],117:[2,120],119:[2,120],121:[2,120],123:[2,120],125:[2,120],127:[2,120],128:[2,120],129:[2,120],130:[2,120]},{68:106,80:140,86:[2,54],90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{11:[2,3],13:[2,3],22:[2,3],35:[2,3]},{11:[2,139],31:[2,139],35:[2,139],39:[2,139],63:[2,139],67:[2,139]},{11:[2,136],31:[2,136],35:[2,136],39:[2,136],63:[2,136],67:[2,136]},{11:[2,137],31:[2,137],35:[2,137],39:[2,137],63:[2,137],67:[2,137]},{11:[2,4],31:[2,4],35:[2,4],39:[2,4],63:[2,4],67:[2,4]},{11:[2,5],31:[2,5],35:[2,5],39:[2,5],63:[2,5],67:[2,5]},{11:[2,6],31:[2,6],35:[2,6],39:[2,6],63:[2,6],67:[2,6]},{11:[2,7],31:[2,7],35:[2,7],39:[2,7],63:[2,7],67:[2,7]},{8:141,57:[1,9]},{8:142,57:[1,9]},{8:143,57:[1,9]},{29:144,35:[1,145]},{8:149,32:146,37:147,57:[1,9],142:[1,150],152:148},{25:[2,9]},{127:[1,42],129:[1,151]},{11:[2,60],25:[2,60],27:[2,60],35:[2,60],40:[2,60],41:[2,60],59:[2,60],85:[2,60],86:[2,60],87:[2,60],88:[2,60],89:[2,60],93:[2,60],99:[2,60],101:[2,60],103:[2,60],104:[2,60],107:[2,60],108:[2,60],109:[2,60],110:[2,60],117:[2,60],119:[2,60],121:[2,60],123:[2,60],125:[2,60],127:[2,60],128:[2,60],129:[2,60],130:[2,60]},{11:[2,62],25:[2,62],27:[2,62],35:[2,62],40:[2,62],41:[2,62],59:[2,62],85:[2,62],86:[2,62],87:[2,62],88:[2,62],89:[2,62],93:[2,62],99:[2,62],101:[2,62],103:[2,62],104:[2,62],107:[2,62],108:[2,62],109:[2,62],110:[2,62],117:[2,62],119:[2,62],121:[2,62],123:[2,62],125:[2,62],127:[2,62],128:[2,62],129:[2,62],130:[2,62]},{11:[2,118],25:[2,118],27:[2,118],35:[2,118],40:[2,118],41:[2,118],59:[2,118],85:[2,118],86:[2,118],87:[2,118],88:[2,118],89:[2,118],93:[2,118],99:[2,118],101:[2,118],103:[2,118],104:[2,118],107:[2,118],108:[2,118],109:[2,118],110:[2,118],117:[2,118],119:[2,118],121:[2,118],123:[2,118],125:[2,118],127:[2,118],128:[2,118],129:[2,118],130:[2,118]},{11:[2,123],59:[1,152],127:[1,42]},{86:[2,52]},{64:[1,153],65:[1,154]},{40:[1,155]},{40:[1,156]},{20:161,28:132,30:157,31:[1,133],35:[1,158],45:[1,160],151:159},{31:[2,140],35:[2,140],45:[2,140]},{33:162,34:[2,146],64:[1,163]},{8:149,34:[2,13],57:[1,9],64:[2,13],142:[1,150],152:164},{34:[2,150],57:[2,150],64:[2,150],142:[2,150]},{34:[2,148],57:[2,148],64:[2,148],142:[2,148]},{34:[2,149],57:[2,149],64:[2,149],142:[2,149]},{11:[2,101],25:[2,101],27:[2,101],35:[2,101],41:[2,101],59:[2,101],86:[2,101],127:[2,101],129:[2,101],130:[2,101]},{11:[2,124],144:165,145:[1,104]},{8:166,57:[1,9]},{8:170,40:[1,171],57:[1,9],66:167,69:169,70:168},{23:172,26:21,68:22,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{23:173,26:21,68:22,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{20:161,25:[1,174],28:132,31:[1,133],45:[1,160],151:175},{31:[2,141],35:[2,141],45:[2,141]},{25:[2,144],31:[2,144],45:[2,144]},{20:176,28:132,31:[1,133]},{25:[2,143],31:[2,143],45:[2,143]},{34:[1,177]},{8:178,57:[1,9]},{34:[2,151],57:[2,151],64:[2,151],142:[2,151]},{11:[2,122]},{65:[1,179]},{11:[2,34],31:[2,34],35:[2,34],39:[2,34],63:[2,34],67:[2,34]},{8:170,11:[2,40],31:[2,40],35:[2,40],39:[2,40],40:[1,171],57:[1,9],63:[2,40],66:180,67:[2,40],69:169,70:168},{42:[1,181],71:[1,182]},{42:[2,36],71:[2,36]},{8:184,57:[1,9],58:183},{41:[1,185]},{41:[1,186]},{11:[2,11],25:[2,11],31:[2,11],35:[2,11],39:[2,11],45:[2,11],46:[2,11],63:[2,11],67:[2,11]},{25:[2,145],31:[2,145],45:[2,145]},{46:[1,187]},{35:[1,188]},{34:[2,147]},{8:170,40:[1,171],57:[1,9],66:189,69:169,70:168},{11:[2,41],31:[2,41],35:[2,41],39:[2,41],63:[2,41],67:[2,41]},{68:190,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{8:193,35:[2,43],57:[1,9],72:191,73:192},{41:[1,194]},{41:[2,30],59:[1,195]},{50:[1,196]},{42:[1,197]},{25:[2,142],31:[2,142],45:[2,142]},{35:[2,154],36:198,38:199,154:[2,154],155:[2,154]},{11:[2,33],31:[2,33],35:[2,33],39:[2,33],63:[2,33],67:[2,33]},{35:[1,200],127:[1,42]},{35:[1,201]},{8:193,35:[2,43],57:[1,9],72:202,73:192},{50:[1,203]},{42:[2,37],71:[2,37]},{8:184,57:[1,9],58:204},{68:205,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{43:206,44:207,47:[1,208]},{35:[2,12]},{35:[2,14],153:209,154:[1,210],155:[2,152]},{11:[2,38],31:[2,38],35:[2,38],39:[2,38],40:[2,38],57:[2,38],63:[2,38],67:[2,38]},{11:[2,39],31:[2,39],35:[2,39],39:[2,39],40:[2,39],57:[2,39],63:[2,39],67:[2,39]},{35:[2,42]},{68:211,90:34,91:35,92:33,98:32,100:31,105:30,111:29,116:28,118:27,120:26,122:25,124:24,126:23,130:[1,36]},{41:[2,29]},{25:[1,212],127:[1,42]},{11:[2,15],31:[2,15],35:[2,15],39:[2,15],63:[2,15],67:[2,15]},{11:[2,17],31:[2,17],35:[2,17],39:[2,17],45:[1,213],46:[2,17],63:[2,17],67:[2,17]},{8:214,57:[1,9]},{155:[1,215]},{8:216,57:[1,9]},{35:[1,217],127:[1,42]},{11:[2,35],31:[2,35],35:[2,35],39:[2,35],63:[2,35],67:[2,35]},{43:218,44:207,47:[1,208]},{48:[1,219]},{8:220,57:[1,9]},{155:[2,153]},{35:[2,44],57:[2,44]},{46:[1,221]},{11:[2,18],31:[2,18],35:[2,18],39:[2,18],45:[2,18],46:[2,18],49:222,50:[1,223],52:[1,224],63:[2,18],67:[2,18]},{35:[1,225]},{11:[2,16],31:[2,16],35:[2,16],39:[2,16],46:[2,16],63:[2,16],67:[2,16]},{11:[2,19],31:[2,19],35:[2,19],39:[2,19],45:[2,19],46:[2,19],63:[2,19],67:[2,19]},{51:226,53:[1,227],55:[1,228],56:[1,229]},{51:230,53:[1,227],55:[1,228],56:[1,229]},{35:[2,155],154:[2,155],155:[2,155]},{11:[2,21],31:[2,21],35:[2,21],39:[2,21],45:[2,21],46:[2,21],52:[1,231],63:[2,21],67:[2,21]},{54:[1,232]},{54:[1,233]},{54:[1,234]},{11:[2,22],31:[2,22],35:[2,22],39:[2,22],45:[2,22],46:[2,22],63:[2,22],67:[2,22]},{51:235,53:[1,227],55:[1,228],56:[1,229]},{11:[2,26],31:[2,26],35:[2,26],39:[2,26],45:[2,26],46:[2,26],52:[2,26],55:[1,236],56:[1,237],63:[2,26],67:[2,26]},{56:[1,238]},{11:[2,27],31:[2,27],35:[2,27],39:[2,27],45:[2,27],46:[2,27],52:[2,27],63:[2,27],67:[2,27]},{11:[2,20],31:[2,20],35:[2,20],39:[2,20],45:[2,20],46:[2,20],63:[2,20],67:[2,20]},{54:[1,239]},{54:[1,240]},{54:[1,241]},{56:[1,242]},{11:[2,25],31:[2,25],35:[2,25],39:[2,25],45:[2,25],46:[2,25],52:[2,25],63:[2,25],67:[2,25]},{11:[2,24],31:[2,24],35:[2,24],39:[2,24],45:[2,24],46:[2,24],52:[2,24],63:[2,24],67:[2,24]},{54:[1,243]},{11:[2,23],31:[2,23],35:[2,23],39:[2,23],45:[2,23],46:[2,23],52:[2,23],63:[2,23],67:[2,23]}],
defaultActions: {3:[2,1],49:[2,80],50:[2,81],51:[2,82],52:[2,83],54:[2,76],55:[2,77],80:[2,135],134:[2,9],140:[2,52],165:[2,122],178:[2,147],198:[2,12],202:[2,42],204:[2,29],216:[2,153]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 35;
break;
case 1:/* ignore comment */
break;
case 2:/* ignore comment */
break;
case 3:/* ignore whitespace */
break;
case 4:return 13;
break;
case 5:return 149;
break;
case 6:return 'USES';
break;
case 7:return 78;
break;
case 8:return 79;
break;
case 9:return 7;
break;
case 10:return 'TEST';
break;
case 11:return 'IMAGE';
break;
case 12:return 22;
break;
case 13:return 'NEEDS';
break;
case 14:return 67;
break;
case 15:return 39;
break;
case 16:return 50;
break;
case 17:return 52;
break;
case 18:return 53;
break;
case 19:return 55;
break;
case 20:return 56;
break;
case 21:return 'MAP';
break;
case 22:return 'FOR';
break;
case 23:return 76;
break;
case 24:return 75;
break;
case 25:return 141;
break;
case 26:return 136;
break;
case 27:return 139;
break;
case 28:return 'REDUCE';
break;
case 29:return 127;
break;
case 30:return 'INT';
break;
case 31:return 'LONG';
break;
case 32:return 'FLOAT';
break;
case 33:return 'DOUBLE';
break;
case 34:return 128;
break;
case 35:return 'ELSEIF';
break;
case 36:return 129; 
break;
case 37:return 63;
break;
case 38:return 65;
break;
case 39:return 31;
break;
case 40:return 34;
break;
case 41:return 155;
break;
case 42:return 47;
break;
case 43:return 48;
break;
case 44:return 'ESCAPE';	
break;
case 45:return 'ELLIPSIS';
break;
case 46:return 113;
break;
case 47:return 114;
break;
case 48:return 107;
break;
case 49:return 108;
break;
case 50:return 109;
break;
case 51:return 110;
break;
case 52:return 103;
break;
case 53:return 104;
break;
case 54:return 64;
break;
case 55:return 42;
break;
case 56:return 71;
break;
case 57:return 154;
break;
case 58:return 'PLUS';
break;
case 59:return 140;
break;
case 60:return 95;
break;
case 61:return 96;
break;
case 62:return 97;
break;
case 63:return 125;
break;
case 64:return 27;
break;
case 65:return 123;
break;
case 66:return 117;
break;
case 67:return 121;
break;
case 68:return 119;
break;
case 69:return 130;
break;
case 70:return 93;
break;
case 71:return 'QUESTION';
break;
case 72:return 89;
break;
case 73:return 9;
break;
case 74:return 11;
break;
case 75:return 40;
break;
case 76:return 41;
break;
case 77:return 85;
break;
case 78:return 86;
break;
case 79:return 146;
break;
case 80:return 25;
break;
case 81:return 59;
break;
case 82:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 83;
break;
case 83:return 142;
break;
case 84:
					console.log("here we are");
					if (typeof yy._iemitstack === 'undefined') {
						yy._iemitstack = [0];
					}
					var indentation = yy_.yytext.length;

				    if (indentation > yy._iemitstack[0]) {
				        yy._iemitstack.unshift(indentation);
				        return 45;
				    }
				
				    var tokens = [];
				
				    while (indentation < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				
				    if (tokens.length) return tokens;
				
break;
case 85:return 57;
break;
case 86:return 5;
break;
}
},
rules: [/^(?:(\n|\r)+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\s+)/,/^(?:theory\b)/,/^(?:extends\b)/,/^(?:uses\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:namespace\b)/,/^(?:test\b)/,/^(?:image\b)/,/^(?:data\b)/,/^(?:needs\b)/,/^(?:fn\b)/,/^(?:ff\b)/,/^(?:->)/,/^(?:<-)/,/^(?:style\b)/,/^(?:where\b)/,/^(?:yield\b)/,/^(?:map\b)/,/^(?:for\b)/,/^(?:null\b)/,/^(?:([0-9]+)+)/,/^(?:0x([0-9A-Fa-f]+))/,/^(?:([0-1]+)b\b)/,/^(?:#([0-9A-Fa-f]+))/,/^(?:reduce\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:else\s+if\b)/,/^(?:endif\b)/,/^(?:\[--)/,/^(?:--\])/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:is\b)/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\\)/,/^(?:\.\.\.)/,/^(?:eq|==)/,/^(?:neq|!=)/,/^(?:gt|>)/,/^(?:lt|<)/,/^(?:gte|>=)/,/^(?:lte|<=)/,/^(?:<<)/,/^(?:>>)/,/^(?:::)/,/^(?:=)/,/^(?:@=)/,/^(?:@)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%|mod\b)/,/^(?:\|\||or\b)/,/^(?:\|)/,/^(?:&&|and\b)/,/^(?:&)/,/^(?:\|)/,/^(?:\^|xor\b)/,/^(?:not|!)/,/^(?:\*\*)/,/^(?:\?)/,/^(?:\?!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:".*")/,/^(?:\.)/,/^(?:\s+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = theory;
exports.Parser = theory.Parser;
exports.parse = function () { return theory.parse.apply(theory, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}