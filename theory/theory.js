/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var theory = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"file_repetition0":4,"ENDOFFILE":5,"namespace":6,"PREFIX":7,"id":8,"INDENT":9,"namespace_repetition0":10,"DEDENT":11,"theory":12,"THEORY":13,"theory_option0":14,"theorybody":15,"theorybody_repetition0":16,"def":17,"sdef":18,"fdef":19,"fragfunc":20,"treefrag":21,"tfnode":22,"treefrag_option0":23,"XPATHSTART":24,"leafid":25,"tfnode_option0":26,"XPATHEND":27,"tfnode_option1":28,"leafid_repetition_plus0":29,"tf_islist":30,"tf_islist_repetition_plus0":31,"FRAGFUNC":32,"LPAREN":33,"fragfunc_option0":34,"RPAREN":35,"IMPLICATION":36,"fftree":37,"ffnode":38,"fftree_option0":39,"LFFNODE":40,"ffid":41,"RFFNODE":42,"ELLIPSIS":43,"ffimplist":44,"fragexpr":45,"REVIMPLICATION":46,"STYLE":47,"expression":48,"WHERE":49,"YIELD":50,"tuplevarlist":51,"COMMA":52,"typedef":53,"LBRACK":54,"RBRACK":55,"SETSTART":56,"TYPIFY":57,"SETEND":58,"assignment_list":59,"FUNCTION":60,"fdef_option0":61,"EOL":62,"lside":63,"assignment":64,"ASSIGN":65,"CASEASSIGN":66,"caselist":67,"casedef":68,"arglist":69,"argdef":70,"paramlist":71,"paramlist_repetition0":72,"lit":73,"NATLITERAL":74,"NULL":75,"boollit":76,"TRUE":77,"FALSE":78,"elist":79,"atom":80,"number":81,"STRING_LIT":82,"dict":83,"postfix_expression":84,"LBRACKET":85,"RBRACKET":86,"INC_OP":87,"DEC_OP":88,"EXCUSEME":89,"unary_expression":90,"unary_expression_option0":91,"power_expression":92,"power_expression_option0":93,"multiplicative_expression":94,"multiplicative_expression_option0":95,"additive_expression":96,"additive_expression_option0":97,"shift_expression":98,"shift_expression_option0":99,"relational_expression":100,"relational_expression_option0":101,"equivalence_expression":102,"equivalence_expression_option0":103,"and_expression":104,"and_expression_option0":105,"xor_expression":106,"xor_expression_option0":107,"ior_expression":108,"ior_expression_option0":109,"logical_and_expression":110,"logical_and_expression_option0":111,"logical_or_expression":112,"logical_or_expression_option0":113,"test_expression":114,"IF":115,"test_expression_option0":116,"ENDIF":117,"unary_op":118,"NOT":119,"equiv_op":120,"EQ":121,"NEQ":122,"compare_op":123,"GT":124,"LT":125,"GTE":126,"LTE":127,"muldivmod_op":128,"TIMES":129,"DIVIDE":130,"MOD":131,"shift_op":132,"SHIFTL":133,"SHIFTR":134,"addsub_op":135,"PLUS":136,"MINUS":137,"integer":138,"FLOAT":139,"color":140,"HEXNATLITERAL":141,"BINNATLITERAL":142,"ID":143,"HEXCOLOR":144,"integer_option0":145,"array":146,"LBRACE":147,"ddeflist":148,"RBRACE":149,"dictdef":150,"ddatom":151,"COLON":152,"file_repetition0_group0":153,"NEWLINE":154,"namespace_repetition0_group0":155,"data":156,"EXTENDS":157,"theorybody_repetition0_group0":158,"treefrag_option0_repetition_plus0":159,"leafid_repetition_plus0_group0":160,"DOT":161,"tf_islist_repetition_plus0_option0":162,"AT":163,"IS":164,"POWER":165,"B_AND":166,"XOR":167,"B_OR":168,"AND":169,"OR":170,"ELSE":171,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",7:"PREFIX",9:"INDENT",11:"DEDENT",13:"THEORY",24:"XPATHSTART",27:"XPATHEND",32:"FRAGFUNC",33:"LPAREN",35:"RPAREN",36:"IMPLICATION",40:"LFFNODE",42:"RFFNODE",43:"ELLIPSIS",46:"REVIMPLICATION",47:"STYLE",49:"WHERE",50:"YIELD",52:"COMMA",54:"LBRACK",55:"RBRACK",56:"SETSTART",57:"TYPIFY",58:"SETEND",60:"FUNCTION",62:"EOL",65:"ASSIGN",66:"CASEASSIGN",74:"NATLITERAL",75:"NULL",77:"TRUE",78:"FALSE",82:"STRING_LIT",85:"LBRACKET",86:"RBRACKET",87:"INC_OP",88:"DEC_OP",89:"EXCUSEME",115:"IF",117:"ENDIF",119:"NOT",121:"EQ",122:"NEQ",124:"GT",125:"LT",126:"GTE",127:"LTE",129:"TIMES",130:"DIVIDE",131:"MOD",133:"SHIFTL",134:"SHIFTR",136:"PLUS",137:"MINUS",139:"FLOAT",141:"HEXNATLITERAL",142:"BINNATLITERAL",143:"ID",144:"HEXCOLOR",147:"LBRACE",149:"RBRACE",152:"COLON",154:"NEWLINE",156:"data",157:"EXTENDS",161:"DOT",163:"AT",164:"IS",165:"POWER",166:"B_AND",167:"XOR",168:"B_OR",169:"AND",170:"OR",171:"ELSE"},
productions_: [0,[3,2],[6,5],[12,6],[15,1],[17,1],[17,1],[17,1],[17,1],[21,2],[22,5],[25,1],[30,1],[20,7],[37,2],[38,3],[41,1],[41,1],[44,4],[44,2],[44,2],[45,6],[45,4],[45,4],[45,2],[45,2],[51,3],[51,1],[53,1],[53,3],[18,6],[18,4],[19,8],[63,1],[64,3],[64,3],[59,1],[59,3],[67,2],[67,0],[68,3],[69,1],[69,3],[70,1],[71,2],[73,1],[73,1],[76,1],[76,1],[79,3],[79,1],[79,0],[80,1],[80,1],[80,1],[80,3],[80,1],[84,1],[84,4],[84,2],[84,2],[84,2],[84,4],[90,2],[92,2],[94,2],[96,2],[98,2],[100,2],[102,2],[104,2],[106,2],[108,2],[110,2],[112,2],[114,5],[48,1],[48,1],[118,1],[120,1],[120,1],[123,1],[123,1],[123,1],[123,1],[128,1],[128,1],[128,1],[132,1],[132,1],[135,1],[135,1],[81,1],[81,1],[81,1],[81,1],[81,1],[8,1],[140,1],[138,2],[146,3],[83,3],[148,1],[148,3],[150,3],[151,1],[151,1],[151,1],[151,3],[153,1],[153,1],[4,0],[4,2],[155,1],[155,1],[155,1],[10,0],[10,2],[14,0],[14,2],[158,1],[158,1],[16,0],[16,2],[159,1],[159,2],[23,0],[23,3],[26,0],[26,2],[28,0],[28,4],[160,1],[160,1],[29,1],[29,2],[162,0],[162,2],[31,4],[31,5],[34,0],[34,1],[39,0],[39,3],[61,0],[61,1],[72,0],[72,3],[91,0],[91,1],[93,0],[93,2],[95,0],[95,2],[97,0],[97,2],[99,0],[99,2],[101,0],[101,2],[103,0],[103,2],[105,0],[105,2],[107,0],[107,2],[109,0],[109,2],[111,0],[111,2],[113,0],[113,2],[116,0],[116,2],[145,0],[145,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; 
break;
case 3: this.$ = new yy.Theory($$[$0-4], $$[$0-1], $$[$0-2]); 
break;
case 26: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 27: this.$ = [ $$[$0] ]; 
break;
case 28: this.$ = new yy.Type($$[$0]); 
break;
case 29: this.$ = new yy.Type("Array", $$[$0-2]); 
break;
case 30: this.$ = new yy.SetDef($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 31: this.$ = new yy.SetDef($$[$0-2], $$[$0-2], $$[$0]); 
break;
case 32: this.$ = new yy.FnDef($$[$0-6], paramlist, null, $$[$0-1]); 
break;
case 33: this.$ = [ $$[$0] ]; 
break;
case 34: this.$ = new yy.Assignment($$[$0-2], $$[$0]); 
break;
case 35: this.$ = new yy.CaseAssignment($$[$0-2], $$[$0]); 
break;
case 36: this.$ = [ $$[$0] ]; 
break;
case 37: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 38: this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 39: this.$ = []; 
break;
case 40: this.$ = new yy.CaseDef($$[$0-2], $$[$0]); 
break;
case 45: this.$ = parseInt($$[$0]); 
break;
case 46: this.$ = null; 
break;
case 47: this.$ = true; 
break;
case 48: this.$ = false; 
break;
case 49: this.$ = $$[$0]; this.$.unshift(e); 
break;
case 50: this.$ = [ e ]; 
break;
case 111:this.$ = [];
break;
case 112:$$[$0-1].push($$[$0]);
break;
case 116:this.$ = [];
break;
case 117:$$[$0-1].push($$[$0]);
break;
case 122:this.$ = [];
break;
case 123:$$[$0-1].push($$[$0]);
break;
case 124:this.$ = [$$[$0]];
break;
case 125:$$[$0-1].push($$[$0]);
break;
case 134:this.$ = [$$[$0]];
break;
case 135:$$[$0-1].push($$[$0]);
break;
case 138:this.$ = [$$[$0-3]];
break;
case 139:$$[$0-4].push($$[$0-3]);
break;
case 146:this.$ = [];
break;
case 147:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,111],7:[2,111],154:[2,111]},{1:[3]},{5:[1,3],6:5,7:[1,7],153:4,154:[1,6]},{1:[2,1]},{5:[2,112],7:[2,112],154:[2,112]},{5:[2,109],7:[2,109],154:[2,109]},{5:[2,110],7:[2,110],154:[2,110]},{8:8,143:[1,9]},{9:[1,10]},{9:[2,97],11:[2,97],24:[2,97],27:[2,97],32:[2,97],33:[2,97],35:[2,97],36:[2,97],42:[2,97],52:[2,97],56:[2,97],57:[2,97],58:[2,97],60:[2,97],62:[2,97],65:[2,97],66:[2,97],85:[2,97],86:[2,97],87:[2,97],88:[2,97],89:[2,97],115:[2,97],117:[2,97],124:[2,97],125:[2,97],126:[2,97],127:[2,97],129:[2,97],130:[2,97],131:[2,97],133:[2,97],134:[2,97],136:[2,97],137:[2,97],143:[2,97],149:[2,97],152:[2,97],154:[2,97],157:[2,97],161:[2,97],164:[2,97],165:[2,97],166:[2,97],167:[2,97],168:[2,97],169:[2,97],170:[2,97],171:[2,97]},{10:11,11:[2,116],13:[2,116],154:[2,116],156:[2,116]},{11:[1,12],12:14,13:[1,17],154:[1,16],155:13,156:[1,15]},{5:[2,2],7:[2,2],154:[2,2]},{11:[2,117],13:[2,117],154:[2,117],156:[2,117]},{11:[2,113],13:[2,113],154:[2,113],156:[2,113]},{11:[2,114],13:[2,114],154:[2,114],156:[2,114]},{11:[2,115],13:[2,115],154:[2,115],156:[2,115]},{8:18,143:[1,9]},{9:[2,118],14:19,157:[1,20]},{9:[1,21]},{8:22,143:[1,9]},{11:[2,122],15:23,16:24,24:[2,122],32:[2,122],56:[2,122],60:[2,122],154:[2,122]},{9:[2,119]},{11:[1,25]},{11:[2,4],17:27,18:29,19:30,20:31,21:32,22:36,24:[1,37],32:[1,35],56:[1,33],60:[1,34],154:[1,28],158:26},{11:[2,3],13:[2,3],154:[2,3],156:[2,3]},{11:[2,123],24:[2,123],32:[2,123],56:[2,123],60:[2,123],154:[2,123]},{11:[2,120],24:[2,120],32:[2,120],56:[2,120],60:[2,120],154:[2,120]},{11:[2,121],24:[2,121],32:[2,121],56:[2,121],60:[2,121],154:[2,121]},{11:[2,5],24:[2,5],32:[2,5],56:[2,5],60:[2,5],154:[2,5]},{11:[2,6],24:[2,6],32:[2,6],56:[2,6],60:[2,6],154:[2,6]},{11:[2,7],24:[2,7],32:[2,7],56:[2,7],60:[2,7],154:[2,7]},{11:[2,8],24:[2,8],32:[2,8],56:[2,8],60:[2,8],154:[2,8]},{8:38,143:[1,9]},{8:39,143:[1,9]},{8:40,143:[1,9]},{9:[1,42],11:[2,126],23:41,24:[2,126],32:[2,126],56:[2,126],60:[2,126],154:[2,126]},{8:46,25:43,29:44,143:[1,9],160:45,161:[1,47]},{57:[1,48],58:[1,49]},{33:[1,50]},{33:[1,51]},{11:[2,9],24:[2,9],32:[2,9],56:[2,9],60:[2,9],154:[2,9]},{21:53,22:36,24:[1,37],159:52},{26:54,27:[2,128],57:[1,55]},{8:46,27:[2,11],42:[2,11],57:[2,11],143:[1,9],160:56,161:[1,47]},{27:[2,134],42:[2,134],57:[2,134],143:[2,134],161:[2,134]},{27:[2,132],42:[2,132],57:[2,132],143:[2,132],161:[2,132]},{27:[2,133],42:[2,133],57:[2,133],143:[2,133],161:[2,133]},{8:57,143:[1,9]},{8:61,59:58,63:60,64:59,143:[1,9]},{8:64,35:[2,144],61:62,71:63,143:[1,9]},{8:64,34:65,35:[2,140],71:66,143:[1,9]},{11:[1,67],21:68,22:36,24:[1,37]},{11:[2,124],24:[2,124]},{27:[1,69]},{8:70,143:[1,9]},{27:[2,135],42:[2,135],57:[2,135],143:[2,135],161:[2,135]},{58:[1,71]},{11:[2,31],24:[2,31],32:[2,31],56:[2,31],60:[2,31],154:[2,31]},{11:[2,36],24:[2,36],32:[2,36],52:[1,72],56:[2,36],60:[2,36],154:[2,36]},{65:[1,73],66:[1,74]},{65:[2,33],66:[2,33]},{35:[1,75]},{35:[2,145]},{35:[2,146],52:[2,146],72:76},{35:[1,77]},{35:[2,141]},{11:[2,127],24:[2,127],32:[2,127],56:[2,127],60:[2,127],154:[2,127]},{11:[2,125],24:[2,125]},{9:[2,130],11:[2,130],24:[2,130],28:78,32:[2,130],56:[2,130],57:[1,79],60:[2,130],154:[2,130]},{27:[2,129]},{8:61,59:80,63:60,64:59,143:[1,9]},{8:61,59:81,63:60,64:59,143:[1,9]},{33:[2,170],48:82,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{8:88,11:[2,39],24:[2,39],32:[2,39],52:[2,39],56:[2,39],60:[2,39],67:86,68:87,143:[1,9],154:[2,39]},{36:[1,89]},{35:[2,44],52:[1,90]},{36:[1,91]},{9:[2,10],11:[2,10],24:[2,10],32:[2,10],56:[2,10],60:[2,10],154:[2,10]},{9:[1,92]},{11:[2,30],24:[2,30],32:[2,30],56:[2,30],60:[2,30],154:[2,30]},{11:[2,37],24:[2,37],32:[2,37],56:[2,37],60:[2,37],154:[2,37]},{11:[2,34],24:[2,34],32:[2,34],52:[2,34],56:[2,34],60:[2,34],154:[2,34]},{11:[2,76],24:[2,76],32:[2,76],35:[2,76],52:[2,76],56:[2,76],60:[2,76],62:[2,76],86:[2,76],143:[2,76],149:[2,76],154:[2,76]},{11:[2,77],24:[2,77],32:[2,77],35:[2,77],52:[2,77],56:[2,77],60:[2,77],62:[2,77],86:[2,77],115:[1,93],143:[2,77],149:[2,77],154:[2,77],170:[1,94]},{33:[2,168],74:[2,168],82:[2,168],110:95,111:96,119:[2,168],137:[2,168],139:[2,168],141:[2,168],142:[2,168],143:[2,168],144:[2,168],147:[2,168]},{11:[2,35],24:[2,35],32:[2,35],52:[2,35],56:[2,35],60:[2,35],154:[2,35]},{8:88,11:[2,39],24:[2,39],32:[2,39],52:[2,39],56:[2,39],60:[2,39],67:97,68:87,143:[1,9],154:[2,39]},{36:[1,98]},{33:[2,170],48:99,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{8:100,143:[1,9]},{37:101,38:102,40:[1,103]},{30:104,31:105,162:106,163:[1,107],164:[2,136]},{33:[2,170],74:[2,170],82:[2,170],112:108,113:85,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{33:[2,171],74:[2,171],82:[2,171],119:[2,171],137:[2,171],139:[2,171],141:[2,171],142:[2,171],143:[2,171],144:[2,171],147:[2,171]},{11:[2,74],24:[2,74],32:[2,74],35:[2,74],52:[2,74],56:[2,74],60:[2,74],62:[2,74],86:[2,74],115:[2,74],117:[2,74],143:[2,74],149:[2,74],154:[2,74],169:[1,109],170:[2,74],171:[2,74]},{33:[2,166],74:[2,166],82:[2,166],108:110,109:111,119:[2,166],137:[2,166],139:[2,166],141:[2,166],142:[2,166],143:[2,166],144:[2,166],147:[2,166]},{11:[2,38],24:[2,38],32:[2,38],52:[2,38],56:[2,38],60:[2,38],154:[2,38]},{33:[2,170],48:112,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{62:[1,113]},{35:[2,147],52:[2,147]},{11:[2,13],24:[2,13],32:[2,13],56:[2,13],60:[2,13],154:[2,13]},{9:[1,115],11:[2,142],24:[2,142],32:[2,142],39:114,56:[2,142],60:[2,142],154:[2,142]},{8:46,25:117,29:44,41:116,43:[1,118],143:[1,9],160:45,161:[1,47]},{11:[1,119]},{11:[2,12],162:120,163:[1,107],164:[2,136]},{164:[1,121]},{8:122,143:[1,9]},{116:123,117:[2,172],170:[1,94],171:[1,124]},{33:[2,169],74:[2,169],82:[2,169],119:[2,169],137:[2,169],139:[2,169],141:[2,169],142:[2,169],143:[2,169],144:[2,169],147:[2,169]},{11:[2,73],24:[2,73],32:[2,73],35:[2,73],52:[2,73],56:[2,73],60:[2,73],62:[2,73],86:[2,73],115:[2,73],117:[2,73],143:[2,73],149:[2,73],154:[2,73],168:[1,125],169:[2,73],170:[2,73],171:[2,73]},{33:[2,164],74:[2,164],82:[2,164],106:126,107:127,119:[2,164],137:[2,164],139:[2,164],141:[2,164],142:[2,164],143:[2,164],144:[2,164],147:[2,164]},{11:[2,40],24:[2,40],32:[2,40],52:[2,40],56:[2,40],60:[2,40],143:[2,40],154:[2,40]},{11:[2,32],24:[2,32],32:[2,32],56:[2,32],60:[2,32],154:[2,32]},{11:[2,14],24:[2,14],32:[2,14],56:[2,14],60:[2,14],154:[2,14]},{37:128,38:102,40:[1,103]},{42:[1,129]},{42:[2,16]},{42:[2,17]},{9:[2,131],11:[2,131],24:[2,131],32:[2,131],56:[2,131],60:[2,131],154:[2,131]},{164:[1,130]},{33:[2,170],48:131,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{164:[2,137]},{117:[1,132]},{33:[2,170],74:[2,170],82:[2,170],112:133,113:85,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{33:[2,167],74:[2,167],82:[2,167],119:[2,167],137:[2,167],139:[2,167],141:[2,167],142:[2,167],143:[2,167],144:[2,167],147:[2,167]},{11:[2,72],24:[2,72],32:[2,72],35:[2,72],52:[2,72],56:[2,72],60:[2,72],62:[2,72],86:[2,72],115:[2,72],117:[2,72],143:[2,72],149:[2,72],154:[2,72],167:[1,134],168:[2,72],169:[2,72],170:[2,72],171:[2,72]},{33:[2,162],74:[2,162],82:[2,162],104:135,105:136,119:[2,162],137:[2,162],139:[2,162],141:[2,162],142:[2,162],143:[2,162],144:[2,162],147:[2,162]},{11:[1,137]},{9:[2,15],11:[2,15],24:[2,15],32:[2,15],56:[2,15],60:[2,15],154:[2,15]},{33:[2,170],48:138,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{62:[1,139]},{11:[2,75],24:[2,75],32:[2,75],35:[2,75],52:[2,75],56:[2,75],60:[2,75],62:[2,75],86:[2,75],143:[2,75],149:[2,75],154:[2,75]},{117:[2,173],170:[1,94]},{33:[2,165],74:[2,165],82:[2,165],119:[2,165],137:[2,165],139:[2,165],141:[2,165],142:[2,165],143:[2,165],144:[2,165],147:[2,165]},{11:[2,71],24:[2,71],32:[2,71],35:[2,71],52:[2,71],56:[2,71],60:[2,71],62:[2,71],86:[2,71],115:[2,71],117:[2,71],143:[2,71],149:[2,71],154:[2,71],166:[1,140],167:[2,71],168:[2,71],169:[2,71],170:[2,71],171:[2,71]},{33:[2,158],74:[2,158],82:[2,158],100:141,101:142,119:[2,158],137:[2,158],139:[2,158],141:[2,158],142:[2,158],143:[2,158],144:[2,158],147:[2,158]},{11:[2,143],24:[2,143],32:[2,143],56:[2,143],60:[2,143],154:[2,143]},{62:[1,143]},{11:[2,138],163:[2,138],164:[2,138]},{33:[2,163],74:[2,163],82:[2,163],119:[2,163],137:[2,163],139:[2,163],141:[2,163],142:[2,163],143:[2,163],144:[2,163],147:[2,163]},{11:[2,70],24:[2,70],32:[2,70],35:[2,70],52:[2,70],56:[2,70],60:[2,70],62:[2,70],86:[2,70],115:[2,70],117:[2,70],123:144,124:[1,145],125:[1,146],126:[1,147],127:[1,148],143:[2,70],149:[2,70],154:[2,70],166:[2,70],167:[2,70],168:[2,70],169:[2,70],170:[2,70],171:[2,70]},{33:[2,156],74:[2,156],82:[2,156],98:149,99:150,119:[2,156],137:[2,156],139:[2,156],141:[2,156],142:[2,156],143:[2,156],144:[2,156],147:[2,156]},{11:[2,139],163:[2,139],164:[2,139]},{33:[2,159],74:[2,159],82:[2,159],119:[2,159],137:[2,159],139:[2,159],141:[2,159],142:[2,159],143:[2,159],144:[2,159],147:[2,159]},{33:[2,81],74:[2,81],82:[2,81],119:[2,81],137:[2,81],139:[2,81],141:[2,81],142:[2,81],143:[2,81],144:[2,81],147:[2,81]},{33:[2,82],74:[2,82],82:[2,82],119:[2,82],137:[2,82],139:[2,82],141:[2,82],142:[2,82],143:[2,82],144:[2,82],147:[2,82]},{33:[2,83],74:[2,83],82:[2,83],119:[2,83],137:[2,83],139:[2,83],141:[2,83],142:[2,83],143:[2,83],144:[2,83],147:[2,83]},{33:[2,84],74:[2,84],82:[2,84],119:[2,84],137:[2,84],139:[2,84],141:[2,84],142:[2,84],143:[2,84],144:[2,84],147:[2,84]},{11:[2,68],24:[2,68],32:[2,68],35:[2,68],52:[2,68],56:[2,68],60:[2,68],62:[2,68],86:[2,68],115:[2,68],117:[2,68],124:[2,68],125:[2,68],126:[2,68],127:[2,68],132:151,133:[1,152],134:[1,153],143:[2,68],149:[2,68],154:[2,68],166:[2,68],167:[2,68],168:[2,68],169:[2,68],170:[2,68],171:[2,68]},{33:[2,154],74:[2,154],82:[2,154],96:154,97:155,119:[2,154],137:[2,154],139:[2,154],141:[2,154],142:[2,154],143:[2,154],144:[2,154],147:[2,154]},{33:[2,157],74:[2,157],82:[2,157],119:[2,157],137:[2,157],139:[2,157],141:[2,157],142:[2,157],143:[2,157],144:[2,157],147:[2,157]},{33:[2,88],74:[2,88],82:[2,88],119:[2,88],137:[2,88],139:[2,88],141:[2,88],142:[2,88],143:[2,88],144:[2,88],147:[2,88]},{33:[2,89],74:[2,89],82:[2,89],119:[2,89],137:[2,89],139:[2,89],141:[2,89],142:[2,89],143:[2,89],144:[2,89],147:[2,89]},{11:[2,67],24:[2,67],32:[2,67],35:[2,67],52:[2,67],56:[2,67],60:[2,67],62:[2,67],86:[2,67],115:[2,67],117:[2,67],124:[2,67],125:[2,67],126:[2,67],127:[2,67],133:[2,67],134:[2,67],135:156,136:[1,157],137:[1,158],143:[2,67],149:[2,67],154:[2,67],166:[2,67],167:[2,67],168:[2,67],169:[2,67],170:[2,67],171:[2,67]},{33:[2,152],74:[2,152],82:[2,152],94:159,95:160,119:[2,152],137:[2,152],139:[2,152],141:[2,152],142:[2,152],143:[2,152],144:[2,152],147:[2,152]},{33:[2,155],74:[2,155],82:[2,155],119:[2,155],137:[2,155],139:[2,155],141:[2,155],142:[2,155],143:[2,155],144:[2,155],147:[2,155]},{33:[2,90],74:[2,90],82:[2,90],119:[2,90],137:[2,90],139:[2,90],141:[2,90],142:[2,90],143:[2,90],144:[2,90],147:[2,90]},{33:[2,91],74:[2,91],82:[2,91],119:[2,91],137:[2,91],139:[2,91],141:[2,91],142:[2,91],143:[2,91],144:[2,91],147:[2,91]},{11:[2,66],24:[2,66],32:[2,66],35:[2,66],52:[2,66],56:[2,66],60:[2,66],62:[2,66],86:[2,66],115:[2,66],117:[2,66],124:[2,66],125:[2,66],126:[2,66],127:[2,66],128:161,129:[1,162],130:[1,163],131:[1,164],133:[2,66],134:[2,66],136:[2,66],137:[2,66],143:[2,66],149:[2,66],154:[2,66],166:[2,66],167:[2,66],168:[2,66],169:[2,66],170:[2,66],171:[2,66]},{33:[2,150],74:[2,150],82:[2,150],92:165,93:166,119:[2,150],137:[2,150],139:[2,150],141:[2,150],142:[2,150],143:[2,150],144:[2,150],147:[2,150]},{33:[2,153],74:[2,153],82:[2,153],119:[2,153],137:[2,153],139:[2,153],141:[2,153],142:[2,153],143:[2,153],144:[2,153],147:[2,153]},{33:[2,85],74:[2,85],82:[2,85],119:[2,85],137:[2,85],139:[2,85],141:[2,85],142:[2,85],143:[2,85],144:[2,85],147:[2,85]},{33:[2,86],74:[2,86],82:[2,86],119:[2,86],137:[2,86],139:[2,86],141:[2,86],142:[2,86],143:[2,86],144:[2,86],147:[2,86]},{33:[2,87],74:[2,87],82:[2,87],119:[2,87],137:[2,87],139:[2,87],141:[2,87],142:[2,87],143:[2,87],144:[2,87],147:[2,87]},{11:[2,65],24:[2,65],32:[2,65],35:[2,65],52:[2,65],56:[2,65],60:[2,65],62:[2,65],86:[2,65],115:[2,65],117:[2,65],124:[2,65],125:[2,65],126:[2,65],127:[2,65],129:[2,65],130:[2,65],131:[2,65],133:[2,65],134:[2,65],136:[2,65],137:[2,65],143:[2,65],149:[2,65],154:[2,65],165:[1,167],166:[2,65],167:[2,65],168:[2,65],169:[2,65],170:[2,65],171:[2,65]},{33:[2,148],74:[2,148],82:[2,148],90:168,91:169,118:170,119:[1,171],137:[2,148],139:[2,148],141:[2,148],142:[2,148],143:[2,148],144:[2,148],147:[2,148]},{33:[2,151],74:[2,151],82:[2,151],119:[2,151],137:[2,151],139:[2,151],141:[2,151],142:[2,151],143:[2,151],144:[2,151],147:[2,151]},{11:[2,64],24:[2,64],32:[2,64],35:[2,64],52:[2,64],56:[2,64],60:[2,64],62:[2,64],86:[2,64],115:[2,64],117:[2,64],124:[2,64],125:[2,64],126:[2,64],127:[2,64],129:[2,64],130:[2,64],131:[2,64],133:[2,64],134:[2,64],136:[2,64],137:[2,64],143:[2,64],149:[2,64],154:[2,64],165:[2,64],166:[2,64],167:[2,64],168:[2,64],169:[2,64],170:[2,64],171:[2,64]},{8:174,33:[1,177],74:[2,174],80:173,81:175,82:[1,176],83:178,84:172,137:[1,187],138:179,139:[1,180],140:181,141:[1,182],142:[1,183],143:[1,9],144:[1,186],145:185,147:[1,184]},{33:[2,149],74:[2,149],82:[2,149],137:[2,149],139:[2,149],141:[2,149],142:[2,149],143:[2,149],144:[2,149],147:[2,149]},{33:[2,78],74:[2,78],82:[2,78],137:[2,78],139:[2,78],141:[2,78],142:[2,78],143:[2,78],144:[2,78],147:[2,78]},{11:[2,63],24:[2,63],32:[2,63],33:[1,192],35:[2,63],52:[2,63],56:[2,63],60:[2,63],62:[2,63],85:[1,188],86:[2,63],87:[1,189],88:[1,190],89:[1,191],115:[2,63],117:[2,63],124:[2,63],125:[2,63],126:[2,63],127:[2,63],129:[2,63],130:[2,63],131:[2,63],133:[2,63],134:[2,63],136:[2,63],137:[2,63],143:[2,63],149:[2,63],154:[2,63],165:[2,63],166:[2,63],167:[2,63],168:[2,63],169:[2,63],170:[2,63],171:[2,63]},{11:[2,57],24:[2,57],32:[2,57],33:[2,57],35:[2,57],52:[2,57],56:[2,57],60:[2,57],62:[2,57],85:[2,57],86:[2,57],87:[2,57],88:[2,57],89:[2,57],115:[2,57],117:[2,57],124:[2,57],125:[2,57],126:[2,57],127:[2,57],129:[2,57],130:[2,57],131:[2,57],133:[2,57],134:[2,57],136:[2,57],137:[2,57],143:[2,57],149:[2,57],154:[2,57],165:[2,57],166:[2,57],167:[2,57],168:[2,57],169:[2,57],170:[2,57],171:[2,57]},{11:[2,52],24:[2,52],32:[2,52],33:[2,52],35:[2,52],52:[2,52],56:[2,52],60:[2,52],62:[2,52],85:[2,52],86:[2,52],87:[2,52],88:[2,52],89:[2,52],115:[2,52],117:[2,52],124:[2,52],125:[2,52],126:[2,52],127:[2,52],129:[2,52],130:[2,52],131:[2,52],133:[2,52],134:[2,52],136:[2,52],137:[2,52],143:[2,52],149:[2,52],154:[2,52],165:[2,52],166:[2,52],167:[2,52],168:[2,52],169:[2,52],170:[2,52],171:[2,52]},{11:[2,53],24:[2,53],32:[2,53],33:[2,53],35:[2,53],52:[2,53],56:[2,53],60:[2,53],62:[2,53],85:[2,53],86:[2,53],87:[2,53],88:[2,53],89:[2,53],115:[2,53],117:[2,53],124:[2,53],125:[2,53],126:[2,53],127:[2,53],129:[2,53],130:[2,53],131:[2,53],133:[2,53],134:[2,53],136:[2,53],137:[2,53],143:[2,53],149:[2,53],154:[2,53],165:[2,53],166:[2,53],167:[2,53],168:[2,53],169:[2,53],170:[2,53],171:[2,53]},{11:[2,54],24:[2,54],32:[2,54],33:[2,54],35:[2,54],52:[2,54],56:[2,54],60:[2,54],62:[2,54],85:[2,54],86:[2,54],87:[2,54],88:[2,54],89:[2,54],115:[2,54],117:[2,54],124:[2,54],125:[2,54],126:[2,54],127:[2,54],129:[2,54],130:[2,54],131:[2,54],133:[2,54],134:[2,54],136:[2,54],137:[2,54],143:[2,54],149:[2,54],154:[2,54],165:[2,54],166:[2,54],167:[2,54],168:[2,54],169:[2,54],170:[2,54],171:[2,54]},{33:[2,170],48:193,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{11:[2,56],24:[2,56],32:[2,56],33:[2,56],35:[2,56],52:[2,56],56:[2,56],60:[2,56],62:[2,56],85:[2,56],86:[2,56],87:[2,56],88:[2,56],89:[2,56],115:[2,56],117:[2,56],124:[2,56],125:[2,56],126:[2,56],127:[2,56],129:[2,56],130:[2,56],131:[2,56],133:[2,56],134:[2,56],136:[2,56],137:[2,56],143:[2,56],149:[2,56],154:[2,56],165:[2,56],166:[2,56],167:[2,56],168:[2,56],169:[2,56],170:[2,56],171:[2,56]},{11:[2,92],24:[2,92],32:[2,92],33:[2,92],35:[2,92],52:[2,92],56:[2,92],60:[2,92],62:[2,92],85:[2,92],86:[2,92],87:[2,92],88:[2,92],89:[2,92],115:[2,92],117:[2,92],124:[2,92],125:[2,92],126:[2,92],127:[2,92],129:[2,92],130:[2,92],131:[2,92],133:[2,92],134:[2,92],136:[2,92],137:[2,92],143:[2,92],149:[2,92],152:[2,92],154:[2,92],165:[2,92],166:[2,92],167:[2,92],168:[2,92],169:[2,92],170:[2,92],171:[2,92]},{11:[2,93],24:[2,93],32:[2,93],33:[2,93],35:[2,93],52:[2,93],56:[2,93],60:[2,93],62:[2,93],85:[2,93],86:[2,93],87:[2,93],88:[2,93],89:[2,93],115:[2,93],117:[2,93],124:[2,93],125:[2,93],126:[2,93],127:[2,93],129:[2,93],130:[2,93],131:[2,93],133:[2,93],134:[2,93],136:[2,93],137:[2,93],143:[2,93],149:[2,93],152:[2,93],154:[2,93],165:[2,93],166:[2,93],167:[2,93],168:[2,93],169:[2,93],170:[2,93],171:[2,93]},{11:[2,94],24:[2,94],32:[2,94],33:[2,94],35:[2,94],52:[2,94],56:[2,94],60:[2,94],62:[2,94],85:[2,94],86:[2,94],87:[2,94],88:[2,94],89:[2,94],115:[2,94],117:[2,94],124:[2,94],125:[2,94],126:[2,94],127:[2,94],129:[2,94],130:[2,94],131:[2,94],133:[2,94],134:[2,94],136:[2,94],137:[2,94],143:[2,94],149:[2,94],152:[2,94],154:[2,94],165:[2,94],166:[2,94],167:[2,94],168:[2,94],169:[2,94],170:[2,94],171:[2,94]},{11:[2,95],24:[2,95],32:[2,95],33:[2,95],35:[2,95],52:[2,95],56:[2,95],60:[2,95],62:[2,95],85:[2,95],86:[2,95],87:[2,95],88:[2,95],89:[2,95],115:[2,95],117:[2,95],124:[2,95],125:[2,95],126:[2,95],127:[2,95],129:[2,95],130:[2,95],131:[2,95],133:[2,95],134:[2,95],136:[2,95],137:[2,95],143:[2,95],149:[2,95],152:[2,95],154:[2,95],165:[2,95],166:[2,95],167:[2,95],168:[2,95],169:[2,95],170:[2,95],171:[2,95]},{11:[2,96],24:[2,96],32:[2,96],33:[2,96],35:[2,96],52:[2,96],56:[2,96],60:[2,96],62:[2,96],85:[2,96],86:[2,96],87:[2,96],88:[2,96],89:[2,96],115:[2,96],117:[2,96],124:[2,96],125:[2,96],126:[2,96],127:[2,96],129:[2,96],130:[2,96],131:[2,96],133:[2,96],134:[2,96],136:[2,96],137:[2,96],143:[2,96],149:[2,96],152:[2,96],154:[2,96],165:[2,96],166:[2,96],167:[2,96],168:[2,96],169:[2,96],170:[2,96],171:[2,96]},{8:197,33:[1,200],74:[2,174],81:198,82:[1,199],137:[1,187],138:179,139:[1,180],140:181,141:[1,182],142:[1,183],143:[1,9],144:[1,186],145:185,148:194,150:195,151:196},{74:[1,201]},{11:[2,98],24:[2,98],32:[2,98],33:[2,98],35:[2,98],52:[2,98],56:[2,98],60:[2,98],62:[2,98],85:[2,98],86:[2,98],87:[2,98],88:[2,98],89:[2,98],115:[2,98],117:[2,98],124:[2,98],125:[2,98],126:[2,98],127:[2,98],129:[2,98],130:[2,98],131:[2,98],133:[2,98],134:[2,98],136:[2,98],137:[2,98],143:[2,98],149:[2,98],152:[2,98],154:[2,98],165:[2,98],166:[2,98],167:[2,98],168:[2,98],169:[2,98],170:[2,98],171:[2,98]},{74:[2,175]},{33:[2,170],48:202,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{11:[2,59],24:[2,59],32:[2,59],33:[2,59],35:[2,59],52:[2,59],56:[2,59],60:[2,59],62:[2,59],85:[2,59],86:[2,59],87:[2,59],88:[2,59],89:[2,59],115:[2,59],117:[2,59],124:[2,59],125:[2,59],126:[2,59],127:[2,59],129:[2,59],130:[2,59],131:[2,59],133:[2,59],134:[2,59],136:[2,59],137:[2,59],143:[2,59],149:[2,59],154:[2,59],165:[2,59],166:[2,59],167:[2,59],168:[2,59],169:[2,59],170:[2,59],171:[2,59]},{11:[2,60],24:[2,60],32:[2,60],33:[2,60],35:[2,60],52:[2,60],56:[2,60],60:[2,60],62:[2,60],85:[2,60],86:[2,60],87:[2,60],88:[2,60],89:[2,60],115:[2,60],117:[2,60],124:[2,60],125:[2,60],126:[2,60],127:[2,60],129:[2,60],130:[2,60],131:[2,60],133:[2,60],134:[2,60],136:[2,60],137:[2,60],143:[2,60],149:[2,60],154:[2,60],165:[2,60],166:[2,60],167:[2,60],168:[2,60],169:[2,60],170:[2,60],171:[2,60]},{11:[2,61],24:[2,61],32:[2,61],33:[2,61],35:[2,61],52:[2,61],56:[2,61],60:[2,61],62:[2,61],85:[2,61],86:[2,61],87:[2,61],88:[2,61],89:[2,61],115:[2,61],117:[2,61],124:[2,61],125:[2,61],126:[2,61],127:[2,61],129:[2,61],130:[2,61],131:[2,61],133:[2,61],134:[2,61],136:[2,61],137:[2,61],143:[2,61],149:[2,61],154:[2,61],165:[2,61],166:[2,61],167:[2,61],168:[2,61],169:[2,61],170:[2,61],171:[2,61]},{33:[2,170],48:205,69:203,70:204,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{35:[1,206]},{149:[1,207]},{52:[1,208],149:[2,102]},{152:[1,209]},{152:[2,105]},{152:[2,106]},{152:[2,107]},{33:[2,170],48:210,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{11:[2,99],24:[2,99],32:[2,99],33:[2,99],35:[2,99],52:[2,99],56:[2,99],60:[2,99],62:[2,99],85:[2,99],86:[2,99],87:[2,99],88:[2,99],89:[2,99],115:[2,99],117:[2,99],124:[2,99],125:[2,99],126:[2,99],127:[2,99],129:[2,99],130:[2,99],131:[2,99],133:[2,99],134:[2,99],136:[2,99],137:[2,99],143:[2,99],149:[2,99],152:[2,99],154:[2,99],165:[2,99],166:[2,99],167:[2,99],168:[2,99],169:[2,99],170:[2,99],171:[2,99]},{86:[1,211]},{35:[1,212]},{35:[2,41],52:[1,213]},{35:[2,43],52:[2,43]},{11:[2,55],24:[2,55],32:[2,55],33:[2,55],35:[2,55],52:[2,55],56:[2,55],60:[2,55],62:[2,55],85:[2,55],86:[2,55],87:[2,55],88:[2,55],89:[2,55],115:[2,55],117:[2,55],124:[2,55],125:[2,55],126:[2,55],127:[2,55],129:[2,55],130:[2,55],131:[2,55],133:[2,55],134:[2,55],136:[2,55],137:[2,55],143:[2,55],149:[2,55],154:[2,55],165:[2,55],166:[2,55],167:[2,55],168:[2,55],169:[2,55],170:[2,55],171:[2,55]},{11:[2,101],24:[2,101],32:[2,101],33:[2,101],35:[2,101],52:[2,101],56:[2,101],60:[2,101],62:[2,101],85:[2,101],86:[2,101],87:[2,101],88:[2,101],89:[2,101],115:[2,101],117:[2,101],124:[2,101],125:[2,101],126:[2,101],127:[2,101],129:[2,101],130:[2,101],131:[2,101],133:[2,101],134:[2,101],136:[2,101],137:[2,101],143:[2,101],149:[2,101],154:[2,101],165:[2,101],166:[2,101],167:[2,101],168:[2,101],169:[2,101],170:[2,101],171:[2,101]},{8:197,33:[1,200],74:[2,174],81:198,82:[1,199],137:[1,187],138:179,139:[1,180],140:181,141:[1,182],142:[1,183],143:[1,9],144:[1,186],145:185,148:214,150:195,151:196},{33:[2,170],48:215,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{35:[1,216]},{11:[2,58],24:[2,58],32:[2,58],33:[2,58],35:[2,58],52:[2,58],56:[2,58],60:[2,58],62:[2,58],85:[2,58],86:[2,58],87:[2,58],88:[2,58],89:[2,58],115:[2,58],117:[2,58],124:[2,58],125:[2,58],126:[2,58],127:[2,58],129:[2,58],130:[2,58],131:[2,58],133:[2,58],134:[2,58],136:[2,58],137:[2,58],143:[2,58],149:[2,58],154:[2,58],165:[2,58],166:[2,58],167:[2,58],168:[2,58],169:[2,58],170:[2,58],171:[2,58]},{11:[2,62],24:[2,62],32:[2,62],33:[2,62],35:[2,62],52:[2,62],56:[2,62],60:[2,62],62:[2,62],85:[2,62],86:[2,62],87:[2,62],88:[2,62],89:[2,62],115:[2,62],117:[2,62],124:[2,62],125:[2,62],126:[2,62],127:[2,62],129:[2,62],130:[2,62],131:[2,62],133:[2,62],134:[2,62],136:[2,62],137:[2,62],143:[2,62],149:[2,62],154:[2,62],165:[2,62],166:[2,62],167:[2,62],168:[2,62],169:[2,62],170:[2,62],171:[2,62]},{33:[2,170],48:205,69:217,70:204,74:[2,170],82:[2,170],112:84,113:85,114:83,119:[2,170],137:[2,170],139:[2,170],141:[2,170],142:[2,170],143:[2,170],144:[2,170],147:[2,170]},{149:[2,103]},{52:[2,104],149:[2,104]},{152:[2,108]},{35:[2,42]}],
defaultActions: {3:[2,1],22:[2,119],63:[2,145],66:[2,141],70:[2,129],117:[2,16],118:[2,17],122:[2,137],187:[2,175],197:[2,105],198:[2,106],199:[2,107],214:[2,103],216:[2,108],217:[2,42]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:/* ignore comment */
break;
case 2:return 13;
break;
case 3:return 157;
break;
case 4:return 'USES';
break;
case 5:return 77;
break;
case 6:return 78;
break;
case 7:return 7;
break;
case 8:return 'TEST';
break;
case 9:return 'IMAGE';
break;
case 10:return 'DATA';
break;
case 11:return 'NEEDS';
break;
case 12:return 60;
break;
case 13:return 32;
break;
case 14:return 36;
break;
case 15:return 46;
break;
case 16:return 47;
break;
case 17:return 49;
break;
case 18:return 50;
break;
case 19:return 'MAP';
break;
case 20:return 'FOR';
break;
case 21:return 75;
break;
case 22:return 139;
break;
case 23:return 74;
break;
case 24:return 141;
break;
case 25:return 142;
break;
case 26:return 144;
break;
case 27:return 'REDUCE';
break;
case 28:return 115;
break;
case 29:return 'INT';
break;
case 30:return 'LONG';
break;
case 31:return 139;
break;
case 32:return 'DOUBLE';
break;
case 33:return 171;
break;
case 34:return 'ELSEIF';
break;
case 35:return 117; 
break;
case 36:return 56;
break;
case 37:return 58;
break;
case 38:return 24;
break;
case 39:return 27;
break;
case 40:return 164;
break;
case 41:return 40;
break;
case 42:return 42;
break;
case 43:return 'ESCAPE';	
break;
case 44:return 43;
break;
case 45:return 121;
break;
case 46:return 122;
break;
case 47:return 124;
break;
case 48:return 125;
break;
case 49:return 126;
break;
case 50:return 127;
break;
case 51:return 133;
break;
case 52:return 134;
break;
case 53:return 57;
break;
case 54:return 65;
break;
case 55:return 66;
break;
case 56:return 163;
break;
case 57:return 136;
break;
case 58:return 137;
break;
case 59:return 129;
break;
case 60:return 130;
break;
case 61:return 131;
break;
case 62:return 170;
break;
case 63:return 'PIPE';
break;
case 64:return 169;
break;
case 65:return 166;
break;
case 66:return 168;
break;
case 67:return 167;
break;
case 68:return 119;
break;
case 69:return 165;
break;
case 70:return 'QUESTION';
break;
case 71:return 89;
break;
case 72:return 147;
break;
case 73:return 149;
break;
case 74:return 33;
break;
case 75:return 35;
break;
case 76:return 85;
break;
case 77:return 86;
break;
case 78:return 152;
break;
case 79:return 62;
break;
case 80:return 52;
break;
case 81:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 82;
break;
case 82:return 161;
break;
case 83:
					if (typeof yy._iemitstack === 'undefined') {
						return 5;
					}
					
					var tokens = [];
				
				    while (0 < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				    if (tokens.length) return tokens;
				
break;
case 84:/* eat blank lines */
break;
case 85:
					if (typeof yy._iemitstack === 'undefined') {
						yy._iemitstack = [0];
					}
					var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
				    if (indentation > yy._iemitstack[0]) {
				        yy._iemitstack.unshift(indentation);
				        return 9;
				    }
				
				    var tokens = [];
				
				    while (indentation < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				    if (tokens.length) return tokens;
				
break;
case 86:/* ignore whitespace */
break;
case 87:return 143;
break;
case 88:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:theory\b)/,/^(?:extends\b)/,/^(?:uses\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:namespace\b)/,/^(?:test\b)/,/^(?:image\b)/,/^(?:data\b)/,/^(?:needs\b)/,/^(?:fn\b)/,/^(?:ff\b)/,/^(?:->)/,/^(?:<-)/,/^(?:style\b)/,/^(?:where\b)/,/^(?:yield\b)/,/^(?:map\b)/,/^(?:for\b)/,/^(?:null\b)/,/^(?:([0-9]+)+(\.([0-9]+)+|f))/,/^(?:([0-9]+)+)/,/^(?:0x([0-9A-Fa-f]+))/,/^(?:([0-1]+)b\b)/,/^(?:#([0-9A-Fa-f]+))/,/^(?:reduce\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:else\s+if\b)/,/^(?:endif\b)/,/^(?:\[--)/,/^(?:--\])/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:is\b)/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\\)/,/^(?:\.\.\.)/,/^(?:eq|==)/,/^(?:neq|!=)/,/^(?:gt|>)/,/^(?:lt|<)/,/^(?:gte|>=)/,/^(?:lte|<=)/,/^(?:<<)/,/^(?:>>)/,/^(?:::)/,/^(?:=)/,/^(?:@=)/,/^(?:@)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%|mod\b)/,/^(?:\|\||or\b)/,/^(?:\|)/,/^(?:&&|and\b)/,/^(?:&)/,/^(?:\|)/,/^(?:\^|xor\b)/,/^(?:not|!)/,/^(?:\*\*)/,/^(?:\?)/,/^(?:\?!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:".*"|'.*')/,/^(?:\.)/,/^(?:[\n\r\s]+$)/,/^(?:[\n\r]+\s+(?![^\n\r]))/,/^(?:[\n\r]\s+)/,/^(?:\s+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = theory;
exports.Parser = theory.Parser;
exports.parse = function () { return theory.parse.apply(theory, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}