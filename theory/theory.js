/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var theory = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"file_repetition0":4,"ENDOFFILE":5,"namespace":6,"PREFIX":7,"id":8,"INDENT":9,"namespace_repetition0":10,"DEDENT":11,"theory":12,"THEORY":13,"theory_option0":14,"theory_repetition0":15,"def":16,"sdef":17,"fdef":18,"fragfunc":19,"treefrag":20,"data":21,"DATA":22,"paramlist":23,"dtypelist":24,"EOL":25,"paramdef":26,"PIPE":27,"tfnode":28,"treefrag_option0":29,"XPATHSTART":30,"leafid":31,"tfnode_option0":32,"XPATHEND":33,"leafid_repetition_plus0":34,"tf_islist":35,"tf_islist_repetition0":36,"FRAGFUNC":37,"LPAREN":38,"fragfunc_option0":39,"RPAREN":40,"IMPLICATION":41,"fftree":42,"ffnode":43,"fftree_option0":44,"LFFNODE":45,"ffid":46,"RFFNODE":47,"ELLIPSIS":48,"ffimplist":49,"fragexpr":50,"REVIMPLICATION":51,"STYLE":52,"expr":53,"WHERE":54,"YIELD":55,"ID":56,"tuplevarlist":57,"COMMA":58,"typedef":59,"LBRACK":60,"RBRACK":61,"SETSTART":62,"TYPIFY":63,"SETEND":64,"assignment_list":65,"FUNCTION":66,"expression":67,"lside":68,"assignment":69,"ASSIGN":70,"NEWLINE":71,"CASEASSIGN":72,"caselist":73,"casedef":74,"lit":75,"NATLITERAL":76,"NULL":77,"boollit":78,"TRUE":79,"FALSE":80,"elist":81,"atom":82,"constant":83,"STRING_LIT":84,"postfix_expression":85,"LBRACKET":86,"RBRACKET":87,"INC_OP":88,"DEC_OP":89,"EXCUSEME":90,"unary_expression":91,"unary_op":92,"power_expression":93,"POWER":94,"muldivmod":95,"TIMES":96,"DIVIDE":97,"MOD":98,"multiplicative_expression":99,"MULDIVMOD":100,"additive_expression":101,"ADDSUB":102,"shift":103,"SHIFTL":104,"SHIFTR":105,"shift_expression":106,"compare":107,"GT":108,"LT":109,"GTE":110,"LTE":111,"relational_expression":112,"equiv":113,"EQ":114,"NEQ":115,"equivalence_expression":116,"and_expression":117,"B_AND":118,"xor_expression":119,"XOR":120,"ior_expression":121,"B_OR":122,"logical_and_expression":123,"AND":124,"logical_or_expression":125,"OR":126,"conditional_expression":127,"IF":128,"ELSE":129,"ENDIF":130,"NOT":131,"number":132,"dict":133,"array":134,"integer":135,"hexint":136,"BINNATLITERAL":137,"float":138,"color":139,"HEXCOLOR":140,"MINUS":141,"HEXNATLITERAL":142,"DOT":143,"f":144,"LBRACE":145,"colondeflist":146,"RBRACE":147,"string":148,"COLON":149,"file_repetition0_group0":150,"namespace_repetition0_group0":151,"EXTENDS":152,"theory_repetition0_group0":153,"treefrag_option0_repetition_plus0":154,"leafid_repetition_plus0_group0":155,"tf_islist_repetition0_option0":156,"AT":157,"IS":158,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",7:"PREFIX",9:"INDENT",11:"DEDENT",13:"THEORY",22:"DATA",25:"EOL",27:"PIPE",30:"XPATHSTART",33:"XPATHEND",37:"FRAGFUNC",38:"LPAREN",40:"RPAREN",41:"IMPLICATION",45:"LFFNODE",47:"RFFNODE",48:"ELLIPSIS",51:"REVIMPLICATION",52:"STYLE",53:"expr",54:"WHERE",55:"YIELD",56:"ID",58:"COMMA",60:"LBRACK",61:"RBRACK",62:"SETSTART",63:"TYPIFY",64:"SETEND",66:"FUNCTION",70:"ASSIGN",71:"NEWLINE",72:"CASEASSIGN",76:"NATLITERAL",77:"NULL",79:"TRUE",80:"FALSE",84:"STRING_LIT",86:"LBRACKET",87:"RBRACKET",88:"INC_OP",89:"DEC_OP",90:"EXCUSEME",94:"POWER",96:"TIMES",97:"DIVIDE",98:"MOD",100:"MULDIVMOD",102:"ADDSUB",104:"SHIFTL",105:"SHIFTR",108:"GT",109:"LT",110:"GTE",111:"LTE",114:"EQ",115:"NEQ",118:"B_AND",120:"XOR",122:"B_OR",124:"AND",126:"OR",128:"IF",129:"ELSE",130:"ENDIF",131:"NOT",137:"BINNATLITERAL",140:"HEXCOLOR",141:"MINUS",142:"HEXNATLITERAL",143:"DOT",144:"f",145:"LBRACE",147:"RBRACE",148:"string",149:"COLON",152:"EXTENDS",157:"AT",158:"IS"},
productions_: [0,[3,2],[6,5],[12,6],[16,1],[16,1],[16,1],[16,1],[21,4],[24,4],[24,1],[20,2],[28,4],[31,1],[35,1],[19,7],[42,2],[43,3],[46,1],[46,1],[49,4],[49,2],[49,2],[50,6],[50,4],[50,4],[50,2],[50,2],[8,1],[57,3],[57,1],[59,1],[59,3],[17,6],[17,4],[18,8],[68,1],[68,3],[69,4],[69,4],[65,1],[65,2],[73,2],[73,0],[74,4],[23,3],[23,1],[26,1],[75,1],[75,1],[78,1],[78,1],[81,3],[81,1],[81,0],[82,1],[82,1],[82,1],[82,3],[85,1],[85,4],[85,3],[85,4],[85,2],[85,2],[85,2],[91,2],[93,1],[93,3],[95,1],[95,1],[95,1],[99,1],[99,3],[101,1],[101,3],[103,1],[103,1],[106,1],[106,3],[107,1],[107,1],[107,1],[107,1],[112,1],[112,3],[113,1],[113,1],[116,1],[116,3],[117,1],[117,3],[119,1],[119,3],[121,1],[121,3],[123,1],[123,3],[125,1],[125,3],[127,1],[127,6],[67,1],[92,1],[83,1],[83,1],[83,1],[132,1],[132,1],[132,1],[132,1],[132,1],[139,1],[135,2],[135,1],[136,2],[136,1],[138,3],[138,4],[138,2],[134,3],[133,3],[146,5],[146,3],[146,0],[150,1],[150,1],[4,0],[4,2],[151,1],[151,1],[151,1],[10,0],[10,2],[14,0],[14,2],[153,1],[153,1],[15,0],[15,2],[154,1],[154,2],[29,0],[29,3],[32,0],[32,2],[155,1],[155,1],[34,1],[34,2],[156,0],[156,2],[36,0],[36,5],[39,0],[39,1],[44,0],[44,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; 
break;
case 3: this.$ = new yy.Theory($$[$0-4], theorybody, $$[$0-2]); 
break;
case 9: this.$ = $$[$0-1]; this.$.unshift($$[$0-3]); 
break;
case 10: this.$ = [$$[$0]]; 
break;
case 29: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 30: this.$ = [ $$[$0] ]; 
break;
case 31: this.$ = new yy.Type($$[$0]); 
break;
case 32: this.$ = new yy.Type("Array", $$[$0-2]); 
break;
case 33: this.$ = new yy.SetDef($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 34: this.$ = new yy.SetDef($$[$0-2], $$[$0-2], $$[$0]); 
break;
case 35: this.$ = new yy.FnDef($$[$0-6], $$[$0-4], null, $$[$0-1]); 
break;
case 36: this.$ = [ $$[$0] ]; 
break;
case 37: this.$ = $$[$0-1]; 
break;
case 38: this.$ = new yy.Assignment($$[$0-3], $$[$0-1]); 
break;
case 39: this.$ = new yy.CaseAssignment($$[$0-3], $$[$0-1]); 
break;
case 40: this.$ = [ $$[$0] ]; 
break;
case 41: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 42: this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 43: this.$ = []; 
break;
case 44: this.$ = new yy.CaseDef($$[$0-3], $$[$0-1]); 
break;
case 45: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 46: this.$ = [ $$[$0] ]; 
break;
case 47: this.$ = new yy.ParamDef(typedef, id); 
break;
case 48: this.$ = parseInt($$[$0]); 
break;
case 49: this.$ = null; 
break;
case 50: this.$ = true; 
break;
case 51: this.$ = false; 
break;
case 52: this.$ = $$[$0]; this.$.unshift(e); 
break;
case 53: this.$ = [ e ]; 
break;
case 127:this.$ = [];
break;
case 128:$$[$0-1].push($$[$0]);
break;
case 132:this.$ = [];
break;
case 133:$$[$0-1].push($$[$0]);
break;
case 138:this.$ = [];
break;
case 139:$$[$0-1].push($$[$0]);
break;
case 140:this.$ = [$$[$0]];
break;
case 141:$$[$0-1].push($$[$0]);
break;
case 148:this.$ = [$$[$0]];
break;
case 149:$$[$0-1].push($$[$0]);
break;
case 152:this.$ = [];
break;
case 153:$$[$0-4].push($$[$0-3]);
break;
}
},
table: [{3:1,4:2,5:[2,127],7:[2,127],71:[2,127]},{1:[3]},{5:[1,3],6:5,7:[1,7],71:[1,6],150:4},{1:[2,1]},{5:[2,128],7:[2,128],71:[2,128]},{5:[2,125],7:[2,125],71:[2,125]},{5:[2,126],7:[2,126],71:[2,126]},{8:8,56:[1,9]},{9:[1,10]},{9:[2,28],25:[2,28],27:[2,28],33:[2,28],38:[2,28],40:[2,28],41:[2,28],47:[2,28],56:[2,28],58:[2,28],63:[2,28],64:[2,28],70:[2,28],71:[2,28],72:[2,28],86:[2,28],87:[2,28],88:[2,28],89:[2,28],90:[2,28],94:[2,28],100:[2,28],102:[2,28],104:[2,28],105:[2,28],108:[2,28],109:[2,28],110:[2,28],111:[2,28],118:[2,28],120:[2,28],122:[2,28],124:[2,28],126:[2,28],128:[2,28],129:[2,28],130:[2,28],131:[2,28],143:[2,28],147:[2,28],152:[2,28]},{10:11,11:[2,132],13:[2,132],22:[2,132],71:[2,132]},{11:[1,12],12:14,13:[1,17],21:15,22:[1,18],71:[1,16],151:13},{5:[2,2],7:[2,2],71:[2,2]},{11:[2,133],13:[2,133],22:[2,133],71:[2,133]},{11:[2,129],13:[2,129],22:[2,129],71:[2,129]},{11:[2,130],13:[2,130],22:[2,130],71:[2,130]},{11:[2,131],13:[2,131],22:[2,131],71:[2,131]},{8:19,56:[1,9]},{23:20,26:21,67:22,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{9:[2,134],14:37,152:[1,38]},{24:39,26:40,67:22,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{40:[2,46],58:[1,41],131:[2,46]},{25:[2,47],27:[2,47],40:[2,47],58:[2,47],128:[1,42],131:[2,47]},{25:[2,102],27:[2,102],40:[2,102],58:[2,102],71:[2,102],87:[2,102],128:[2,102],130:[2,102],131:[2,102],147:[2,102]},{25:[2,100],27:[2,100],40:[2,100],58:[2,100],71:[2,100],87:[2,100],126:[1,43],128:[2,100],130:[2,100],131:[2,100],147:[2,100]},{25:[2,98],27:[2,98],40:[2,98],58:[2,98],71:[2,98],87:[2,98],124:[1,44],126:[2,98],128:[2,98],129:[2,98],130:[2,98],131:[2,98],147:[2,98]},{25:[2,96],27:[2,96],40:[2,96],58:[2,96],71:[2,96],87:[2,96],122:[1,45],124:[2,96],126:[2,96],128:[2,96],129:[2,96],130:[2,96],131:[2,96],147:[2,96]},{25:[2,94],27:[2,94],40:[2,94],58:[2,94],71:[2,94],87:[2,94],120:[1,46],122:[2,94],124:[2,94],126:[2,94],128:[2,94],129:[2,94],130:[2,94],131:[2,94],147:[2,94]},{25:[2,92],27:[2,92],40:[2,92],58:[2,92],71:[2,92],87:[2,92],118:[1,47],120:[2,92],122:[2,92],124:[2,92],126:[2,92],128:[2,92],129:[2,92],130:[2,92],131:[2,92],147:[2,92]},{25:[2,90],27:[2,90],40:[2,90],58:[2,90],71:[2,90],87:[2,90],107:48,108:[1,49],109:[1,50],110:[1,51],111:[1,52],118:[2,90],120:[2,90],122:[2,90],124:[2,90],126:[2,90],128:[2,90],129:[2,90],130:[2,90],131:[2,90],147:[2,90]},{25:[2,84],27:[2,84],40:[2,84],58:[2,84],71:[2,84],87:[2,84],103:53,104:[1,54],105:[1,55],108:[2,84],109:[2,84],110:[2,84],111:[2,84],118:[2,84],120:[2,84],122:[2,84],124:[2,84],126:[2,84],128:[2,84],129:[2,84],130:[2,84],131:[2,84],147:[2,84]},{25:[2,78],27:[2,78],40:[2,78],58:[2,78],71:[2,78],87:[2,78],102:[1,56],104:[2,78],105:[2,78],108:[2,78],109:[2,78],110:[2,78],111:[2,78],118:[2,78],120:[2,78],122:[2,78],124:[2,78],126:[2,78],128:[2,78],129:[2,78],130:[2,78],131:[2,78],147:[2,78]},{25:[2,74],27:[2,74],40:[2,74],58:[2,74],71:[2,74],87:[2,74],100:[1,57],102:[2,74],104:[2,74],105:[2,74],108:[2,74],109:[2,74],110:[2,74],111:[2,74],118:[2,74],120:[2,74],122:[2,74],124:[2,74],126:[2,74],128:[2,74],129:[2,74],130:[2,74],131:[2,74],147:[2,74]},{25:[2,72],27:[2,72],40:[2,72],58:[2,72],71:[2,72],87:[2,72],94:[1,58],100:[2,72],102:[2,72],104:[2,72],105:[2,72],108:[2,72],109:[2,72],110:[2,72],111:[2,72],118:[2,72],120:[2,72],122:[2,72],124:[2,72],126:[2,72],128:[2,72],129:[2,72],130:[2,72],131:[2,72],147:[2,72]},{25:[2,67],27:[2,67],40:[2,67],58:[2,67],71:[2,67],87:[2,67],94:[2,67],100:[2,67],102:[2,67],104:[2,67],105:[2,67],108:[2,67],109:[2,67],110:[2,67],111:[2,67],118:[2,67],120:[2,67],122:[2,67],124:[2,67],126:[2,67],128:[2,67],129:[2,67],130:[2,67],131:[2,67],147:[2,67]},{8:61,38:[1,64],56:[1,9],76:[1,76],82:60,83:62,84:[1,63],85:59,86:[1,74],132:65,133:66,134:67,135:68,136:69,137:[1,70],138:71,139:72,140:[1,78],141:[1,75],142:[1,77],145:[1,73]},{38:[2,103],56:[2,103],76:[2,103],84:[2,103],86:[2,103],137:[2,103],140:[2,103],141:[2,103],142:[2,103],145:[2,103]},{9:[1,79]},{8:80,56:[1,9]},{25:[1,81]},{25:[2,10],27:[1,82]},{23:83,26:21,67:22,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:84,131:[1,36]},{91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:85,131:[1,36]},{91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:86,131:[1,36]},{91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:87,131:[1,36]},{91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:88,131:[1,36]},{91:34,92:35,93:33,99:32,101:31,106:30,112:89,131:[1,36]},{91:34,92:35,93:33,99:32,101:31,106:90,131:[1,36]},{131:[2,80]},{131:[2,81]},{131:[2,82]},{131:[2,83]},{91:34,92:35,93:33,99:32,101:91,131:[1,36]},{131:[2,76]},{131:[2,77]},{91:34,92:35,93:33,99:92,131:[1,36]},{91:34,92:35,93:93,131:[1,36]},{91:94,92:35,131:[1,36]},{25:[2,66],27:[2,66],38:[1,96],40:[2,66],58:[2,66],71:[2,66],86:[1,95],87:[2,66],88:[1,97],89:[1,98],90:[1,99],94:[2,66],100:[2,66],102:[2,66],104:[2,66],105:[2,66],108:[2,66],109:[2,66],110:[2,66],111:[2,66],118:[2,66],120:[2,66],122:[2,66],124:[2,66],126:[2,66],128:[2,66],129:[2,66],130:[2,66],131:[2,66],147:[2,66]},{25:[2,59],27:[2,59],38:[2,59],40:[2,59],58:[2,59],71:[2,59],86:[2,59],87:[2,59],88:[2,59],89:[2,59],90:[2,59],94:[2,59],100:[2,59],102:[2,59],104:[2,59],105:[2,59],108:[2,59],109:[2,59],110:[2,59],111:[2,59],118:[2,59],120:[2,59],122:[2,59],124:[2,59],126:[2,59],128:[2,59],129:[2,59],130:[2,59],131:[2,59],147:[2,59]},{25:[2,55],27:[2,55],38:[2,55],40:[2,55],58:[2,55],71:[2,55],86:[2,55],87:[2,55],88:[2,55],89:[2,55],90:[2,55],94:[2,55],100:[2,55],102:[2,55],104:[2,55],105:[2,55],108:[2,55],109:[2,55],110:[2,55],111:[2,55],118:[2,55],120:[2,55],122:[2,55],124:[2,55],126:[2,55],128:[2,55],129:[2,55],130:[2,55],131:[2,55],147:[2,55]},{25:[2,56],27:[2,56],38:[2,56],40:[2,56],58:[2,56],71:[2,56],86:[2,56],87:[2,56],88:[2,56],89:[2,56],90:[2,56],94:[2,56],100:[2,56],102:[2,56],104:[2,56],105:[2,56],108:[2,56],109:[2,56],110:[2,56],111:[2,56],118:[2,56],120:[2,56],122:[2,56],124:[2,56],126:[2,56],128:[2,56],129:[2,56],130:[2,56],131:[2,56],147:[2,56]},{25:[2,57],27:[2,57],38:[2,57],40:[2,57],58:[2,57],71:[2,57],86:[2,57],87:[2,57],88:[2,57],89:[2,57],90:[2,57],94:[2,57],100:[2,57],102:[2,57],104:[2,57],105:[2,57],108:[2,57],109:[2,57],110:[2,57],111:[2,57],118:[2,57],120:[2,57],122:[2,57],124:[2,57],126:[2,57],128:[2,57],129:[2,57],130:[2,57],131:[2,57],147:[2,57]},{67:100,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{25:[2,104],27:[2,104],38:[2,104],40:[2,104],58:[2,104],71:[2,104],86:[2,104],87:[2,104],88:[2,104],89:[2,104],90:[2,104],94:[2,104],100:[2,104],102:[2,104],104:[2,104],105:[2,104],108:[2,104],109:[2,104],110:[2,104],111:[2,104],118:[2,104],120:[2,104],122:[2,104],124:[2,104],126:[2,104],128:[2,104],129:[2,104],130:[2,104],131:[2,104],147:[2,104]},{25:[2,105],27:[2,105],38:[2,105],40:[2,105],58:[2,105],71:[2,105],86:[2,105],87:[2,105],88:[2,105],89:[2,105],90:[2,105],94:[2,105],100:[2,105],102:[2,105],104:[2,105],105:[2,105],108:[2,105],109:[2,105],110:[2,105],111:[2,105],118:[2,105],120:[2,105],122:[2,105],124:[2,105],126:[2,105],128:[2,105],129:[2,105],130:[2,105],131:[2,105],147:[2,105]},{25:[2,106],27:[2,106],38:[2,106],40:[2,106],58:[2,106],71:[2,106],86:[2,106],87:[2,106],88:[2,106],89:[2,106],90:[2,106],94:[2,106],100:[2,106],102:[2,106],104:[2,106],105:[2,106],108:[2,106],109:[2,106],110:[2,106],111:[2,106],118:[2,106],120:[2,106],122:[2,106],124:[2,106],126:[2,106],128:[2,106],129:[2,106],130:[2,106],131:[2,106],147:[2,106]},{25:[2,107],27:[2,107],38:[2,107],40:[2,107],58:[2,107],71:[2,107],86:[2,107],87:[2,107],88:[2,107],89:[2,107],90:[2,107],94:[2,107],100:[2,107],102:[2,107],104:[2,107],105:[2,107],108:[2,107],109:[2,107],110:[2,107],111:[2,107],118:[2,107],120:[2,107],122:[2,107],124:[2,107],126:[2,107],128:[2,107],129:[2,107],130:[2,107],131:[2,107],143:[1,101],144:[1,102],147:[2,107]},{25:[2,108],27:[2,108],38:[2,108],40:[2,108],58:[2,108],71:[2,108],86:[2,108],87:[2,108],88:[2,108],89:[2,108],90:[2,108],94:[2,108],100:[2,108],102:[2,108],104:[2,108],105:[2,108],108:[2,108],109:[2,108],110:[2,108],111:[2,108],118:[2,108],120:[2,108],122:[2,108],124:[2,108],126:[2,108],128:[2,108],129:[2,108],130:[2,108],131:[2,108],147:[2,108]},{25:[2,109],27:[2,109],38:[2,109],40:[2,109],58:[2,109],71:[2,109],86:[2,109],87:[2,109],88:[2,109],89:[2,109],90:[2,109],94:[2,109],100:[2,109],102:[2,109],104:[2,109],105:[2,109],108:[2,109],109:[2,109],110:[2,109],111:[2,109],118:[2,109],120:[2,109],122:[2,109],124:[2,109],126:[2,109],128:[2,109],129:[2,109],130:[2,109],131:[2,109],147:[2,109]},{25:[2,110],27:[2,110],38:[2,110],40:[2,110],58:[2,110],71:[2,110],86:[2,110],87:[2,110],88:[2,110],89:[2,110],90:[2,110],94:[2,110],100:[2,110],102:[2,110],104:[2,110],105:[2,110],108:[2,110],109:[2,110],110:[2,110],111:[2,110],118:[2,110],120:[2,110],122:[2,110],124:[2,110],126:[2,110],128:[2,110],129:[2,110],130:[2,110],131:[2,110],147:[2,110]},{25:[2,111],27:[2,111],38:[2,111],40:[2,111],58:[2,111],71:[2,111],86:[2,111],87:[2,111],88:[2,111],89:[2,111],90:[2,111],94:[2,111],100:[2,111],102:[2,111],104:[2,111],105:[2,111],108:[2,111],109:[2,111],110:[2,111],111:[2,111],118:[2,111],120:[2,111],122:[2,111],124:[2,111],126:[2,111],128:[2,111],129:[2,111],130:[2,111],131:[2,111],147:[2,111]},{146:103,147:[2,124],148:[1,104]},{67:106,81:105,87:[2,54],91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{76:[1,107],142:[1,108]},{25:[2,114],27:[2,114],38:[2,114],40:[2,114],58:[2,114],71:[2,114],86:[2,114],87:[2,114],88:[2,114],89:[2,114],90:[2,114],94:[2,114],100:[2,114],102:[2,114],104:[2,114],105:[2,114],108:[2,114],109:[2,114],110:[2,114],111:[2,114],118:[2,114],120:[2,114],122:[2,114],124:[2,114],126:[2,114],128:[2,114],129:[2,114],130:[2,114],131:[2,114],143:[2,114],144:[2,114],147:[2,114]},{25:[2,116],27:[2,116],38:[2,116],40:[2,116],58:[2,116],71:[2,116],86:[2,116],87:[2,116],88:[2,116],89:[2,116],90:[2,116],94:[2,116],100:[2,116],102:[2,116],104:[2,116],105:[2,116],108:[2,116],109:[2,116],110:[2,116],111:[2,116],118:[2,116],120:[2,116],122:[2,116],124:[2,116],126:[2,116],128:[2,116],129:[2,116],130:[2,116],131:[2,116],147:[2,116]},{25:[2,112],27:[2,112],38:[2,112],40:[2,112],58:[2,112],71:[2,112],86:[2,112],87:[2,112],88:[2,112],89:[2,112],90:[2,112],94:[2,112],100:[2,112],102:[2,112],104:[2,112],105:[2,112],108:[2,112],109:[2,112],110:[2,112],111:[2,112],118:[2,112],120:[2,112],122:[2,112],124:[2,112],126:[2,112],128:[2,112],129:[2,112],130:[2,112],131:[2,112],147:[2,112]},{11:[2,138],15:109,30:[2,138],37:[2,138],62:[2,138],66:[2,138],71:[2,138]},{9:[2,135]},{11:[2,8],13:[2,8],22:[2,8],71:[2,8]},{24:110,26:40,67:22,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{40:[2,45],131:[2,45]},{126:[1,43],129:[1,111]},{25:[2,99],27:[2,99],40:[2,99],58:[2,99],71:[2,99],87:[2,99],124:[1,44],126:[2,99],128:[2,99],129:[2,99],130:[2,99],131:[2,99],147:[2,99]},{25:[2,97],27:[2,97],40:[2,97],58:[2,97],71:[2,97],87:[2,97],122:[1,45],124:[2,97],126:[2,97],128:[2,97],129:[2,97],130:[2,97],131:[2,97],147:[2,97]},{25:[2,95],27:[2,95],40:[2,95],58:[2,95],71:[2,95],87:[2,95],120:[1,46],122:[2,95],124:[2,95],126:[2,95],128:[2,95],129:[2,95],130:[2,95],131:[2,95],147:[2,95]},{25:[2,93],27:[2,93],40:[2,93],58:[2,93],71:[2,93],87:[2,93],118:[1,47],120:[2,93],122:[2,93],124:[2,93],126:[2,93],128:[2,93],129:[2,93],130:[2,93],131:[2,93],147:[2,93]},{25:[2,91],27:[2,91],40:[2,91],58:[2,91],71:[2,91],87:[2,91],107:48,108:[1,49],109:[1,50],110:[1,51],111:[1,52],118:[2,91],120:[2,91],122:[2,91],124:[2,91],126:[2,91],128:[2,91],129:[2,91],130:[2,91],131:[2,91],147:[2,91]},{25:[2,85],27:[2,85],40:[2,85],58:[2,85],71:[2,85],87:[2,85],103:53,104:[1,54],105:[1,55],108:[2,85],109:[2,85],110:[2,85],111:[2,85],118:[2,85],120:[2,85],122:[2,85],124:[2,85],126:[2,85],128:[2,85],129:[2,85],130:[2,85],131:[2,85],147:[2,85]},{25:[2,79],27:[2,79],40:[2,79],58:[2,79],71:[2,79],87:[2,79],102:[1,56],104:[2,79],105:[2,79],108:[2,79],109:[2,79],110:[2,79],111:[2,79],118:[2,79],120:[2,79],122:[2,79],124:[2,79],126:[2,79],128:[2,79],129:[2,79],130:[2,79],131:[2,79],147:[2,79]},{25:[2,75],27:[2,75],40:[2,75],58:[2,75],71:[2,75],87:[2,75],100:[1,57],102:[2,75],104:[2,75],105:[2,75],108:[2,75],109:[2,75],110:[2,75],111:[2,75],118:[2,75],120:[2,75],122:[2,75],124:[2,75],126:[2,75],128:[2,75],129:[2,75],130:[2,75],131:[2,75],147:[2,75]},{25:[2,73],27:[2,73],40:[2,73],58:[2,73],71:[2,73],87:[2,73],94:[1,58],100:[2,73],102:[2,73],104:[2,73],105:[2,73],108:[2,73],109:[2,73],110:[2,73],111:[2,73],118:[2,73],120:[2,73],122:[2,73],124:[2,73],126:[2,73],128:[2,73],129:[2,73],130:[2,73],131:[2,73],147:[2,73]},{25:[2,68],27:[2,68],40:[2,68],58:[2,68],71:[2,68],87:[2,68],94:[2,68],100:[2,68],102:[2,68],104:[2,68],105:[2,68],108:[2,68],109:[2,68],110:[2,68],111:[2,68],118:[2,68],120:[2,68],122:[2,68],124:[2,68],126:[2,68],128:[2,68],129:[2,68],130:[2,68],131:[2,68],147:[2,68]},{67:112,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{23:114,26:21,40:[1,113],67:22,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{25:[2,63],27:[2,63],38:[2,63],40:[2,63],58:[2,63],71:[2,63],86:[2,63],87:[2,63],88:[2,63],89:[2,63],90:[2,63],94:[2,63],100:[2,63],102:[2,63],104:[2,63],105:[2,63],108:[2,63],109:[2,63],110:[2,63],111:[2,63],118:[2,63],120:[2,63],122:[2,63],124:[2,63],126:[2,63],128:[2,63],129:[2,63],130:[2,63],131:[2,63],147:[2,63]},{25:[2,64],27:[2,64],38:[2,64],40:[2,64],58:[2,64],71:[2,64],86:[2,64],87:[2,64],88:[2,64],89:[2,64],90:[2,64],94:[2,64],100:[2,64],102:[2,64],104:[2,64],105:[2,64],108:[2,64],109:[2,64],110:[2,64],111:[2,64],118:[2,64],120:[2,64],122:[2,64],124:[2,64],126:[2,64],128:[2,64],129:[2,64],130:[2,64],131:[2,64],147:[2,64]},{25:[2,65],27:[2,65],38:[2,65],40:[2,65],58:[2,65],71:[2,65],86:[2,65],87:[2,65],88:[2,65],89:[2,65],90:[2,65],94:[2,65],100:[2,65],102:[2,65],104:[2,65],105:[2,65],108:[2,65],109:[2,65],110:[2,65],111:[2,65],118:[2,65],120:[2,65],122:[2,65],124:[2,65],126:[2,65],128:[2,65],129:[2,65],130:[2,65],131:[2,65],147:[2,65]},{40:[1,115],128:[1,42]},{76:[1,116]},{25:[2,119],27:[2,119],38:[2,119],40:[2,119],58:[2,119],71:[2,119],86:[2,119],87:[2,119],88:[2,119],89:[2,119],90:[2,119],94:[2,119],100:[2,119],102:[2,119],104:[2,119],105:[2,119],108:[2,119],109:[2,119],110:[2,119],111:[2,119],118:[2,119],120:[2,119],122:[2,119],124:[2,119],126:[2,119],128:[2,119],129:[2,119],130:[2,119],131:[2,119],147:[2,119]},{147:[1,117]},{149:[1,118]},{87:[1,119]},{58:[1,120],87:[2,53],128:[1,42]},{25:[2,113],27:[2,113],38:[2,113],40:[2,113],58:[2,113],71:[2,113],86:[2,113],87:[2,113],88:[2,113],89:[2,113],90:[2,113],94:[2,113],100:[2,113],102:[2,113],104:[2,113],105:[2,113],108:[2,113],109:[2,113],110:[2,113],111:[2,113],118:[2,113],120:[2,113],122:[2,113],124:[2,113],126:[2,113],128:[2,113],129:[2,113],130:[2,113],131:[2,113],143:[2,113],144:[2,113],147:[2,113]},{25:[2,115],27:[2,115],38:[2,115],40:[2,115],58:[2,115],71:[2,115],86:[2,115],87:[2,115],88:[2,115],89:[2,115],90:[2,115],94:[2,115],100:[2,115],102:[2,115],104:[2,115],105:[2,115],108:[2,115],109:[2,115],110:[2,115],111:[2,115],118:[2,115],120:[2,115],122:[2,115],124:[2,115],126:[2,115],128:[2,115],129:[2,115],130:[2,115],131:[2,115],147:[2,115]},{11:[1,121],16:123,17:125,18:126,19:127,20:128,28:132,30:[1,133],37:[1,131],62:[1,129],66:[1,130],71:[1,124],153:122},{25:[1,134]},{67:135,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{87:[1,136],128:[1,42]},{25:[2,61],27:[2,61],38:[2,61],40:[2,61],58:[2,61],71:[2,61],86:[2,61],87:[2,61],88:[2,61],89:[2,61],90:[2,61],94:[2,61],100:[2,61],102:[2,61],104:[2,61],105:[2,61],108:[2,61],109:[2,61],110:[2,61],111:[2,61],118:[2,61],120:[2,61],122:[2,61],124:[2,61],126:[2,61],128:[2,61],129:[2,61],130:[2,61],131:[2,61],147:[2,61]},{40:[1,137]},{25:[2,58],27:[2,58],38:[2,58],40:[2,58],58:[2,58],71:[2,58],86:[2,58],87:[2,58],88:[2,58],89:[2,58],90:[2,58],94:[2,58],100:[2,58],102:[2,58],104:[2,58],105:[2,58],108:[2,58],109:[2,58],110:[2,58],111:[2,58],118:[2,58],120:[2,58],122:[2,58],124:[2,58],126:[2,58],128:[2,58],129:[2,58],130:[2,58],131:[2,58],147:[2,58]},{25:[2,117],27:[2,117],38:[2,117],40:[2,117],58:[2,117],71:[2,117],86:[2,117],87:[2,117],88:[2,117],89:[2,117],90:[2,117],94:[2,117],100:[2,117],102:[2,117],104:[2,117],105:[2,117],108:[2,117],109:[2,117],110:[2,117],111:[2,117],118:[2,117],120:[2,117],122:[2,117],124:[2,117],126:[2,117],128:[2,117],129:[2,117],130:[2,117],131:[2,117],144:[1,138],147:[2,117]},{25:[2,121],27:[2,121],38:[2,121],40:[2,121],58:[2,121],71:[2,121],86:[2,121],87:[2,121],88:[2,121],89:[2,121],90:[2,121],94:[2,121],100:[2,121],102:[2,121],104:[2,121],105:[2,121],108:[2,121],109:[2,121],110:[2,121],111:[2,121],118:[2,121],120:[2,121],122:[2,121],124:[2,121],126:[2,121],128:[2,121],129:[2,121],130:[2,121],131:[2,121],147:[2,121]},{67:139,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{25:[2,120],27:[2,120],38:[2,120],40:[2,120],58:[2,120],71:[2,120],86:[2,120],87:[2,120],88:[2,120],89:[2,120],90:[2,120],94:[2,120],100:[2,120],102:[2,120],104:[2,120],105:[2,120],108:[2,120],109:[2,120],110:[2,120],111:[2,120],118:[2,120],120:[2,120],122:[2,120],124:[2,120],126:[2,120],128:[2,120],129:[2,120],130:[2,120],131:[2,120],147:[2,120]},{67:106,81:140,87:[2,54],91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{11:[2,3],13:[2,3],22:[2,3],71:[2,3]},{11:[2,139],30:[2,139],37:[2,139],62:[2,139],66:[2,139],71:[2,139]},{11:[2,136],30:[2,136],37:[2,136],62:[2,136],66:[2,136],71:[2,136]},{11:[2,137],30:[2,137],37:[2,137],62:[2,137],66:[2,137],71:[2,137]},{11:[2,4],30:[2,4],37:[2,4],62:[2,4],66:[2,4],71:[2,4]},{11:[2,5],30:[2,5],37:[2,5],62:[2,5],66:[2,5],71:[2,5]},{11:[2,6],30:[2,6],37:[2,6],62:[2,6],66:[2,6],71:[2,6]},{11:[2,7],30:[2,7],37:[2,7],62:[2,7],66:[2,7],71:[2,7]},{8:141,56:[1,9]},{8:142,56:[1,9]},{8:143,56:[1,9]},{9:[1,145],11:[2,142],29:144,30:[2,142],37:[2,142],62:[2,142],66:[2,142],71:[2,142]},{8:149,31:146,34:147,56:[1,9],143:[1,150],155:148},{25:[2,9]},{128:[1,42],130:[1,151]},{25:[2,60],27:[2,60],38:[2,60],40:[2,60],58:[2,60],71:[2,60],86:[2,60],87:[2,60],88:[2,60],89:[2,60],90:[2,60],94:[2,60],100:[2,60],102:[2,60],104:[2,60],105:[2,60],108:[2,60],109:[2,60],110:[2,60],111:[2,60],118:[2,60],120:[2,60],122:[2,60],124:[2,60],126:[2,60],128:[2,60],129:[2,60],130:[2,60],131:[2,60],147:[2,60]},{25:[2,62],27:[2,62],38:[2,62],40:[2,62],58:[2,62],71:[2,62],86:[2,62],87:[2,62],88:[2,62],89:[2,62],90:[2,62],94:[2,62],100:[2,62],102:[2,62],104:[2,62],105:[2,62],108:[2,62],109:[2,62],110:[2,62],111:[2,62],118:[2,62],120:[2,62],122:[2,62],124:[2,62],126:[2,62],128:[2,62],129:[2,62],130:[2,62],131:[2,62],147:[2,62]},{25:[2,118],27:[2,118],38:[2,118],40:[2,118],58:[2,118],71:[2,118],86:[2,118],87:[2,118],88:[2,118],89:[2,118],90:[2,118],94:[2,118],100:[2,118],102:[2,118],104:[2,118],105:[2,118],108:[2,118],109:[2,118],110:[2,118],111:[2,118],118:[2,118],120:[2,118],122:[2,118],124:[2,118],126:[2,118],128:[2,118],129:[2,118],130:[2,118],131:[2,118],147:[2,118]},{58:[1,152],128:[1,42],147:[2,123]},{87:[2,52]},{63:[1,153],64:[1,154]},{38:[1,155]},{38:[1,156]},{11:[2,11],30:[2,11],37:[2,11],62:[2,11],66:[2,11],71:[2,11]},{20:158,28:132,30:[1,133],154:157},{32:159,33:[2,144],63:[1,160]},{8:149,33:[2,13],47:[2,13],56:[1,9],63:[2,13],143:[1,150],155:161},{33:[2,148],47:[2,148],56:[2,148],63:[2,148],143:[2,148]},{33:[2,146],47:[2,146],56:[2,146],63:[2,146],143:[2,146]},{33:[2,147],47:[2,147],56:[2,147],63:[2,147],143:[2,147]},{25:[2,101],27:[2,101],40:[2,101],58:[2,101],71:[2,101],87:[2,101],128:[2,101],130:[2,101],131:[2,101],147:[2,101]},{146:162,147:[2,124],148:[1,104]},{8:163,56:[1,9]},{8:167,38:[1,168],56:[1,9],65:164,68:166,69:165},{23:169,26:21,67:22,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{23:171,26:21,39:170,40:[2,154],67:22,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{11:[1,172],20:173,28:132,30:[1,133]},{11:[2,140],30:[2,140]},{33:[1,174]},{8:175,56:[1,9]},{33:[2,149],47:[2,149],56:[2,149],63:[2,149],143:[2,149]},{147:[2,122]},{64:[1,176]},{11:[2,34],30:[2,34],37:[2,34],62:[2,34],66:[2,34],71:[2,34]},{8:167,11:[2,40],30:[2,40],37:[2,40],38:[1,168],56:[1,9],62:[2,40],65:177,66:[2,40],68:166,69:165,71:[2,40]},{70:[1,178],72:[1,179]},{70:[2,36],72:[2,36]},{8:181,56:[1,9],57:180},{40:[1,182]},{40:[1,183]},{40:[2,155]},{11:[2,143],30:[2,143],37:[2,143],62:[2,143],66:[2,143],71:[2,143]},{11:[2,141],30:[2,141]},{9:[2,12],11:[2,12],30:[2,12],37:[2,12],62:[2,12],66:[2,12],71:[2,12]},{33:[2,145]},{8:167,38:[1,168],56:[1,9],65:184,68:166,69:165},{11:[2,41],30:[2,41],37:[2,41],62:[2,41],66:[2,41],71:[2,41]},{67:185,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{8:188,56:[1,9],71:[2,43],73:186,74:187},{40:[1,189]},{40:[2,30],58:[1,190]},{41:[1,191]},{41:[1,192]},{11:[2,33],30:[2,33],37:[2,33],62:[2,33],66:[2,33],71:[2,33]},{71:[1,193],128:[1,42]},{71:[1,194]},{8:188,56:[1,9],71:[2,43],73:195,74:187},{41:[1,196]},{70:[2,37],72:[2,37]},{8:181,56:[1,9],57:197},{67:198,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{42:199,43:200,45:[1,201]},{11:[2,38],30:[2,38],37:[2,38],38:[2,38],56:[2,38],62:[2,38],66:[2,38],71:[2,38]},{11:[2,39],30:[2,39],37:[2,39],38:[2,39],56:[2,39],62:[2,39],66:[2,39],71:[2,39]},{71:[2,42]},{67:202,91:34,92:35,93:33,99:32,101:31,106:30,112:29,117:28,119:27,121:26,123:25,125:24,127:23,131:[1,36]},{40:[2,29]},{25:[1,203],128:[1,42]},{11:[2,15],30:[2,15],37:[2,15],62:[2,15],66:[2,15],71:[2,15]},{9:[1,205],11:[2,156],30:[2,156],37:[2,156],44:204,62:[2,156],66:[2,156],71:[2,156]},{8:149,31:207,34:147,46:206,48:[1,208],56:[1,9],143:[1,150],155:148},{71:[1,209],128:[1,42]},{11:[2,35],30:[2,35],37:[2,35],62:[2,35],66:[2,35],71:[2,35]},{11:[2,16],30:[2,16],37:[2,16],62:[2,16],66:[2,16],71:[2,16]},{42:210,43:200,45:[1,201]},{47:[1,211]},{47:[2,18]},{47:[2,19]},{56:[2,44],71:[2,44]},{11:[1,212]},{9:[2,17],11:[2,17],30:[2,17],37:[2,17],62:[2,17],66:[2,17],71:[2,17]},{11:[2,157],30:[2,157],37:[2,157],62:[2,157],66:[2,157],71:[2,157]}],
defaultActions: {3:[2,1],49:[2,80],50:[2,81],51:[2,82],52:[2,83],54:[2,76],55:[2,77],80:[2,135],134:[2,9],140:[2,52],162:[2,122],171:[2,155],175:[2,145],195:[2,42],197:[2,29],207:[2,18],208:[2,19]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:/* ignore comment */
break;
case 2:return 13;
break;
case 3:return 152;
break;
case 4:return 'USES';
break;
case 5:return 79;
break;
case 6:return 80;
break;
case 7:return 7;
break;
case 8:return 'TEST';
break;
case 9:return 'IMAGE';
break;
case 10:return 22;
break;
case 11:return 'NEEDS';
break;
case 12:return 66;
break;
case 13:return 37;
break;
case 14:return 41;
break;
case 15:return 51;
break;
case 16:return 52;
break;
case 17:return 54;
break;
case 18:return 55;
break;
case 19:return 'MAP';
break;
case 20:return 'FOR';
break;
case 21:return 77;
break;
case 22:return 76;
break;
case 23:return 142;
break;
case 24:return 137;
break;
case 25:return 140;
break;
case 26:return 'REDUCE';
break;
case 27:return 128;
break;
case 28:return 'INT';
break;
case 29:return 'LONG';
break;
case 30:return 'FLOAT';
break;
case 31:return 'DOUBLE';
break;
case 32:return 129;
break;
case 33:return 'ELSEIF';
break;
case 34:return 130; 
break;
case 35:return 62;
break;
case 36:return 64;
break;
case 37:return 30;
break;
case 38:return 33;
break;
case 39:return 158;
break;
case 40:return 45;
break;
case 41:return 47;
break;
case 42:return 'ESCAPE';	
break;
case 43:return 48;
break;
case 44:return 114;
break;
case 45:return 115;
break;
case 46:return 108;
break;
case 47:return 109;
break;
case 48:return 110;
break;
case 49:return 111;
break;
case 50:return 104;
break;
case 51:return 105;
break;
case 52:return 63;
break;
case 53:return 70;
break;
case 54:return 72;
break;
case 55:return 157;
break;
case 56:return 'PLUS';
break;
case 57:return 141;
break;
case 58:return 96;
break;
case 59:return 97;
break;
case 60:return 98;
break;
case 61:return 126;
break;
case 62:return 27;
break;
case 63:return 124;
break;
case 64:return 118;
break;
case 65:return 122;
break;
case 66:return 120;
break;
case 67:return 131;
break;
case 68:return 94;
break;
case 69:return 'QUESTION';
break;
case 70:return 90;
break;
case 71:return 145;
break;
case 72:return 147;
break;
case 73:return 38;
break;
case 74:return 40;
break;
case 75:return 86;
break;
case 76:return 87;
break;
case 77:return 149;
break;
case 78:return 25;
break;
case 79:return 58;
break;
case 80:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 84;
break;
case 81:return 143;
break;
case 82:/* eat blank lines */
break;
case 83:
					if (typeof yy._iemitstack === 'undefined') {
						yy._iemitstack = [0];
					}
					var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
				    if (indentation > yy._iemitstack[0]) {
				        yy._iemitstack.unshift(indentation);
				        return 9;
				    }
				
				    var tokens = [];
				
				    while (indentation < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				    if (tokens.length) return tokens;
				
break;
case 84:/* ignore whitespace */
break;
case 85:return 56;
break;
case 86:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:theory\b)/,/^(?:extends\b)/,/^(?:uses\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:namespace\b)/,/^(?:test\b)/,/^(?:image\b)/,/^(?:data\b)/,/^(?:needs\b)/,/^(?:fn\b)/,/^(?:ff\b)/,/^(?:->)/,/^(?:<-)/,/^(?:style\b)/,/^(?:where\b)/,/^(?:yield\b)/,/^(?:map\b)/,/^(?:for\b)/,/^(?:null\b)/,/^(?:([0-9]+)+)/,/^(?:0x([0-9A-Fa-f]+))/,/^(?:([0-1]+)b\b)/,/^(?:#([0-9A-Fa-f]+))/,/^(?:reduce\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:else\s+if\b)/,/^(?:endif\b)/,/^(?:\[--)/,/^(?:--\])/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:is\b)/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\\)/,/^(?:\.\.\.)/,/^(?:eq|==)/,/^(?:neq|!=)/,/^(?:gt|>)/,/^(?:lt|<)/,/^(?:gte|>=)/,/^(?:lte|<=)/,/^(?:<<)/,/^(?:>>)/,/^(?:::)/,/^(?:=)/,/^(?:@=)/,/^(?:@)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%|mod\b)/,/^(?:\|\||or\b)/,/^(?:\|)/,/^(?:&&|and\b)/,/^(?:&)/,/^(?:\|)/,/^(?:\^|xor\b)/,/^(?:not|!)/,/^(?:\*\*)/,/^(?:\?)/,/^(?:\?!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:".*")/,/^(?:\.)/,/^(?:[\n\r]+\s+(?![^\n\r]))/,/^(?:[\n\r]\s+)/,/^(?:\s+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = theory;
exports.Parser = theory.Parser;
exports.parse = function () { return theory.parse.apply(theory, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}