/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var theory = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"theorylist":4,"ENDOFFILE":5,"theory":6,"THEORY":7,"id":8,"EXTENDS":9,"LBRACE":10,"theorybody":11,"RBRACE":12,"deflist":13,"nslist":14,"data":15,"DATA":16,"paramlist":17,"dtypelist":18,"EOL":19,"paramdef":20,"PIPE":21,"namespace":22,"PREFIX":23,"nsbody":24,"def":25,"sdef":26,"fdef":27,"ffdef":28,"tfdef":29,"FRAGFUNC":30,"LPAREN":31,"RPAREN":32,"ASSIGN":33,"ffnodetree":34,"ffnodelist":35,"INDENT":36,"DEINDENT":37,"ffnode":38,"LFFNODE":39,"RFFNODE":40,"ffimplist":41,"IMPLICATION":42,"fragexpr":43,"REVIMPLICATION":44,"STYLE":45,"expr":46,"WHERE":47,"YIELD":48,"ID":49,"tuplevarlist":50,"COMMA":51,"typedef":52,"LBRACK":53,"RBRACK":54,"SETSTART":55,"TYPIFY":56,"SETEND":57,"eqdeflist":58,"FUNCTION":59,"e":60,"lside":61,"eqdef":62,"CASEASSIGN":63,"caselist":64,"casedef":65,"lit":66,"NATLITERAL":67,"NULL":68,"boollit":69,"TRUE":70,"FALSE":71,"elist":72,"prec3list":73,"prec2list":74,"prec1list":75,"functioncall":76,"member":77,"memberchain":78,"DOT":79,"prec3op":80,"EQUALITY":81,"GT":82,"LT":83,"GTE":84,"LTE":85,"plusmin":86,"atomlist":87,"atom":88,"muldiv":89,"TIMES":90,"DIVIDE":91,"PLUS":92,"MINUS":93,"number":94,"string":95,"dict":96,"integer":97,"hexint":98,"BINNATLITERAL":99,"float":100,"color":101,"HEXCOLOR":102,"HEXNATLITERAL":103,"f":104,"colondeflist":105,"COLON":106,"binop":107,"OR":108,"AND":109,"XOR":110,"unaryleft":111,"NOT":112,"unaryright":113,"QUESTION":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",7:"THEORY",9:"EXTENDS",10:"LBRACE",12:"RBRACE",14:"nslist",16:"DATA",19:"EOL",21:"PIPE",23:"PREFIX",29:"tfdef",30:"FRAGFUNC",31:"LPAREN",32:"RPAREN",33:"ASSIGN",36:"INDENT",37:"DEINDENT",39:"LFFNODE",40:"RFFNODE",42:"IMPLICATION",44:"REVIMPLICATION",45:"STYLE",46:"expr",47:"WHERE",48:"YIELD",49:"ID",51:"COMMA",53:"LBRACK",54:"RBRACK",55:"SETSTART",56:"TYPIFY",57:"SETEND",59:"FUNCTION",63:"CASEASSIGN",67:"NATLITERAL",68:"NULL",70:"TRUE",71:"FALSE",79:"DOT",81:"EQUALITY",82:"GT",83:"LT",84:"GTE",85:"LTE",90:"TIMES",91:"DIVIDE",92:"PLUS",93:"MINUS",95:"string",99:"BINNATLITERAL",102:"HEXCOLOR",103:"HEXNATLITERAL",104:"f",106:"COLON",108:"OR",109:"AND",110:"XOR",112:"NOT",114:"QUESTION"},
productions_: [0,[3,2],[3,0],[4,2],[4,1],[6,7],[6,5],[11,1],[11,1],[11,0],[15,4],[18,4],[18,1],[22,6],[24,1],[24,0],[25,1],[25,1],[25,1],[25,1],[25,1],[28,7],[34,4],[34,1],[35,2],[35,1],[38,3],[38,4],[41,4],[41,2],[41,2],[43,6],[43,4],[43,4],[43,2],[43,2],[13,2],[13,1],[8,1],[50,3],[50,1],[52,1],[52,3],[26,6],[26,4],[27,8],[61,1],[61,3],[62,4],[62,4],[58,2],[58,1],[64,2],[64,0],[65,3],[17,3],[17,1],[20,2],[20,4],[66,1],[66,1],[69,1],[69,1],[72,3],[72,1],[72,0],[60,1],[60,1],[60,1],[76,4],[77,1],[77,1],[78,3],[78,1],[73,3],[73,3],[80,1],[80,1],[80,1],[80,1],[80,1],[74,3],[74,3],[75,1],[75,1],[87,3],[87,3],[89,1],[89,1],[86,1],[86,1],[88,1],[88,1],[88,1],[88,1],[88,3],[94,1],[94,1],[94,1],[94,1],[94,1],[101,1],[97,2],[97,1],[98,2],[98,1],[100,3],[100,4],[100,2],[96,3],[105,5],[105,3],[105,0],[107,1],[107,1],[107,1],[111,1],[113,1],[113,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 3: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 4: this.$ = [$$[$0]]; 
break;
case 5: this.$ = new yy.Theory($$[$0-5], $$[$0-1], $$[$0-3]); 
break;
case 6: this.$ = new yy.Theory($$[$0-3], $$[$0-1]); 
break;
case 9: this.$ = []; 
break;
case 11: this.$ = $$[$0-1]; this.$.unshift($$[$0-3]); 
break;
case 12: this.$ = [$$[$0]]; 
break;
case 36: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 37: this.$ = [$$[$0]]; 
break;
case 39: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 40: this.$ = [ $$[$0] ]; 
break;
case 41: this.$ = new yy.Type($$[$0]); 
break;
case 42: this.$ = new yy.Type("Array", $$[$0-2]); 
break;
case 43: this.$ = new yy.SetDef($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 44: this.$ = new yy.SetDef($$[$0-2], $$[$0-2], $$[$0]); 
break;
case 45: this.$ = new yy.FnDef($$[$0-6], $$[$0-4], null, $$[$0-1]); 
break;
case 46: this.$ = [ $$[$0] ]; 
break;
case 47: this.$ = $$[$0-1]; 
break;
case 48: this.$ = new yy.Assignment($$[$0-3], $$[$0-1]); 
break;
case 49: this.$ = new yy.CaseAssignment($$[$0-3], $$[$0-1]); 
break;
case 50: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 51: this.$ = [ $$[$0] ]; 
break;
case 52: this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 53: this.$ = []; 
break;
case 54: this.$ = new yy.CaseDef($$[$0-2], $$[$0]); 
break;
case 55: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 56: this.$ = [ $$[$0] ]; 
break;
case 57: this.$ = new yy.ParamDef($$[$0-1], $$[$0]); 
break;
case 58: this.$ = new yy.ParamDef($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 59: this.$ = parseInt($$[$0]); 
break;
case 60: this.$ = null; 
break;
case 61: this.$ = true; 
break;
case 62: this.$ = false; 
break;
case 63: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 64: this.$ = [ $$[$0] ]; 
break;
}
},
table: [{1:[2,2],3:1,4:2,6:3,7:[1,4]},{1:[3]},{5:[1,5]},{4:6,5:[2,4],6:3,7:[1,4]},{8:7,49:[1,8]},{1:[2,1]},{5:[2,3]},{9:[1,9],10:[1,10]},{9:[2,38],10:[2,38],19:[2,38],31:[2,38],32:[2,38],33:[2,38],40:[2,38],42:[2,38],49:[2,38],51:[2,38],53:[2,38],54:[2,38],56:[2,38],57:[2,38],63:[2,38],79:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38],90:[2,38],91:[2,38],92:[2,38],93:[2,38]},{8:11,49:[1,8]},{11:12,12:[2,9],13:13,14:[1,14],22:20,23:[1,24],25:15,26:16,27:17,28:18,29:[1,19],30:[1,23],55:[1,21],59:[1,22]},{10:[1,25]},{12:[1,26]},{12:[2,7]},{12:[2,8]},{12:[2,37],13:27,22:20,23:[1,24],25:15,26:16,27:17,28:18,29:[1,19],30:[1,23],55:[1,21],59:[1,22]},{12:[2,16],23:[2,16],29:[2,16],30:[2,16],55:[2,16],59:[2,16]},{12:[2,17],23:[2,17],29:[2,17],30:[2,17],55:[2,17],59:[2,17]},{12:[2,18],23:[2,18],29:[2,18],30:[2,18],55:[2,18],59:[2,18]},{12:[2,19],23:[2,19],29:[2,19],30:[2,19],55:[2,19],59:[2,19]},{12:[2,20],23:[2,20],29:[2,20],30:[2,20],55:[2,20],59:[2,20]},{8:28,49:[1,8]},{8:29,49:[1,8]},{8:30,49:[1,8]},{8:31,49:[1,8]},{11:32,12:[2,9],13:13,14:[1,14],22:20,23:[1,24],25:15,26:16,27:17,28:18,29:[1,19],30:[1,23],55:[1,21],59:[1,22]},{5:[2,6],7:[2,6]},{12:[2,36]},{56:[1,33],57:[1,34]},{31:[1,35]},{31:[1,36]},{10:[1,37]},{12:[1,38]},{8:39,49:[1,8]},{8:43,31:[1,44],49:[1,8],58:40,61:42,62:41},{8:48,17:45,20:46,49:[1,8],52:47},{8:48,17:49,20:46,49:[1,8],52:47},{12:[2,15],13:51,22:20,23:[1,24],24:50,25:15,26:16,27:17,28:18,29:[1,19],30:[1,23],55:[1,21],59:[1,22]},{5:[2,5],7:[2,5]},{57:[1,52]},{12:[2,44],23:[2,44],29:[2,44],30:[2,44],55:[2,44],59:[2,44]},{8:43,12:[2,51],23:[2,51],29:[2,51],30:[2,51],31:[1,44],49:[1,8],55:[2,51],58:53,59:[2,51],61:42,62:41},{33:[1,54],63:[1,55]},{33:[2,46],63:[2,46]},{8:57,49:[1,8],50:56},{32:[1,58]},{32:[2,56],51:[1,59]},{8:60,49:[1,8]},{49:[2,41],53:[1,61]},{32:[1,62]},{12:[1,63]},{12:[2,14]},{8:43,31:[1,44],49:[1,8],58:64,61:42,62:41},{12:[2,50],23:[2,50],29:[2,50],30:[2,50],55:[2,50],59:[2,50]},{8:88,31:[1,75],49:[1,8],53:[1,81],60:65,67:[1,84],73:66,74:67,75:68,76:87,77:82,78:74,86:83,87:69,88:70,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{8:93,19:[2,53],49:[1,8],64:91,65:92},{32:[1,94]},{32:[2,40],51:[1,95]},{42:[1,96]},{8:48,17:97,20:46,49:[1,8],52:47},{32:[2,57],33:[1,98],51:[2,57]},{54:[1,99]},{33:[1,100]},{19:[1,101]},{12:[2,43],23:[2,43],29:[2,43],30:[2,43],55:[2,43],59:[2,43]},{19:[1,102]},{19:[2,66],32:[2,66],49:[2,66],51:[2,66],54:[2,66]},{19:[2,67],32:[2,67],49:[2,67],51:[2,67],54:[2,67],80:103,81:[1,104],82:[1,105],83:[1,106],84:[1,107],85:[1,108]},{19:[2,68],32:[2,68],49:[2,68],51:[2,68],54:[2,68],86:109,92:[1,89],93:[1,90]},{19:[2,83],32:[2,83],49:[2,83],51:[2,83],54:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83],92:[2,83],93:[2,83]},{19:[2,84],32:[2,84],49:[2,84],51:[2,84],54:[2,84],81:[2,84],82:[2,84],83:[2,84],84:[2,84],85:[2,84],89:110,90:[1,111],91:[1,112],92:[2,84],93:[2,84]},{19:[2,91],32:[2,91],49:[2,91],51:[2,91],54:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91],90:[2,91],91:[2,91],92:[2,91],93:[2,91]},{19:[2,92],32:[2,92],49:[2,92],51:[2,92],54:[2,92],81:[2,92],82:[2,92],83:[2,92],84:[2,92],85:[2,92],90:[2,92],91:[2,92],92:[2,92],93:[2,92]},{19:[2,93],32:[2,93],49:[2,93],51:[2,93],54:[2,93],81:[2,93],82:[2,93],83:[2,93],84:[2,93],85:[2,93],90:[2,93],91:[2,93],92:[2,93],93:[2,93]},{19:[2,94],32:[2,94],49:[2,94],51:[2,94],54:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94],90:[2,94],91:[2,94],92:[2,94],93:[2,94]},{8:88,31:[1,75],49:[1,8],53:[1,81],60:113,67:[1,84],73:66,74:67,75:68,76:87,77:82,78:74,86:83,87:69,88:70,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{19:[2,96],32:[2,96],49:[2,96],51:[2,96],54:[2,96],79:[1,114],81:[2,96],82:[2,96],83:[2,96],84:[2,96],85:[2,96],90:[2,96],91:[2,96],92:[2,96],93:[2,96],104:[1,115]},{19:[2,97],32:[2,97],49:[2,97],51:[2,97],54:[2,97],81:[2,97],82:[2,97],83:[2,97],84:[2,97],85:[2,97],90:[2,97],91:[2,97],92:[2,97],93:[2,97]},{19:[2,98],32:[2,98],49:[2,98],51:[2,98],54:[2,98],81:[2,98],82:[2,98],83:[2,98],84:[2,98],85:[2,98],90:[2,98],91:[2,98],92:[2,98],93:[2,98]},{19:[2,99],32:[2,99],49:[2,99],51:[2,99],54:[2,99],81:[2,99],82:[2,99],83:[2,99],84:[2,99],85:[2,99],90:[2,99],91:[2,99],92:[2,99],93:[2,99]},{19:[2,100],32:[2,100],49:[2,100],51:[2,100],54:[2,100],81:[2,100],82:[2,100],83:[2,100],84:[2,100],85:[2,100],90:[2,100],91:[2,100],92:[2,100],93:[2,100]},{54:[2,112],95:[1,117],105:116},{19:[2,73],32:[2,73],49:[2,73],51:[2,73],54:[2,73],79:[1,118],81:[2,73],82:[2,73],83:[2,73],84:[2,73],85:[2,73],90:[2,73],91:[2,73],92:[2,73],93:[2,73]},{67:[1,119],103:[1,120]},{19:[2,103],32:[2,103],49:[2,103],51:[2,103],54:[2,103],79:[2,103],81:[2,103],82:[2,103],83:[2,103],84:[2,103],85:[2,103],90:[2,103],91:[2,103],92:[2,103],93:[2,103],104:[2,103]},{19:[2,105],32:[2,105],49:[2,105],51:[2,105],54:[2,105],81:[2,105],82:[2,105],83:[2,105],84:[2,105],85:[2,105],90:[2,105],91:[2,105],92:[2,105],93:[2,105]},{19:[2,101],32:[2,101],49:[2,101],51:[2,101],54:[2,101],81:[2,101],82:[2,101],83:[2,101],84:[2,101],85:[2,101],90:[2,101],91:[2,101],92:[2,101],93:[2,101]},{19:[2,70],32:[2,70],49:[2,70],51:[2,70],54:[2,70],79:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70],90:[2,70],91:[2,70],92:[2,70],93:[2,70]},{19:[2,71],31:[1,121],32:[2,71],49:[2,71],51:[2,71],54:[2,71],79:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71],90:[2,71],91:[2,71],92:[2,71],93:[2,71]},{31:[2,89],49:[2,89],53:[2,89],67:[2,89],92:[2,89],93:[2,89],95:[2,89],99:[2,89],102:[2,89],103:[2,89]},{31:[2,90],49:[2,90],53:[2,90],67:[2,90],92:[2,90],93:[2,90],95:[2,90],99:[2,90],102:[2,90],103:[2,90]},{19:[1,122]},{8:93,19:[2,53],49:[1,8],64:123,65:92},{42:[1,124]},{33:[2,47],63:[2,47]},{8:57,49:[1,8],50:125},{8:88,31:[1,75],49:[1,8],53:[1,81],60:126,67:[1,84],73:66,74:67,75:68,76:87,77:82,78:74,86:83,87:69,88:70,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{32:[2,55]},{66:127,67:[1,128],68:[1,129]},{49:[2,42]},{34:130,35:131,38:132,39:[1,133]},{12:[2,13],23:[2,13],29:[2,13],30:[2,13],55:[2,13],59:[2,13]},{12:[2,48],23:[2,48],29:[2,48],30:[2,48],31:[2,48],49:[2,48],55:[2,48],59:[2,48]},{8:88,31:[1,75],49:[1,8],53:[1,81],67:[1,84],73:134,74:135,75:136,76:87,77:82,78:74,86:83,87:69,88:70,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{31:[2,76],49:[2,76],53:[2,76],67:[2,76],92:[2,76],93:[2,76],95:[2,76],99:[2,76],102:[2,76],103:[2,76]},{31:[2,77],49:[2,77],53:[2,77],67:[2,77],92:[2,77],93:[2,77],95:[2,77],99:[2,77],102:[2,77],103:[2,77]},{31:[2,78],49:[2,78],53:[2,78],67:[2,78],92:[2,78],93:[2,78],95:[2,78],99:[2,78],102:[2,78],103:[2,78]},{31:[2,79],49:[2,79],53:[2,79],67:[2,79],92:[2,79],93:[2,79],95:[2,79],99:[2,79],102:[2,79],103:[2,79]},{31:[2,80],49:[2,80],53:[2,80],67:[2,80],92:[2,80],93:[2,80],95:[2,80],99:[2,80],102:[2,80],103:[2,80]},{8:88,31:[1,75],49:[1,8],53:[1,81],67:[1,84],74:137,75:138,76:87,77:82,78:74,86:83,87:69,88:70,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{8:88,31:[1,75],49:[1,8],53:[1,81],67:[1,84],76:87,77:82,78:74,86:83,87:139,88:140,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{31:[2,87],49:[2,87],53:[2,87],67:[2,87],92:[2,87],93:[2,87],95:[2,87],99:[2,87],102:[2,87],103:[2,87]},{31:[2,88],49:[2,88],53:[2,88],67:[2,88],92:[2,88],93:[2,88],95:[2,88],99:[2,88],102:[2,88],103:[2,88]},{32:[1,141]},{67:[1,142]},{19:[2,108],32:[2,108],49:[2,108],51:[2,108],54:[2,108],81:[2,108],82:[2,108],83:[2,108],84:[2,108],85:[2,108],90:[2,108],91:[2,108],92:[2,108],93:[2,108]},{54:[1,143]},{106:[1,144]},{8:88,49:[1,8],76:87,77:82,78:145},{19:[2,102],32:[2,102],49:[2,102],51:[2,102],54:[2,102],79:[2,102],81:[2,102],82:[2,102],83:[2,102],84:[2,102],85:[2,102],90:[2,102],91:[2,102],92:[2,102],93:[2,102],104:[2,102]},{19:[2,104],32:[2,104],49:[2,104],51:[2,104],54:[2,104],81:[2,104],82:[2,104],83:[2,104],84:[2,104],85:[2,104],90:[2,104],91:[2,104],92:[2,104],93:[2,104]},{8:88,31:[1,75],32:[2,65],49:[1,8],53:[1,81],60:147,67:[1,84],72:146,73:66,74:67,75:68,76:87,77:82,78:74,86:83,87:69,88:70,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{12:[2,49],23:[2,49],29:[2,49],30:[2,49],31:[2,49],49:[2,49],55:[2,49],59:[2,49]},{19:[2,52]},{8:88,31:[1,75],49:[1,8],53:[1,81],60:148,67:[1,84],73:66,74:67,75:68,76:87,77:82,78:74,86:83,87:69,88:70,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{32:[2,39]},{19:[1,149]},{32:[2,58],51:[2,58]},{32:[2,59],51:[2,59]},{32:[2,60],51:[2,60]},{12:[2,21],23:[2,21],29:[2,21],30:[2,21],55:[2,21],59:[2,21]},{12:[2,23],23:[2,23],29:[2,23],30:[2,23],36:[1,150],55:[2,23],59:[2,23]},{12:[2,25],23:[2,25],29:[2,25],30:[2,25],35:151,36:[2,25],37:[2,25],38:132,39:[1,133],55:[2,25],59:[2,25]},{8:152,49:[1,8]},{19:[2,74],32:[2,74],49:[2,74],51:[2,74],54:[2,74]},{19:[2,75],32:[2,75],49:[2,75],51:[2,75],54:[2,75],80:103,81:[1,104],82:[1,105],83:[1,106],84:[1,107],85:[1,108]},{86:109,92:[1,89],93:[1,90]},{19:[2,81],32:[2,81],49:[2,81],51:[2,81],54:[2,81],81:[2,81],82:[2,81],83:[2,81],84:[2,81],85:[2,81]},{19:[2,82],32:[2,82],49:[2,82],51:[2,82],54:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82],86:109,92:[1,89],93:[1,90]},{19:[2,85],32:[2,85],49:[2,85],51:[2,85],54:[2,85],81:[2,85],82:[2,85],83:[2,85],84:[2,85],85:[2,85],92:[2,85],93:[2,85]},{19:[2,86],32:[2,86],49:[2,86],51:[2,86],54:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86],89:110,90:[1,111],91:[1,112],92:[2,86],93:[2,86]},{19:[2,95],32:[2,95],49:[2,95],51:[2,95],54:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95],90:[2,95],91:[2,95],92:[2,95],93:[2,95]},{19:[2,106],32:[2,106],49:[2,106],51:[2,106],54:[2,106],81:[2,106],82:[2,106],83:[2,106],84:[2,106],85:[2,106],90:[2,106],91:[2,106],92:[2,106],93:[2,106],104:[1,153]},{19:[2,109],32:[2,109],49:[2,109],51:[2,109],54:[2,109],81:[2,109],82:[2,109],83:[2,109],84:[2,109],85:[2,109],90:[2,109],91:[2,109],92:[2,109],93:[2,109]},{8:88,31:[1,75],49:[1,8],53:[1,81],60:154,67:[1,84],73:66,74:67,75:68,76:87,77:82,78:74,86:83,87:69,88:70,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{19:[2,72],32:[2,72],49:[2,72],51:[2,72],54:[2,72],81:[2,72],82:[2,72],83:[2,72],84:[2,72],85:[2,72],90:[2,72],91:[2,72],92:[2,72],93:[2,72]},{32:[1,155]},{32:[2,64],51:[1,156]},{19:[2,54],49:[2,54]},{12:[2,45],23:[2,45],29:[2,45],30:[2,45],55:[2,45],59:[2,45]},{35:157,38:132,39:[1,133]},{12:[2,24],23:[2,24],29:[2,24],30:[2,24],36:[2,24],37:[2,24],55:[2,24],59:[2,24]},{40:[1,158]},{19:[2,107],32:[2,107],49:[2,107],51:[2,107],54:[2,107],81:[2,107],82:[2,107],83:[2,107],84:[2,107],85:[2,107],90:[2,107],91:[2,107],92:[2,107],93:[2,107]},{51:[1,159],54:[2,111]},{19:[2,69],32:[2,69],49:[2,69],51:[2,69],54:[2,69],79:[2,69],81:[2,69],82:[2,69],83:[2,69],84:[2,69],85:[2,69],90:[2,69],91:[2,69],92:[2,69],93:[2,69]},{8:88,31:[1,75],32:[2,65],49:[1,8],53:[1,81],60:147,67:[1,84],72:160,73:66,74:67,75:68,76:87,77:82,78:74,86:83,87:69,88:70,92:[1,89],93:[1,90],94:71,95:[1,72],96:73,97:76,98:77,99:[1,78],100:79,101:80,102:[1,86],103:[1,85]},{37:[1,161]},{12:[2,26],23:[2,26],29:[2,26],30:[2,26],36:[2,26],37:[2,26],39:[2,26],41:162,42:[1,163],44:[1,164],55:[2,26],59:[2,26]},{54:[2,112],95:[1,117],105:165},{32:[2,63]},{12:[2,22],23:[2,22],29:[2,22],30:[2,22],55:[2,22],59:[2,22]},{12:[2,27],23:[2,27],29:[2,27],30:[2,27],36:[2,27],37:[2,27],39:[2,27],55:[2,27],59:[2,27]},{43:166,45:[1,167],47:[1,168],48:[1,169]},{43:170,45:[1,167],47:[1,168],48:[1,169]},{54:[2,110]},{12:[2,29],23:[2,29],29:[2,29],30:[2,29],36:[2,29],37:[2,29],39:[2,29],44:[1,171],55:[2,29],59:[2,29]},{46:[1,172]},{46:[1,173]},{46:[1,174]},{12:[2,30],23:[2,30],29:[2,30],30:[2,30],36:[2,30],37:[2,30],39:[2,30],55:[2,30],59:[2,30]},{43:175,45:[1,167],47:[1,168],48:[1,169]},{12:[2,34],23:[2,34],29:[2,34],30:[2,34],36:[2,34],37:[2,34],39:[2,34],44:[2,34],47:[1,176],48:[1,177],55:[2,34],59:[2,34]},{48:[1,178]},{12:[2,35],23:[2,35],29:[2,35],30:[2,35],36:[2,35],37:[2,35],39:[2,35],44:[2,35],55:[2,35],59:[2,35]},{12:[2,28],23:[2,28],29:[2,28],30:[2,28],36:[2,28],37:[2,28],39:[2,28],55:[2,28],59:[2,28]},{46:[1,179]},{46:[1,180]},{46:[1,181]},{48:[1,182]},{12:[2,33],23:[2,33],29:[2,33],30:[2,33],36:[2,33],37:[2,33],39:[2,33],44:[2,33],55:[2,33],59:[2,33]},{12:[2,32],23:[2,32],29:[2,32],30:[2,32],36:[2,32],37:[2,32],39:[2,32],44:[2,32],55:[2,32],59:[2,32]},{46:[1,183]},{12:[2,31],23:[2,31],29:[2,31],30:[2,31],36:[2,31],37:[2,31],39:[2,31],44:[2,31],55:[2,31],59:[2,31]}],
defaultActions: {5:[2,1],6:[2,3],13:[2,7],14:[2,8],27:[2,36],51:[2,14],97:[2,55],99:[2,42],123:[2,52],125:[2,39],160:[2,63],165:[2,110]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore blank */
break;
case 1:/* ignore blank */
break;
case 2:/* ignore comment */
break;
case 3:/* ignore comment */
break;
case 4:return 7;
break;
case 5:return 9;
break;
case 6:return 'USES';
break;
case 7:return 70;
break;
case 8:return 71;
break;
case 9:return 23;
break;
case 10:return 'TEST';
break;
case 11:return 'IMAGE';
break;
case 12:return 16;
break;
case 13:return 'NEEDS';
break;
case 14:return 59;
break;
case 15:return 30;
break;
case 16:return 42;
break;
case 17:return 44;
break;
case 18:return 45;
break;
case 19:return 47;
break;
case 20:return 48;
break;
case 21:return 'MAP';
break;
case 22:return 'FOR';
break;
case 23:return 68;
break;
case 24:return 67;
break;
case 25:return 103;
break;
case 26:return 99;
break;
case 27:return 102;
break;
case 28:return 49;
break;
case 29:return 'REDUCE';
break;
case 30:return 'IF';
break;
case 31:return 'INT';
break;
case 32:return 'LONG';
break;
case 33:return 'FLOAT';
break;
case 34:return 'DOUBLE';
break;
case 35:return 'ELSE';
break;
case 36:return 'ELSEIF'; 
break;
case 37:return 55;
break;
case 38:return 57;
break;
case 39:return 'XPATHSTART';
break;
case 40:return 'XPATHEND';
break;
case 41:return 39;
break;
case 42:return 40;
break;
case 43:return 'ESCAPE';	
break;
case 44:return 'ELLIPSIS';
break;
case 45:return 81;
break;
case 46:return 82;
break;
case 47:return 83;
break;
case 48:return 84;
break;
case 49:return 85;
break;
case 50:return 56;
break;
case 51:return 33;
break;
case 52:return 63;
break;
case 53:return 92;
break;
case 54:return 93;
break;
case 55:return 90;
break;
case 56:return 91;
break;
case 57:return 108;
break;
case 58:return 21;
break;
case 59:return 109;
break;
case 60:return 110;
break;
case 61:return 112;
break;
case 62:return 114;
break;
case 63:return 10;
break;
case 64:return 12;
break;
case 65:return 31;
break;
case 66:return 32;
break;
case 67:return 'LBRACKET';
break;
case 68:return 'RBRACKET';
break;
case 69:return 106;
break;
case 70:return 19;
break;
case 71:return 51;
break;
case 72:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 'STRING_LIT';
break;
case 73:return 79;
break;
case 74:
					if (typeof yy._iemitstack === 'undefined') {
						yy._iemitstack = [0];
					}
					var indentation = lexeme.length;

				    col += indentation;
				
				    if (indentation > yy._iemitstack[0]) {
				        yy._iemitstack.unshift(indentation);
				        return "INDENT";
				    }
				
				    var tokens = [];
				
				    while (indentation < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				
				    if (tokens.length) return tokens;
				
break;
case 75:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\s*\n\s*)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:theory\b)/,/^(?:extends\b)/,/^(?:uses\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:ns\b)/,/^(?:test\b)/,/^(?:image\b)/,/^(?:data\b)/,/^(?:needs\b)/,/^(?:fn\b)/,/^(?:ff\b)/,/^(?:->)/,/^(?:<-)/,/^(?:style\b)/,/^(?:where\b)/,/^(?:yield\b)/,/^(?:map\b)/,/^(?:for\b)/,/^(?:null\b)/,/^(?:([0-9])+)/,/^(?:0x([0-9A-Fa-f])+)/,/^(?:([0-1])+b\b)/,/^(?:#([0-9A-Fa-f])+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:reduce\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:else\s+if\b)/,/^(?:\[--)/,/^(?:--\])/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\\)/,/^(?:\.\.\.)/,/^(?:eq|==)/,/^(?:gt|>)/,/^(?:lt|<)/,/^(?:gte|>=)/,/^(?:lte|<=)/,/^(?:::)/,/^(?:=)/,/^(?:@=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\|\||or\b)/,/^(?:\|)/,/^(?:&&|and\b)/,/^(?:\^|xor\b)/,/^(?:not|!)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:".*")/,/^(?:\.)/,/^(?:(?=^)\s*(?=gm))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = theory;
exports.Parser = theory.Parser;
exports.parse = function () { return theory.parse.apply(theory, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}