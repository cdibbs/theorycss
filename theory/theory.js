/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var theory = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"theorylist":4,"ENDOFFILE":5,"theory":6,"THEORY":7,"id":8,"EXTENDS":9,"LBRACE":10,"theorybody":11,"RBRACE":12,"deflist":13,"nslist":14,"data":15,"DATA":16,"paramlist":17,"dtypelist":18,"EOL":19,"paramdef":20,"PIPE":21,"namespace":22,"PREFIX":23,"nsbody":24,"def":25,"sdef":26,"fdef":27,"ffdef":28,"tfdef":29,"FRAGFUNC":30,"LPAREN":31,"RPAREN":32,"ASSIGN":33,"ffnodetree":34,"ffnodelist":35,"INDENT":36,"DEINDENT":37,"ffnode":38,"LFFNODE":39,"RFFNODE":40,"ffimplist":41,"IMPLICATION":42,"fragexpr":43,"REVIMPLICATION":44,"STYLE":45,"expr":46,"WHERE":47,"YIELD":48,"ID":49,"tuplevarlist":50,"COMMA":51,"typedef":52,"LBRACK":53,"RBRACK":54,"SETSTART":55,"TYPIFY":56,"SETEND":57,"eqdeflist":58,"FUNCTION":59,"e":60,"lside":61,"eqdef":62,"CASEASSIGN":63,"caselist":64,"casedef":65,"lit":66,"NATLITERAL":67,"NULL":68,"boollit":69,"TRUE":70,"FALSE":71,"elist":72,"HEXCOLOR":73,"STRING_LIT":74,"prec3list":75,"prec2list":76,"prec3op":77,"EQUALITY":78,"GT":79,"LT":80,"GTE":81,"LTE":82,"atomlist":83,"plusmin":84,"atom":85,"muldiv":86,"TIMES":87,"DIVIDE":88,"number":89,"binop":90,"PLUS":91,"MINUS":92,"OR":93,"AND":94,"unaryleft":95,"NOT":96,"unaryright":97,"QUESTION":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",7:"THEORY",9:"EXTENDS",10:"LBRACE",12:"RBRACE",16:"DATA",19:"EOL",21:"PIPE",23:"PREFIX",29:"tfdef",30:"FRAGFUNC",31:"LPAREN",32:"RPAREN",33:"ASSIGN",36:"INDENT",37:"DEINDENT",39:"LFFNODE",40:"RFFNODE",42:"IMPLICATION",44:"REVIMPLICATION",45:"STYLE",46:"expr",47:"WHERE",48:"YIELD",49:"ID",51:"COMMA",53:"LBRACK",54:"RBRACK",55:"SETSTART",56:"TYPIFY",57:"SETEND",59:"FUNCTION",63:"CASEASSIGN",67:"NATLITERAL",68:"NULL",70:"TRUE",71:"FALSE",73:"HEXCOLOR",74:"STRING_LIT",78:"EQUALITY",79:"GT",80:"LT",81:"GTE",82:"LTE",84:"plusmin",87:"TIMES",88:"DIVIDE",89:"number",91:"PLUS",92:"MINUS",93:"OR",94:"AND",96:"NOT",98:"QUESTION"},
productions_: [0,[3,2],[3,0],[4,2],[4,1],[6,7],[6,5],[11,1],[11,1],[11,0],[15,4],[18,4],[18,1],[14,2],[14,1],[22,6],[24,1],[24,1],[24,0],[25,1],[25,1],[25,1],[25,1],[28,7],[34,4],[34,1],[35,2],[35,1],[38,3],[38,4],[41,4],[41,2],[41,2],[43,6],[43,4],[43,4],[43,2],[43,2],[13,2],[13,1],[8,1],[50,3],[50,1],[52,1],[52,3],[26,6],[26,4],[27,10],[61,1],[61,3],[62,4],[62,4],[58,2],[58,1],[64,2],[64,0],[65,3],[17,3],[17,1],[20,2],[20,4],[66,1],[66,1],[69,1],[69,1],[72,3],[72,1],[60,1],[60,1],[60,1],[60,4],[60,1],[60,1],[75,3],[75,3],[77,1],[77,1],[77,1],[77,1],[77,1],[76,3],[76,3],[83,3],[83,3],[83,1],[86,1],[86,1],[85,1],[85,1],[85,3],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[95,1],[97,1],[97,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 3: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 4: this.$ = [$$[$0]]; 
break;
case 5: this.$ = new yy.Theory($$[$0-5], $$[$0-1], $$[$0-3]); 
break;
case 6: this.$ = new yy.Theory($$[$0-3], $$[$0-1]); 
break;
case 9: this.$ = []; 
break;
case 11: this.$ = $$[$0-1]; this.$.unshift($$[$0-3]); 
break;
case 12: this.$ = [$$[$0]]; 
break;
case 38: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 39: this.$ = [$$[$0]]; 
break;
case 41: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 42: this.$ = [ $$[$0] ]; 
break;
case 43: this.$ = new yy.Type($$[$0]); 
break;
case 44: this.$ = new yy.Type("Array", $$[$0-2]); 
break;
case 45: this.$ = new yy.SetDef($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 46: this.$ = new yy.SetDef($$[$0-2], $$[$0-2], $$[$0]); 
break;
case 47: this.$ = new yy.FnDef($$[$0-8], $$[$0-6], $$[$0-3], $$[$0-1]); 
break;
case 48: this.$ = [ $$[$0] ]; 
break;
case 49: this.$ = $$[$0-1]; 
break;
case 50: this.$ = new yy.Assignment($$[$0-3], $$[$0-1]); 
break;
case 51: this.$ = new yy.CaseAssignment($$[$0-3], $$[$0-1]); 
break;
case 52: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 53: this.$ = [ $$[$0] ]; 
break;
case 54: this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 55: this.$ = []; 
break;
case 56: this.$ = new yy.CaseDef($$[$0-2], $$[$0]); 
break;
case 57: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 58: this.$ = [ $$[$0] ]; 
break;
case 59: this.$ = new yy.ParamDef($$[$0-1], $$[$0]); 
break;
case 60: this.$ = new yy.ParamDef($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 61: this.$ = parseInt($$[$0]); 
break;
case 62: this.$ = null; 
break;
case 63: this.$ = true; 
break;
case 64: this.$ = false; 
break;
case 65: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 66: this.$ = [ $$[$0] ]; 
break;
}
},
table: [{1:[2,2],3:1,4:2,6:3,7:[1,4]},{1:[3]},{5:[1,5]},{4:6,5:[2,4],6:3,7:[1,4]},{8:7,49:[1,8]},{1:[2,1]},{5:[2,3]},{9:[1,9],10:[1,10]},{9:[2,40],10:[2,40],19:[2,40],31:[2,40],32:[2,40],33:[2,40],40:[2,40],42:[2,40],49:[2,40],51:[2,40],53:[2,40],56:[2,40],57:[2,40],63:[2,40],78:[2,40],79:[2,40],80:[2,40],81:[2,40],82:[2,40],84:[2,40],87:[2,40],88:[2,40]},{8:11,49:[1,8]},{11:12,12:[2,9],13:13,14:14,22:16,23:[1,21],25:15,26:17,27:18,28:19,29:[1,20],30:[1,24],55:[1,22],59:[1,23]},{10:[1,25]},{12:[1,26]},{12:[2,7]},{12:[2,8]},{12:[2,39],13:27,25:15,26:17,27:18,28:19,29:[1,20],30:[1,24],55:[1,22],59:[1,23]},{12:[2,14],14:28,22:16,23:[1,21]},{12:[2,19],29:[2,19],30:[2,19],55:[2,19],59:[2,19]},{12:[2,20],29:[2,20],30:[2,20],55:[2,20],59:[2,20]},{12:[2,21],29:[2,21],30:[2,21],55:[2,21],59:[2,21]},{12:[2,22],29:[2,22],30:[2,22],55:[2,22],59:[2,22]},{8:29,49:[1,8]},{8:30,49:[1,8]},{8:31,49:[1,8]},{8:32,49:[1,8]},{11:33,12:[2,9],13:13,14:14,22:16,23:[1,21],25:15,26:17,27:18,28:19,29:[1,20],30:[1,24],55:[1,22],59:[1,23]},{5:[2,6],7:[2,6]},{12:[2,38]},{12:[2,13]},{10:[1,34]},{56:[1,35],57:[1,36]},{31:[1,37]},{31:[1,38]},{12:[1,39]},{12:[2,18],13:41,14:42,22:16,23:[1,21],24:40,25:15,26:17,27:18,28:19,29:[1,20],30:[1,24],55:[1,22],59:[1,23]},{8:43,49:[1,8]},{8:47,31:[1,48],49:[1,8],58:44,61:46,62:45},{8:52,17:49,20:50,49:[1,8],52:51},{8:52,17:53,20:50,49:[1,8],52:51},{5:[2,5],7:[2,5]},{12:[1,54]},{12:[2,16]},{12:[2,17]},{57:[1,55]},{12:[2,46],29:[2,46],30:[2,46],55:[2,46],59:[2,46]},{8:47,12:[2,53],29:[2,53],30:[2,53],31:[1,48],49:[1,8],55:[2,53],58:56,59:[2,53],61:46,62:45},{33:[1,57],63:[1,58]},{33:[2,48],63:[2,48]},{8:60,49:[1,8],50:59},{32:[1,61]},{32:[2,58],51:[1,62]},{8:63,49:[1,8]},{42:[2,43],49:[2,43],53:[1,64]},{32:[1,65]},{19:[1,66]},{8:47,31:[1,48],49:[1,8],58:67,61:46,62:45},{12:[2,52],29:[2,52],30:[2,52],55:[2,52],59:[2,52]},{8:72,31:[1,79],49:[1,8],60:68,67:[1,69],68:[1,71],73:[1,70],74:[1,73],75:74,76:75,83:76,85:77,89:[1,78]},{8:82,19:[2,55],49:[1,8],64:80,65:81},{32:[1,83]},{32:[2,42],51:[1,84]},{56:[1,85]},{8:52,17:86,20:50,49:[1,8],52:51},{32:[2,59],33:[1,87],51:[2,59]},{54:[1,88]},{33:[1,89]},{12:[2,15],23:[2,15]},{12:[2,45],29:[2,45],30:[2,45],55:[2,45],59:[2,45]},{19:[1,90]},{19:[2,67],32:[2,67],49:[2,67],51:[2,67]},{19:[2,68],32:[2,68],49:[2,68],51:[2,68]},{19:[2,69],32:[2,69],49:[2,69],51:[2,69]},{31:[1,91],84:[2,87],87:[2,87],88:[2,87]},{19:[2,71],32:[2,71],49:[2,71],51:[2,71]},{19:[2,72],32:[2,72],49:[2,72],51:[2,72]},{77:92,78:[1,93],79:[1,94],80:[1,95],81:[1,96],82:[1,97]},{84:[1,98]},{19:[2,84],32:[2,84],49:[2,84],51:[2,84],78:[2,84],79:[2,84],80:[2,84],81:[2,84],82:[2,84],84:[2,84],86:99,87:[1,100],88:[1,101]},{19:[2,88],32:[2,88],49:[2,88],51:[2,88],78:[2,88],79:[2,88],80:[2,88],81:[2,88],82:[2,88],84:[2,88],87:[2,88],88:[2,88]},{8:72,31:[1,79],49:[1,8],60:102,67:[1,69],68:[1,71],73:[1,70],74:[1,73],75:74,76:75,83:76,85:77,89:[1,78]},{19:[1,103]},{8:82,19:[2,55],49:[1,8],64:104,65:81},{42:[1,105]},{33:[2,49],63:[2,49]},{8:60,49:[1,8],50:106},{8:52,49:[1,8],52:107},{32:[2,57]},{66:108,67:[1,109],68:[1,110]},{42:[2,44],49:[2,44]},{34:111,35:112,38:113,39:[1,114]},{12:[2,50],29:[2,50],30:[2,50],31:[2,50],49:[2,50],55:[2,50],59:[2,50]},{8:72,31:[1,79],49:[1,8],60:116,67:[1,69],68:[1,71],72:115,73:[1,70],74:[1,73],75:74,76:75,83:76,85:77,89:[1,78]},{8:119,31:[1,79],49:[1,8],75:117,76:118,83:76,85:77,89:[1,78]},{31:[2,75],49:[2,75],89:[2,75]},{31:[2,76],49:[2,76],89:[2,76]},{31:[2,77],49:[2,77],89:[2,77]},{31:[2,78],49:[2,78],89:[2,78]},{31:[2,79],49:[2,79],89:[2,79]},{8:119,31:[1,79],49:[1,8],76:120,83:121,85:77,89:[1,78]},{8:119,31:[1,79],49:[1,8],83:122,85:123,89:[1,78]},{31:[2,85],49:[2,85],89:[2,85]},{31:[2,86],49:[2,86],89:[2,86]},{32:[1,124]},{12:[2,51],29:[2,51],30:[2,51],31:[2,51],49:[2,51],55:[2,51],59:[2,51]},{19:[2,54]},{8:72,31:[1,79],49:[1,8],60:125,67:[1,69],68:[1,71],73:[1,70],74:[1,73],75:74,76:75,83:76,85:77,89:[1,78]},{32:[2,41]},{42:[1,126]},{32:[2,60],51:[2,60]},{32:[2,61],51:[2,61]},{32:[2,62],51:[2,62]},{12:[2,23],29:[2,23],30:[2,23],55:[2,23],59:[2,23]},{12:[2,25],29:[2,25],30:[2,25],36:[1,127],55:[2,25],59:[2,25]},{12:[2,27],29:[2,27],30:[2,27],35:128,36:[2,27],37:[2,27],38:113,39:[1,114],55:[2,27],59:[2,27]},{8:129,49:[1,8]},{32:[1,130]},{32:[2,66],51:[1,131]},{19:[2,73],32:[2,73],49:[2,73],51:[2,73]},{19:[2,74],32:[2,74],49:[2,74],51:[2,74],77:92,78:[1,93],79:[1,94],80:[1,95],81:[1,96],82:[1,97]},{19:[2,87],32:[2,87],49:[2,87],51:[2,87],78:[2,87],79:[2,87],80:[2,87],81:[2,87],82:[2,87],84:[2,87],87:[2,87],88:[2,87]},{19:[2,80],32:[2,80],49:[2,80],51:[2,80],78:[2,80],79:[2,80],80:[2,80],81:[2,80],82:[2,80]},{19:[2,81],32:[2,81],49:[2,81],51:[2,81],78:[2,81],79:[2,81],80:[2,81],81:[2,81],82:[2,81],84:[1,98]},{19:[2,82],32:[2,82],49:[2,82],51:[2,82],78:[2,82],79:[2,82],80:[2,82],81:[2,82],82:[2,82],84:[2,82]},{19:[2,83],32:[2,83],49:[2,83],51:[2,83],78:[2,83],79:[2,83],80:[2,83],81:[2,83],82:[2,83],84:[2,83],86:99,87:[1,100],88:[1,101]},{19:[2,89],32:[2,89],49:[2,89],51:[2,89],78:[2,89],79:[2,89],80:[2,89],81:[2,89],82:[2,89],84:[2,89],87:[2,89],88:[2,89]},{19:[2,56],49:[2,56]},{8:72,31:[1,79],49:[1,8],60:132,67:[1,69],68:[1,71],73:[1,70],74:[1,73],75:74,76:75,83:76,85:77,89:[1,78]},{35:133,38:113,39:[1,114]},{12:[2,26],29:[2,26],30:[2,26],36:[2,26],37:[2,26],55:[2,26],59:[2,26]},{40:[1,134]},{19:[2,70],32:[2,70],49:[2,70],51:[2,70]},{8:72,31:[1,79],49:[1,8],60:116,67:[1,69],68:[1,71],72:135,73:[1,70],74:[1,73],75:74,76:75,83:76,85:77,89:[1,78]},{19:[1,136]},{37:[1,137]},{12:[2,28],29:[2,28],30:[2,28],36:[2,28],37:[2,28],39:[2,28],41:138,42:[1,139],44:[1,140],55:[2,28],59:[2,28]},{32:[2,65]},{12:[2,47],29:[2,47],30:[2,47],55:[2,47],59:[2,47]},{12:[2,24],29:[2,24],30:[2,24],55:[2,24],59:[2,24]},{12:[2,29],29:[2,29],30:[2,29],36:[2,29],37:[2,29],39:[2,29],55:[2,29],59:[2,29]},{43:141,45:[1,142],47:[1,143],48:[1,144]},{43:145,45:[1,142],47:[1,143],48:[1,144]},{12:[2,31],29:[2,31],30:[2,31],36:[2,31],37:[2,31],39:[2,31],44:[1,146],55:[2,31],59:[2,31]},{46:[1,147]},{46:[1,148]},{46:[1,149]},{12:[2,32],29:[2,32],30:[2,32],36:[2,32],37:[2,32],39:[2,32],55:[2,32],59:[2,32]},{43:150,45:[1,142],47:[1,143],48:[1,144]},{12:[2,36],29:[2,36],30:[2,36],36:[2,36],37:[2,36],39:[2,36],44:[2,36],47:[1,151],48:[1,152],55:[2,36],59:[2,36]},{48:[1,153]},{12:[2,37],29:[2,37],30:[2,37],36:[2,37],37:[2,37],39:[2,37],44:[2,37],55:[2,37],59:[2,37]},{12:[2,30],29:[2,30],30:[2,30],36:[2,30],37:[2,30],39:[2,30],55:[2,30],59:[2,30]},{46:[1,154]},{46:[1,155]},{46:[1,156]},{48:[1,157]},{12:[2,35],29:[2,35],30:[2,35],36:[2,35],37:[2,35],39:[2,35],44:[2,35],55:[2,35],59:[2,35]},{12:[2,34],29:[2,34],30:[2,34],36:[2,34],37:[2,34],39:[2,34],44:[2,34],55:[2,34],59:[2,34]},{46:[1,158]},{12:[2,33],29:[2,33],30:[2,33],36:[2,33],37:[2,33],39:[2,33],44:[2,33],55:[2,33],59:[2,33]}],
defaultActions: {5:[2,1],6:[2,3],13:[2,7],14:[2,8],27:[2,38],28:[2,13],41:[2,16],42:[2,17],86:[2,57],104:[2,54],106:[2,41],135:[2,65]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore blank */
break;
case 1:/* ignore blank */
break;
case 2:/* ignore comment */
break;
case 3:/* ignore comment */
break;
case 4:return 7;
break;
case 5:return 9;
break;
case 6:return 'USES';
break;
case 7:return 70;
break;
case 8:return 71;
break;
case 9:return 23;
break;
case 10:return 'TEST';
break;
case 11:return 'IMAGE';
break;
case 12:return 16;
break;
case 13:return 'NEEDS';
break;
case 14:return 59;
break;
case 15:return 30;
break;
case 16:return 42;
break;
case 17:return 44;
break;
case 18:return 45;
break;
case 19:return 47;
break;
case 20:return 48;
break;
case 21:return 'MAP';
break;
case 22:return 'FOR';
break;
case 23:return 68;
break;
case 24:return 67;
break;
case 25:return 73;
break;
case 26:return 49;
break;
case 27:return 'REDUCE';
break;
case 28:return 'IF';
break;
case 29:return 'INT';
break;
case 30:return 'LONG';
break;
case 31:return 'FLOAT';
break;
case 32:return 'DOUBLE';
break;
case 33:return 'ELSE';
break;
case 34:return 'ELSEIF'; 
break;
case 35:return 55;
break;
case 36:return 57;
break;
case 37:return 'XPATHSTART';
break;
case 38:return 'XPATHEND';
break;
case 39:return 39;
break;
case 40:return 40;
break;
case 41:return 'ESCAPE';	
break;
case 42:return 'ELLIPSIS';
break;
case 43:return 78;
break;
case 44:return 79;
break;
case 45:return 80;
break;
case 46:return 81;
break;
case 47:return 82;
break;
case 48:return 56;
break;
case 49:return 33;
break;
case 50:return 63;
break;
case 51:return 91;
break;
case 52:return 92;
break;
case 53:return 87;
break;
case 54:return 88;
break;
case 55:return 93;
break;
case 56:return 21;
break;
case 57:return 94;
break;
case 58:return 96;
break;
case 59:return 98;
break;
case 60:return 10;
break;
case 61:return 12;
break;
case 62:return 31;
break;
case 63:return 32;
break;
case 64:return 'LBRACKET';
break;
case 65:return 'RBRACKET';
break;
case 66:return 'COLON';
break;
case 67:return 19;
break;
case 68:return 51;
break;
case 69:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 74;
break;
case 70:return 'DOT';
break;
case 71:
					if (typeof yy._iemitstack === 'undefined') {
						yy._iemitstack = [0];
					}
					var indentation = lexeme.length;

				    col += indentation;
				
				    if (indentation > yy._iemitstack[0]) {
				        yy._iemitstack.unshift(indentation);
				        return "INDENT";
				    }
				
				    var tokens = [];
				
				    while (indentation < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				
				    if (tokens.length) return tokens;
				
break;
case 72:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\s*\n\s*)/,/^(?:\/\/.*)/,/^(?:\/\*.*\*\/)/,/^(?:theory\b)/,/^(?:extends\b)/,/^(?:uses\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:ns\b)/,/^(?:test\b)/,/^(?:image\b)/,/^(?:data\b)/,/^(?:needs\b)/,/^(?:fn\b)/,/^(?:ff\b)/,/^(?:->)/,/^(?:<-)/,/^(?:style\b)/,/^(?:where\b)/,/^(?:yield\b)/,/^(?:map\b)/,/^(?:for\b)/,/^(?:null\b)/,/^(?:([0-9])+)/,/^(?:#([0-9A-Fa-f])+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:reduce\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:else\s+if\b)/,/^(?:\[--)/,/^(?:--\])/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\\)/,/^(?:\.\.\.)/,/^(?:eq|==)/,/^(?:gt|>)/,/^(?:lt|<)/,/^(?:gte|>=)/,/^(?:lte|<=)/,/^(?:::)/,/^(?:=)/,/^(?:@=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\|\||or\b)/,/^(?:\|)/,/^(?:&&|and\b)/,/^(?:not|!)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:".*")/,/^(?:\.)/,/^(?:(?=^)\s*(?=gm))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = theory;
exports.Parser = theory.Parser;
exports.parse = function () { return theory.parse.apply(theory, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}