/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var theory = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"file_repetition0":4,"ENDOFFILE":5,"namespace":6,"PREFIX":7,"id":8,"INDENT":9,"namespace_repetition0":10,"DEDENT":11,"theory":12,"THEORY":13,"theory_option0":14,"theorybody":15,"theorybody_repetition0":16,"def":17,"sdef":18,"fdef":19,"fragfunc":20,"treefrag":21,"data":22,"DATA":23,"paramlist":24,"dtypelist":25,"EOL":26,"paramdef":27,"PIPE":28,"tfnode":29,"treefrag_option0":30,"XPATHSTART":31,"leafid":32,"tfnode_option0":33,"XPATHEND":34,"tfnode_option1":35,"leafid_repetition_plus0":36,"tf_islist":37,"tf_islist_repetition_plus0":38,"FRAGFUNC":39,"LPAREN":40,"fragfunc_option0":41,"RPAREN":42,"IMPLICATION":43,"fftree":44,"ffnode":45,"fftree_option0":46,"LFFNODE":47,"ffid":48,"RFFNODE":49,"ELLIPSIS":50,"ffimplist":51,"fragexpr":52,"REVIMPLICATION":53,"STYLE":54,"expression":55,"WHERE":56,"YIELD":57,"ID":58,"tuplevarlist":59,"COMMA":60,"typedef":61,"LBRACK":62,"RBRACK":63,"SETSTART":64,"TYPIFY":65,"SETEND":66,"assignment_list":67,"FUNCTION":68,"lside":69,"assignment":70,"ASSIGN":71,"NEWLINE":72,"CASEASSIGN":73,"caselist":74,"casedef":75,"lit":76,"NATLITERAL":77,"NULL":78,"boollit":79,"TRUE":80,"FALSE":81,"elist":82,"atom":83,"constant":84,"STRING_LIT":85,"postfix_expression":86,"LBRACKET":87,"RBRACKET":88,"postfix_expression_option0":89,"INC_OP":90,"DEC_OP":91,"EXCUSEME":92,"unary_expression":93,"unary_expression_option0":94,"power_expression":95,"POWER":96,"muldivmod":97,"TIMES":98,"DIVIDE":99,"MOD":100,"multiplicative_expression":101,"MULDIVMOD":102,"additive_expression":103,"ADDSUB":104,"shift":105,"SHIFTL":106,"SHIFTR":107,"shift_expression":108,"compare":109,"GT":110,"LT":111,"GTE":112,"LTE":113,"relational_expression":114,"equiv":115,"EQ":116,"NEQ":117,"equivalence_expression":118,"and_expression":119,"B_AND":120,"xor_expression":121,"XOR":122,"ior_expression":123,"B_OR":124,"logical_and_expression":125,"AND":126,"logical_or_expression":127,"OR":128,"conditional_expression":129,"IF":130,"ELSE":131,"ENDIF":132,"unary_op":133,"NOT":134,"number":135,"integer":136,"hexint":137,"BINNATLITERAL":138,"float":139,"color":140,"HEXCOLOR":141,"MINUS":142,"HEXNATLITERAL":143,"DOT":144,"f":145,"array":146,"dict":147,"LBRACE":148,"colondeflist":149,"RBRACE":150,"string":151,"COLON":152,"file_repetition0_group0":153,"namespace_repetition0_group0":154,"EXTENDS":155,"theorybody_repetition0_group0":156,"treefrag_option0_repetition_plus0":157,"leafid_repetition_plus0_group0":158,"tf_islist_repetition_plus0_option0":159,"AT":160,"IS":161,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",7:"PREFIX",9:"INDENT",11:"DEDENT",13:"THEORY",23:"DATA",26:"EOL",28:"PIPE",31:"XPATHSTART",34:"XPATHEND",39:"FRAGFUNC",40:"LPAREN",42:"RPAREN",43:"IMPLICATION",47:"LFFNODE",49:"RFFNODE",50:"ELLIPSIS",53:"REVIMPLICATION",54:"STYLE",56:"WHERE",57:"YIELD",58:"ID",60:"COMMA",62:"LBRACK",63:"RBRACK",64:"SETSTART",65:"TYPIFY",66:"SETEND",68:"FUNCTION",71:"ASSIGN",72:"NEWLINE",73:"CASEASSIGN",77:"NATLITERAL",78:"NULL",80:"TRUE",81:"FALSE",85:"STRING_LIT",87:"LBRACKET",88:"RBRACKET",90:"INC_OP",91:"DEC_OP",92:"EXCUSEME",96:"POWER",98:"TIMES",99:"DIVIDE",100:"MOD",102:"MULDIVMOD",104:"ADDSUB",106:"SHIFTL",107:"SHIFTR",110:"GT",111:"LT",112:"GTE",113:"LTE",116:"EQ",117:"NEQ",120:"B_AND",122:"XOR",124:"B_OR",126:"AND",128:"OR",130:"IF",131:"ELSE",132:"ENDIF",134:"NOT",138:"BINNATLITERAL",141:"HEXCOLOR",142:"MINUS",143:"HEXNATLITERAL",144:"DOT",145:"f",148:"LBRACE",150:"RBRACE",151:"string",152:"COLON",155:"EXTENDS",160:"AT",161:"IS"},
productions_: [0,[3,2],[6,5],[12,6],[15,1],[17,1],[17,1],[17,1],[17,1],[22,4],[25,4],[25,1],[21,2],[29,5],[32,1],[37,1],[20,7],[44,2],[45,3],[48,1],[48,1],[51,4],[51,2],[51,2],[52,6],[52,4],[52,4],[52,2],[52,2],[8,1],[59,3],[59,1],[61,1],[61,3],[18,6],[18,4],[19,8],[69,1],[69,3],[70,4],[70,4],[67,1],[67,2],[74,2],[74,0],[75,4],[24,3],[24,1],[27,1],[76,1],[76,1],[79,1],[79,1],[82,3],[82,1],[82,0],[83,1],[83,1],[83,1],[83,3],[86,1],[86,4],[86,4],[86,2],[86,2],[86,2],[93,2],[95,1],[95,3],[97,1],[97,1],[97,1],[101,1],[101,3],[103,1],[103,3],[105,1],[105,1],[108,1],[108,3],[109,1],[109,1],[109,1],[109,1],[114,1],[114,3],[115,1],[115,1],[118,1],[118,3],[119,1],[119,3],[121,1],[121,3],[123,1],[123,3],[125,1],[125,3],[127,1],[127,3],[129,1],[129,6],[55,1],[133,1],[84,1],[135,1],[135,1],[135,1],[135,1],[135,1],[140,1],[136,2],[136,1],[137,2],[137,1],[139,3],[139,4],[139,2],[146,3],[147,3],[149,5],[149,3],[149,0],[153,1],[153,1],[4,0],[4,2],[154,1],[154,1],[154,1],[10,0],[10,2],[14,0],[14,2],[156,1],[156,1],[16,0],[16,2],[157,1],[157,2],[30,0],[30,3],[33,0],[33,2],[35,0],[35,4],[158,1],[158,1],[36,1],[36,2],[159,0],[159,2],[38,4],[38,5],[41,0],[41,1],[46,0],[46,3],[89,0],[89,1],[94,0],[94,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; 
break;
case 3: this.$ = new yy.Theory($$[$0-4], $$[$0-1], $$[$0-2]); 
break;
case 10: this.$ = $$[$0-1]; this.$.unshift($$[$0-3]); 
break;
case 11: this.$ = [$$[$0]]; 
break;
case 30: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 31: this.$ = [ $$[$0] ]; 
break;
case 32: this.$ = new yy.Type($$[$0]); 
break;
case 33: this.$ = new yy.Type("Array", $$[$0-2]); 
break;
case 34: this.$ = new yy.SetDef($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 35: this.$ = new yy.SetDef($$[$0-2], $$[$0-2], $$[$0]); 
break;
case 36: this.$ = new yy.FnDef($$[$0-6], $$[$0-4], null, $$[$0-1]); 
break;
case 37: this.$ = [ $$[$0] ]; 
break;
case 38: this.$ = $$[$0-1]; 
break;
case 39: this.$ = new yy.Assignment($$[$0-3], $$[$0-1]); 
break;
case 40: this.$ = new yy.CaseAssignment($$[$0-3], $$[$0-1]); 
break;
case 41: this.$ = [ $$[$0] ]; 
break;
case 42: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 43: this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 44: this.$ = []; 
break;
case 45: this.$ = new yy.CaseDef($$[$0-3], $$[$0-1]); 
break;
case 46: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 47: this.$ = [ $$[$0] ]; 
break;
case 48: this.$ = new yy.ParamDef(typedef, id); 
break;
case 49: this.$ = parseInt($$[$0]); 
break;
case 50: this.$ = null; 
break;
case 51: this.$ = true; 
break;
case 52: this.$ = false; 
break;
case 53: this.$ = $$[$0]; this.$.unshift(e); 
break;
case 54: this.$ = [ e ]; 
break;
case 125:this.$ = [];
break;
case 126:$$[$0-1].push($$[$0]);
break;
case 130:this.$ = [];
break;
case 131:$$[$0-1].push($$[$0]);
break;
case 136:this.$ = [];
break;
case 137:$$[$0-1].push($$[$0]);
break;
case 138:this.$ = [$$[$0]];
break;
case 139:$$[$0-1].push($$[$0]);
break;
case 148:this.$ = [$$[$0]];
break;
case 149:$$[$0-1].push($$[$0]);
break;
case 152:this.$ = [$$[$0-3]];
break;
case 153:$$[$0-4].push($$[$0-3]);
break;
}
},
table: [{3:1,4:2,5:[2,125],7:[2,125],72:[2,125]},{1:[3]},{5:[1,3],6:5,7:[1,7],72:[1,6],153:4},{1:[2,1]},{5:[2,126],7:[2,126],72:[2,126]},{5:[2,123],7:[2,123],72:[2,123]},{5:[2,124],7:[2,124],72:[2,124]},{8:8,58:[1,9]},{9:[1,10]},{9:[2,29],26:[2,29],28:[2,29],34:[2,29],40:[2,29],42:[2,29],43:[2,29],49:[2,29],58:[2,29],60:[2,29],65:[2,29],66:[2,29],71:[2,29],72:[2,29],73:[2,29],77:[2,29],85:[2,29],87:[2,29],88:[2,29],90:[2,29],91:[2,29],92:[2,29],96:[2,29],102:[2,29],104:[2,29],106:[2,29],107:[2,29],110:[2,29],111:[2,29],112:[2,29],113:[2,29],120:[2,29],122:[2,29],124:[2,29],126:[2,29],128:[2,29],130:[2,29],131:[2,29],132:[2,29],134:[2,29],138:[2,29],141:[2,29],142:[2,29],143:[2,29],144:[2,29],155:[2,29],161:[2,29]},{10:11,11:[2,130],13:[2,130],23:[2,130],72:[2,130]},{11:[1,12],12:14,13:[1,17],22:15,23:[1,18],72:[1,16],154:13},{5:[2,2],7:[2,2],72:[2,2]},{11:[2,131],13:[2,131],23:[2,131],72:[2,131]},{11:[2,127],13:[2,127],23:[2,127],72:[2,127]},{11:[2,128],13:[2,128],23:[2,128],72:[2,128]},{11:[2,129],13:[2,129],23:[2,129],72:[2,129]},{8:19,58:[1,9]},{24:20,27:21,40:[2,160],55:22,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{9:[2,132],14:38,155:[1,39]},{25:40,27:41,40:[2,160],55:22,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,47],42:[2,47],58:[2,47],60:[1,42],77:[2,47],85:[2,47],134:[2,47],138:[2,47],141:[2,47],142:[2,47],143:[2,47]},{26:[2,48],28:[2,48],40:[2,48],42:[2,48],58:[2,48],60:[2,48],77:[2,48],85:[2,48],130:[1,43],134:[2,48],138:[2,48],141:[2,48],142:[2,48],143:[2,48]},{26:[2,102],28:[2,102],40:[2,102],42:[2,102],58:[2,102],60:[2,102],72:[2,102],77:[2,102],85:[2,102],88:[2,102],130:[2,102],132:[2,102],134:[2,102],138:[2,102],141:[2,102],142:[2,102],143:[2,102]},{26:[2,100],28:[2,100],40:[2,100],42:[2,100],58:[2,100],60:[2,100],72:[2,100],77:[2,100],85:[2,100],88:[2,100],128:[1,44],130:[2,100],132:[2,100],134:[2,100],138:[2,100],141:[2,100],142:[2,100],143:[2,100]},{26:[2,98],28:[2,98],40:[2,98],42:[2,98],58:[2,98],60:[2,98],72:[2,98],77:[2,98],85:[2,98],88:[2,98],126:[1,45],128:[2,98],130:[2,98],131:[2,98],132:[2,98],134:[2,98],138:[2,98],141:[2,98],142:[2,98],143:[2,98]},{26:[2,96],28:[2,96],40:[2,96],42:[2,96],58:[2,96],60:[2,96],72:[2,96],77:[2,96],85:[2,96],88:[2,96],124:[1,46],126:[2,96],128:[2,96],130:[2,96],131:[2,96],132:[2,96],134:[2,96],138:[2,96],141:[2,96],142:[2,96],143:[2,96]},{26:[2,94],28:[2,94],40:[2,94],42:[2,94],58:[2,94],60:[2,94],72:[2,94],77:[2,94],85:[2,94],88:[2,94],122:[1,47],124:[2,94],126:[2,94],128:[2,94],130:[2,94],131:[2,94],132:[2,94],134:[2,94],138:[2,94],141:[2,94],142:[2,94],143:[2,94]},{26:[2,92],28:[2,92],40:[2,92],42:[2,92],58:[2,92],60:[2,92],72:[2,92],77:[2,92],85:[2,92],88:[2,92],120:[1,48],122:[2,92],124:[2,92],126:[2,92],128:[2,92],130:[2,92],131:[2,92],132:[2,92],134:[2,92],138:[2,92],141:[2,92],142:[2,92],143:[2,92]},{26:[2,90],28:[2,90],40:[2,90],42:[2,90],58:[2,90],60:[2,90],72:[2,90],77:[2,90],85:[2,90],88:[2,90],109:49,110:[1,50],111:[1,51],112:[1,52],113:[1,53],120:[2,90],122:[2,90],124:[2,90],126:[2,90],128:[2,90],130:[2,90],131:[2,90],132:[2,90],134:[2,90],138:[2,90],141:[2,90],142:[2,90],143:[2,90]},{26:[2,84],28:[2,84],40:[2,84],42:[2,84],58:[2,84],60:[2,84],72:[2,84],77:[2,84],85:[2,84],88:[2,84],105:54,106:[1,55],107:[1,56],110:[2,84],111:[2,84],112:[2,84],113:[2,84],120:[2,84],122:[2,84],124:[2,84],126:[2,84],128:[2,84],130:[2,84],131:[2,84],132:[2,84],134:[2,84],138:[2,84],141:[2,84],142:[2,84],143:[2,84]},{26:[2,78],28:[2,78],40:[2,78],42:[2,78],58:[2,78],60:[2,78],72:[2,78],77:[2,78],85:[2,78],88:[2,78],104:[1,57],106:[2,78],107:[2,78],110:[2,78],111:[2,78],112:[2,78],113:[2,78],120:[2,78],122:[2,78],124:[2,78],126:[2,78],128:[2,78],130:[2,78],131:[2,78],132:[2,78],134:[2,78],138:[2,78],141:[2,78],142:[2,78],143:[2,78]},{26:[2,74],28:[2,74],40:[2,74],42:[2,74],58:[2,74],60:[2,74],72:[2,74],77:[2,74],85:[2,74],88:[2,74],102:[1,58],104:[2,74],106:[2,74],107:[2,74],110:[2,74],111:[2,74],112:[2,74],113:[2,74],120:[2,74],122:[2,74],124:[2,74],126:[2,74],128:[2,74],130:[2,74],131:[2,74],132:[2,74],134:[2,74],138:[2,74],141:[2,74],142:[2,74],143:[2,74]},{26:[2,72],28:[2,72],40:[2,72],42:[2,72],58:[2,72],60:[2,72],72:[2,72],77:[2,72],85:[2,72],88:[2,72],96:[1,59],102:[2,72],104:[2,72],106:[2,72],107:[2,72],110:[2,72],111:[2,72],112:[2,72],113:[2,72],120:[2,72],122:[2,72],124:[2,72],126:[2,72],128:[2,72],130:[2,72],131:[2,72],132:[2,72],134:[2,72],138:[2,72],141:[2,72],142:[2,72],143:[2,72]},{26:[2,67],28:[2,67],40:[2,67],42:[2,67],58:[2,67],60:[2,67],72:[2,67],77:[2,67],85:[2,67],88:[2,67],96:[2,67],102:[2,67],104:[2,67],106:[2,67],107:[2,67],110:[2,67],111:[2,67],112:[2,67],113:[2,67],120:[2,67],122:[2,67],124:[2,67],126:[2,67],128:[2,67],130:[2,67],131:[2,67],132:[2,67],134:[2,67],138:[2,67],141:[2,67],142:[2,67],143:[2,67]},{8:62,40:[1,65],58:[1,9],77:[1,73],83:61,84:63,85:[1,64],86:60,135:66,136:67,137:68,138:[1,69],139:70,140:71,141:[1,75],142:[1,72],143:[1,74]},{40:[2,161],58:[2,161],77:[2,161],85:[2,161],138:[2,161],141:[2,161],142:[2,161],143:[2,161]},{40:[2,103],58:[2,103],77:[2,103],85:[2,103],138:[2,103],141:[2,103],142:[2,103],143:[2,103]},{9:[1,76]},{8:77,58:[1,9]},{26:[1,78]},{26:[2,11],28:[1,79]},{24:80,27:21,40:[2,160],55:22,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:81,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:82,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:83,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:84,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:85,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:86,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:87,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,80],58:[2,80],77:[2,80],85:[2,80],134:[2,80],138:[2,80],141:[2,80],142:[2,80],143:[2,80]},{40:[2,81],58:[2,81],77:[2,81],85:[2,81],134:[2,81],138:[2,81],141:[2,81],142:[2,81],143:[2,81]},{40:[2,82],58:[2,82],77:[2,82],85:[2,82],134:[2,82],138:[2,82],141:[2,82],142:[2,82],143:[2,82]},{40:[2,83],58:[2,83],77:[2,83],85:[2,83],134:[2,83],138:[2,83],141:[2,83],142:[2,83],143:[2,83]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:88,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,76],58:[2,76],77:[2,76],85:[2,76],134:[2,76],138:[2,76],141:[2,76],142:[2,76],143:[2,76]},{40:[2,77],58:[2,77],77:[2,77],85:[2,77],134:[2,77],138:[2,77],141:[2,77],142:[2,77],143:[2,77]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:89,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:90,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,160],58:[2,160],77:[2,160],85:[2,160],93:91,94:35,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{26:[2,66],28:[2,66],40:[1,93],42:[2,66],58:[2,66],60:[2,66],72:[2,66],77:[2,66],85:[2,66],87:[1,92],88:[2,66],90:[1,94],91:[1,95],92:[1,96],96:[2,66],102:[2,66],104:[2,66],106:[2,66],107:[2,66],110:[2,66],111:[2,66],112:[2,66],113:[2,66],120:[2,66],122:[2,66],124:[2,66],126:[2,66],128:[2,66],130:[2,66],131:[2,66],132:[2,66],134:[2,66],138:[2,66],141:[2,66],142:[2,66],143:[2,66]},{26:[2,60],28:[2,60],40:[2,60],42:[2,60],58:[2,60],60:[2,60],72:[2,60],77:[2,60],85:[2,60],87:[2,60],88:[2,60],90:[2,60],91:[2,60],92:[2,60],96:[2,60],102:[2,60],104:[2,60],106:[2,60],107:[2,60],110:[2,60],111:[2,60],112:[2,60],113:[2,60],120:[2,60],122:[2,60],124:[2,60],126:[2,60],128:[2,60],130:[2,60],131:[2,60],132:[2,60],134:[2,60],138:[2,60],141:[2,60],142:[2,60],143:[2,60]},{26:[2,56],28:[2,56],40:[2,56],42:[2,56],58:[2,56],60:[2,56],72:[2,56],77:[2,56],85:[2,56],87:[2,56],88:[2,56],90:[2,56],91:[2,56],92:[2,56],96:[2,56],102:[2,56],104:[2,56],106:[2,56],107:[2,56],110:[2,56],111:[2,56],112:[2,56],113:[2,56],120:[2,56],122:[2,56],124:[2,56],126:[2,56],128:[2,56],130:[2,56],131:[2,56],132:[2,56],134:[2,56],138:[2,56],141:[2,56],142:[2,56],143:[2,56]},{26:[2,57],28:[2,57],40:[2,57],42:[2,57],58:[2,57],60:[2,57],72:[2,57],77:[2,57],85:[2,57],87:[2,57],88:[2,57],90:[2,57],91:[2,57],92:[2,57],96:[2,57],102:[2,57],104:[2,57],106:[2,57],107:[2,57],110:[2,57],111:[2,57],112:[2,57],113:[2,57],120:[2,57],122:[2,57],124:[2,57],126:[2,57],128:[2,57],130:[2,57],131:[2,57],132:[2,57],134:[2,57],138:[2,57],141:[2,57],142:[2,57],143:[2,57]},{26:[2,58],28:[2,58],40:[2,58],42:[2,58],58:[2,58],60:[2,58],72:[2,58],77:[2,58],85:[2,58],87:[2,58],88:[2,58],90:[2,58],91:[2,58],92:[2,58],96:[2,58],102:[2,58],104:[2,58],106:[2,58],107:[2,58],110:[2,58],111:[2,58],112:[2,58],113:[2,58],120:[2,58],122:[2,58],124:[2,58],126:[2,58],128:[2,58],130:[2,58],131:[2,58],132:[2,58],134:[2,58],138:[2,58],141:[2,58],142:[2,58],143:[2,58]},{40:[2,160],55:97,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{26:[2,104],28:[2,104],40:[2,104],42:[2,104],58:[2,104],60:[2,104],72:[2,104],77:[2,104],85:[2,104],87:[2,104],88:[2,104],90:[2,104],91:[2,104],92:[2,104],96:[2,104],102:[2,104],104:[2,104],106:[2,104],107:[2,104],110:[2,104],111:[2,104],112:[2,104],113:[2,104],120:[2,104],122:[2,104],124:[2,104],126:[2,104],128:[2,104],130:[2,104],131:[2,104],132:[2,104],134:[2,104],138:[2,104],141:[2,104],142:[2,104],143:[2,104]},{26:[2,105],28:[2,105],40:[2,105],42:[2,105],58:[2,105],60:[2,105],72:[2,105],77:[2,105],85:[2,105],87:[2,105],88:[2,105],90:[2,105],91:[2,105],92:[2,105],96:[2,105],102:[2,105],104:[2,105],106:[2,105],107:[2,105],110:[2,105],111:[2,105],112:[2,105],113:[2,105],120:[2,105],122:[2,105],124:[2,105],126:[2,105],128:[2,105],130:[2,105],131:[2,105],132:[2,105],134:[2,105],138:[2,105],141:[2,105],142:[2,105],143:[2,105],144:[1,98],145:[1,99]},{26:[2,106],28:[2,106],40:[2,106],42:[2,106],58:[2,106],60:[2,106],72:[2,106],77:[2,106],85:[2,106],87:[2,106],88:[2,106],90:[2,106],91:[2,106],92:[2,106],96:[2,106],102:[2,106],104:[2,106],106:[2,106],107:[2,106],110:[2,106],111:[2,106],112:[2,106],113:[2,106],120:[2,106],122:[2,106],124:[2,106],126:[2,106],128:[2,106],130:[2,106],131:[2,106],132:[2,106],134:[2,106],138:[2,106],141:[2,106],142:[2,106],143:[2,106]},{26:[2,107],28:[2,107],40:[2,107],42:[2,107],58:[2,107],60:[2,107],72:[2,107],77:[2,107],85:[2,107],87:[2,107],88:[2,107],90:[2,107],91:[2,107],92:[2,107],96:[2,107],102:[2,107],104:[2,107],106:[2,107],107:[2,107],110:[2,107],111:[2,107],112:[2,107],113:[2,107],120:[2,107],122:[2,107],124:[2,107],126:[2,107],128:[2,107],130:[2,107],131:[2,107],132:[2,107],134:[2,107],138:[2,107],141:[2,107],142:[2,107],143:[2,107]},{26:[2,108],28:[2,108],40:[2,108],42:[2,108],58:[2,108],60:[2,108],72:[2,108],77:[2,108],85:[2,108],87:[2,108],88:[2,108],90:[2,108],91:[2,108],92:[2,108],96:[2,108],102:[2,108],104:[2,108],106:[2,108],107:[2,108],110:[2,108],111:[2,108],112:[2,108],113:[2,108],120:[2,108],122:[2,108],124:[2,108],126:[2,108],128:[2,108],130:[2,108],131:[2,108],132:[2,108],134:[2,108],138:[2,108],141:[2,108],142:[2,108],143:[2,108]},{26:[2,109],28:[2,109],40:[2,109],42:[2,109],58:[2,109],60:[2,109],72:[2,109],77:[2,109],85:[2,109],87:[2,109],88:[2,109],90:[2,109],91:[2,109],92:[2,109],96:[2,109],102:[2,109],104:[2,109],106:[2,109],107:[2,109],110:[2,109],111:[2,109],112:[2,109],113:[2,109],120:[2,109],122:[2,109],124:[2,109],126:[2,109],128:[2,109],130:[2,109],131:[2,109],132:[2,109],134:[2,109],138:[2,109],141:[2,109],142:[2,109],143:[2,109]},{77:[1,100],143:[1,101]},{26:[2,112],28:[2,112],40:[2,112],42:[2,112],58:[2,112],60:[2,112],72:[2,112],77:[2,112],85:[2,112],87:[2,112],88:[2,112],90:[2,112],91:[2,112],92:[2,112],96:[2,112],102:[2,112],104:[2,112],106:[2,112],107:[2,112],110:[2,112],111:[2,112],112:[2,112],113:[2,112],120:[2,112],122:[2,112],124:[2,112],126:[2,112],128:[2,112],130:[2,112],131:[2,112],132:[2,112],134:[2,112],138:[2,112],141:[2,112],142:[2,112],143:[2,112],144:[2,112],145:[2,112]},{26:[2,114],28:[2,114],40:[2,114],42:[2,114],58:[2,114],60:[2,114],72:[2,114],77:[2,114],85:[2,114],87:[2,114],88:[2,114],90:[2,114],91:[2,114],92:[2,114],96:[2,114],102:[2,114],104:[2,114],106:[2,114],107:[2,114],110:[2,114],111:[2,114],112:[2,114],113:[2,114],120:[2,114],122:[2,114],124:[2,114],126:[2,114],128:[2,114],130:[2,114],131:[2,114],132:[2,114],134:[2,114],138:[2,114],141:[2,114],142:[2,114],143:[2,114]},{26:[2,110],28:[2,110],40:[2,110],42:[2,110],58:[2,110],60:[2,110],72:[2,110],77:[2,110],85:[2,110],87:[2,110],88:[2,110],90:[2,110],91:[2,110],92:[2,110],96:[2,110],102:[2,110],104:[2,110],106:[2,110],107:[2,110],110:[2,110],111:[2,110],112:[2,110],113:[2,110],120:[2,110],122:[2,110],124:[2,110],126:[2,110],128:[2,110],130:[2,110],131:[2,110],132:[2,110],134:[2,110],138:[2,110],141:[2,110],142:[2,110],143:[2,110]},{11:[2,136],15:102,16:103,31:[2,136],39:[2,136],64:[2,136],68:[2,136],72:[2,136]},{9:[2,133]},{11:[2,9],13:[2,9],23:[2,9],72:[2,9]},{25:104,27:41,40:[2,160],55:22,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{40:[2,46],42:[2,46],58:[2,46],77:[2,46],85:[2,46],134:[2,46],138:[2,46],141:[2,46],142:[2,46],143:[2,46]},{128:[1,44],131:[1,105]},{26:[2,99],28:[2,99],40:[2,99],42:[2,99],58:[2,99],60:[2,99],72:[2,99],77:[2,99],85:[2,99],88:[2,99],126:[1,45],128:[2,99],130:[2,99],131:[2,99],132:[2,99],134:[2,99],138:[2,99],141:[2,99],142:[2,99],143:[2,99]},{26:[2,97],28:[2,97],40:[2,97],42:[2,97],58:[2,97],60:[2,97],72:[2,97],77:[2,97],85:[2,97],88:[2,97],124:[1,46],126:[2,97],128:[2,97],130:[2,97],131:[2,97],132:[2,97],134:[2,97],138:[2,97],141:[2,97],142:[2,97],143:[2,97]},{26:[2,95],28:[2,95],40:[2,95],42:[2,95],58:[2,95],60:[2,95],72:[2,95],77:[2,95],85:[2,95],88:[2,95],122:[1,47],124:[2,95],126:[2,95],128:[2,95],130:[2,95],131:[2,95],132:[2,95],134:[2,95],138:[2,95],141:[2,95],142:[2,95],143:[2,95]},{26:[2,93],28:[2,93],40:[2,93],42:[2,93],58:[2,93],60:[2,93],72:[2,93],77:[2,93],85:[2,93],88:[2,93],120:[1,48],122:[2,93],124:[2,93],126:[2,93],128:[2,93],130:[2,93],131:[2,93],132:[2,93],134:[2,93],138:[2,93],141:[2,93],142:[2,93],143:[2,93]},{26:[2,91],28:[2,91],40:[2,91],42:[2,91],58:[2,91],60:[2,91],72:[2,91],77:[2,91],85:[2,91],88:[2,91],109:49,110:[1,50],111:[1,51],112:[1,52],113:[1,53],120:[2,91],122:[2,91],124:[2,91],126:[2,91],128:[2,91],130:[2,91],131:[2,91],132:[2,91],134:[2,91],138:[2,91],141:[2,91],142:[2,91],143:[2,91]},{26:[2,85],28:[2,85],40:[2,85],42:[2,85],58:[2,85],60:[2,85],72:[2,85],77:[2,85],85:[2,85],88:[2,85],105:54,106:[1,55],107:[1,56],110:[2,85],111:[2,85],112:[2,85],113:[2,85],120:[2,85],122:[2,85],124:[2,85],126:[2,85],128:[2,85],130:[2,85],131:[2,85],132:[2,85],134:[2,85],138:[2,85],141:[2,85],142:[2,85],143:[2,85]},{26:[2,79],28:[2,79],40:[2,79],42:[2,79],58:[2,79],60:[2,79],72:[2,79],77:[2,79],85:[2,79],88:[2,79],104:[1,57],106:[2,79],107:[2,79],110:[2,79],111:[2,79],112:[2,79],113:[2,79],120:[2,79],122:[2,79],124:[2,79],126:[2,79],128:[2,79],130:[2,79],131:[2,79],132:[2,79],134:[2,79],138:[2,79],141:[2,79],142:[2,79],143:[2,79]},{26:[2,75],28:[2,75],40:[2,75],42:[2,75],58:[2,75],60:[2,75],72:[2,75],77:[2,75],85:[2,75],88:[2,75],102:[1,58],104:[2,75],106:[2,75],107:[2,75],110:[2,75],111:[2,75],112:[2,75],113:[2,75],120:[2,75],122:[2,75],124:[2,75],126:[2,75],128:[2,75],130:[2,75],131:[2,75],132:[2,75],134:[2,75],138:[2,75],141:[2,75],142:[2,75],143:[2,75]},{26:[2,73],28:[2,73],40:[2,73],42:[2,73],58:[2,73],60:[2,73],72:[2,73],77:[2,73],85:[2,73],88:[2,73],96:[1,59],102:[2,73],104:[2,73],106:[2,73],107:[2,73],110:[2,73],111:[2,73],112:[2,73],113:[2,73],120:[2,73],122:[2,73],124:[2,73],126:[2,73],128:[2,73],130:[2,73],131:[2,73],132:[2,73],134:[2,73],138:[2,73],141:[2,73],142:[2,73],143:[2,73]},{26:[2,68],28:[2,68],40:[2,68],42:[2,68],58:[2,68],60:[2,68],72:[2,68],77:[2,68],85:[2,68],88:[2,68],96:[2,68],102:[2,68],104:[2,68],106:[2,68],107:[2,68],110:[2,68],111:[2,68],112:[2,68],113:[2,68],120:[2,68],122:[2,68],124:[2,68],126:[2,68],128:[2,68],130:[2,68],131:[2,68],132:[2,68],134:[2,68],138:[2,68],141:[2,68],142:[2,68],143:[2,68]},{40:[2,160],55:106,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{24:108,27:21,40:[2,158],42:[2,158],55:22,58:[2,158],77:[2,158],85:[2,158],89:107,93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,158],141:[2,158],142:[2,158],143:[2,158]},{26:[2,63],28:[2,63],40:[2,63],42:[2,63],58:[2,63],60:[2,63],72:[2,63],77:[2,63],85:[2,63],87:[2,63],88:[2,63],90:[2,63],91:[2,63],92:[2,63],96:[2,63],102:[2,63],104:[2,63],106:[2,63],107:[2,63],110:[2,63],111:[2,63],112:[2,63],113:[2,63],120:[2,63],122:[2,63],124:[2,63],126:[2,63],128:[2,63],130:[2,63],131:[2,63],132:[2,63],134:[2,63],138:[2,63],141:[2,63],142:[2,63],143:[2,63]},{26:[2,64],28:[2,64],40:[2,64],42:[2,64],58:[2,64],60:[2,64],72:[2,64],77:[2,64],85:[2,64],87:[2,64],88:[2,64],90:[2,64],91:[2,64],92:[2,64],96:[2,64],102:[2,64],104:[2,64],106:[2,64],107:[2,64],110:[2,64],111:[2,64],112:[2,64],113:[2,64],120:[2,64],122:[2,64],124:[2,64],126:[2,64],128:[2,64],130:[2,64],131:[2,64],132:[2,64],134:[2,64],138:[2,64],141:[2,64],142:[2,64],143:[2,64]},{26:[2,65],28:[2,65],40:[2,65],42:[2,65],58:[2,65],60:[2,65],72:[2,65],77:[2,65],85:[2,65],87:[2,65],88:[2,65],90:[2,65],91:[2,65],92:[2,65],96:[2,65],102:[2,65],104:[2,65],106:[2,65],107:[2,65],110:[2,65],111:[2,65],112:[2,65],113:[2,65],120:[2,65],122:[2,65],124:[2,65],126:[2,65],128:[2,65],130:[2,65],131:[2,65],132:[2,65],134:[2,65],138:[2,65],141:[2,65],142:[2,65],143:[2,65]},{42:[1,109],130:[1,43]},{77:[1,110]},{26:[2,117],28:[2,117],40:[2,117],42:[2,117],58:[2,117],60:[2,117],72:[2,117],77:[2,117],85:[2,117],87:[2,117],88:[2,117],90:[2,117],91:[2,117],92:[2,117],96:[2,117],102:[2,117],104:[2,117],106:[2,117],107:[2,117],110:[2,117],111:[2,117],112:[2,117],113:[2,117],120:[2,117],122:[2,117],124:[2,117],126:[2,117],128:[2,117],130:[2,117],131:[2,117],132:[2,117],134:[2,117],138:[2,117],141:[2,117],142:[2,117],143:[2,117]},{26:[2,111],28:[2,111],40:[2,111],42:[2,111],58:[2,111],60:[2,111],72:[2,111],77:[2,111],85:[2,111],87:[2,111],88:[2,111],90:[2,111],91:[2,111],92:[2,111],96:[2,111],102:[2,111],104:[2,111],106:[2,111],107:[2,111],110:[2,111],111:[2,111],112:[2,111],113:[2,111],120:[2,111],122:[2,111],124:[2,111],126:[2,111],128:[2,111],130:[2,111],131:[2,111],132:[2,111],134:[2,111],138:[2,111],141:[2,111],142:[2,111],143:[2,111],144:[2,111],145:[2,111]},{26:[2,113],28:[2,113],40:[2,113],42:[2,113],58:[2,113],60:[2,113],72:[2,113],77:[2,113],85:[2,113],87:[2,113],88:[2,113],90:[2,113],91:[2,113],92:[2,113],96:[2,113],102:[2,113],104:[2,113],106:[2,113],107:[2,113],110:[2,113],111:[2,113],112:[2,113],113:[2,113],120:[2,113],122:[2,113],124:[2,113],126:[2,113],128:[2,113],130:[2,113],131:[2,113],132:[2,113],134:[2,113],138:[2,113],141:[2,113],142:[2,113],143:[2,113]},{11:[1,111]},{11:[2,4],17:113,18:115,19:116,20:117,21:118,29:122,31:[1,123],39:[1,121],64:[1,119],68:[1,120],72:[1,114],156:112},{26:[1,124]},{40:[2,160],55:125,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{88:[1,126],130:[1,43]},{42:[1,127]},{42:[2,159]},{26:[2,59],28:[2,59],40:[2,59],42:[2,59],58:[2,59],60:[2,59],72:[2,59],77:[2,59],85:[2,59],87:[2,59],88:[2,59],90:[2,59],91:[2,59],92:[2,59],96:[2,59],102:[2,59],104:[2,59],106:[2,59],107:[2,59],110:[2,59],111:[2,59],112:[2,59],113:[2,59],120:[2,59],122:[2,59],124:[2,59],126:[2,59],128:[2,59],130:[2,59],131:[2,59],132:[2,59],134:[2,59],138:[2,59],141:[2,59],142:[2,59],143:[2,59]},{26:[2,115],28:[2,115],40:[2,115],42:[2,115],58:[2,115],60:[2,115],72:[2,115],77:[2,115],85:[2,115],87:[2,115],88:[2,115],90:[2,115],91:[2,115],92:[2,115],96:[2,115],102:[2,115],104:[2,115],106:[2,115],107:[2,115],110:[2,115],111:[2,115],112:[2,115],113:[2,115],120:[2,115],122:[2,115],124:[2,115],126:[2,115],128:[2,115],130:[2,115],131:[2,115],132:[2,115],134:[2,115],138:[2,115],141:[2,115],142:[2,115],143:[2,115],145:[1,128]},{11:[2,3],13:[2,3],23:[2,3],72:[2,3]},{11:[2,137],31:[2,137],39:[2,137],64:[2,137],68:[2,137],72:[2,137]},{11:[2,134],31:[2,134],39:[2,134],64:[2,134],68:[2,134],72:[2,134]},{11:[2,135],31:[2,135],39:[2,135],64:[2,135],68:[2,135],72:[2,135]},{11:[2,5],31:[2,5],39:[2,5],64:[2,5],68:[2,5],72:[2,5]},{11:[2,6],31:[2,6],39:[2,6],64:[2,6],68:[2,6],72:[2,6]},{11:[2,7],31:[2,7],39:[2,7],64:[2,7],68:[2,7],72:[2,7]},{11:[2,8],31:[2,8],39:[2,8],64:[2,8],68:[2,8],72:[2,8]},{8:129,58:[1,9]},{8:130,58:[1,9]},{8:131,58:[1,9]},{9:[1,133],11:[2,140],30:132,31:[2,140],39:[2,140],64:[2,140],68:[2,140],72:[2,140]},{8:137,32:134,36:135,58:[1,9],144:[1,138],158:136},{26:[2,10]},{130:[1,43],132:[1,139]},{26:[2,61],28:[2,61],40:[2,61],42:[2,61],58:[2,61],60:[2,61],72:[2,61],77:[2,61],85:[2,61],87:[2,61],88:[2,61],90:[2,61],91:[2,61],92:[2,61],96:[2,61],102:[2,61],104:[2,61],106:[2,61],107:[2,61],110:[2,61],111:[2,61],112:[2,61],113:[2,61],120:[2,61],122:[2,61],124:[2,61],126:[2,61],128:[2,61],130:[2,61],131:[2,61],132:[2,61],134:[2,61],138:[2,61],141:[2,61],142:[2,61],143:[2,61]},{26:[2,62],28:[2,62],40:[2,62],42:[2,62],58:[2,62],60:[2,62],72:[2,62],77:[2,62],85:[2,62],87:[2,62],88:[2,62],90:[2,62],91:[2,62],92:[2,62],96:[2,62],102:[2,62],104:[2,62],106:[2,62],107:[2,62],110:[2,62],111:[2,62],112:[2,62],113:[2,62],120:[2,62],122:[2,62],124:[2,62],126:[2,62],128:[2,62],130:[2,62],131:[2,62],132:[2,62],134:[2,62],138:[2,62],141:[2,62],142:[2,62],143:[2,62]},{26:[2,116],28:[2,116],40:[2,116],42:[2,116],58:[2,116],60:[2,116],72:[2,116],77:[2,116],85:[2,116],87:[2,116],88:[2,116],90:[2,116],91:[2,116],92:[2,116],96:[2,116],102:[2,116],104:[2,116],106:[2,116],107:[2,116],110:[2,116],111:[2,116],112:[2,116],113:[2,116],120:[2,116],122:[2,116],124:[2,116],126:[2,116],128:[2,116],130:[2,116],131:[2,116],132:[2,116],134:[2,116],138:[2,116],141:[2,116],142:[2,116],143:[2,116]},{65:[1,140],66:[1,141]},{40:[1,142]},{40:[1,143]},{11:[2,12],31:[2,12],39:[2,12],64:[2,12],68:[2,12],72:[2,12]},{21:145,29:122,31:[1,123],157:144},{33:146,34:[2,142],65:[1,147]},{8:137,34:[2,14],49:[2,14],58:[1,9],65:[2,14],144:[1,138],158:148},{34:[2,148],49:[2,148],58:[2,148],65:[2,148],144:[2,148]},{34:[2,146],49:[2,146],58:[2,146],65:[2,146],144:[2,146]},{34:[2,147],49:[2,147],58:[2,147],65:[2,147],144:[2,147]},{26:[2,101],28:[2,101],40:[2,101],42:[2,101],58:[2,101],60:[2,101],72:[2,101],77:[2,101],85:[2,101],88:[2,101],130:[2,101],132:[2,101],134:[2,101],138:[2,101],141:[2,101],142:[2,101],143:[2,101]},{8:149,58:[1,9]},{8:153,40:[1,154],58:[1,9],67:150,69:152,70:151},{24:155,27:21,40:[2,160],55:22,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{24:157,27:21,40:[2,154],41:156,42:[2,154],55:22,58:[2,154],77:[2,154],85:[2,154],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,154],141:[2,154],142:[2,154],143:[2,154]},{11:[1,158],21:159,29:122,31:[1,123]},{11:[2,138],31:[2,138]},{34:[1,160]},{8:161,58:[1,9]},{34:[2,149],49:[2,149],58:[2,149],65:[2,149],144:[2,149]},{66:[1,162]},{11:[2,35],31:[2,35],39:[2,35],64:[2,35],68:[2,35],72:[2,35]},{8:153,11:[2,41],31:[2,41],39:[2,41],40:[1,154],58:[1,9],64:[2,41],67:163,68:[2,41],69:152,70:151,72:[2,41]},{71:[1,164],73:[1,165]},{71:[2,37],73:[2,37]},{8:167,58:[1,9],59:166},{42:[1,168]},{42:[1,169]},{42:[2,155]},{11:[2,141],31:[2,141],39:[2,141],64:[2,141],68:[2,141],72:[2,141]},{11:[2,139],31:[2,139]},{9:[2,144],11:[2,144],31:[2,144],35:170,39:[2,144],64:[2,144],65:[1,171],68:[2,144],72:[2,144]},{34:[2,143]},{8:153,40:[1,154],58:[1,9],67:172,69:152,70:151},{11:[2,42],31:[2,42],39:[2,42],64:[2,42],68:[2,42],72:[2,42]},{40:[2,160],55:173,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{8:176,58:[1,9],72:[2,44],74:174,75:175},{42:[1,177]},{42:[2,31],60:[1,178]},{43:[1,179]},{43:[1,180]},{9:[2,13],11:[2,13],31:[2,13],39:[2,13],64:[2,13],68:[2,13],72:[2,13]},{9:[1,181]},{11:[2,34],31:[2,34],39:[2,34],64:[2,34],68:[2,34],72:[2,34]},{72:[1,182],130:[1,43]},{72:[1,183]},{8:176,58:[1,9],72:[2,44],74:184,75:175},{43:[1,185]},{71:[2,38],73:[2,38]},{8:167,58:[1,9],59:186},{40:[2,160],55:187,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{44:188,45:189,47:[1,190]},{37:191,38:192,159:193,160:[1,194],161:[2,150]},{11:[2,39],31:[2,39],39:[2,39],40:[2,39],58:[2,39],64:[2,39],68:[2,39],72:[2,39]},{11:[2,40],31:[2,40],39:[2,40],40:[2,40],58:[2,40],64:[2,40],68:[2,40],72:[2,40]},{72:[2,43]},{40:[2,160],55:195,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{42:[2,30]},{26:[1,196],130:[1,43]},{11:[2,16],31:[2,16],39:[2,16],64:[2,16],68:[2,16],72:[2,16]},{9:[1,198],11:[2,156],31:[2,156],39:[2,156],46:197,64:[2,156],68:[2,156],72:[2,156]},{8:137,32:200,36:135,48:199,50:[1,201],58:[1,9],144:[1,138],158:136},{11:[1,202]},{11:[2,15],159:203,160:[1,194],161:[2,150]},{161:[1,204]},{8:205,58:[1,9]},{72:[1,206],130:[1,43]},{11:[2,36],31:[2,36],39:[2,36],64:[2,36],68:[2,36],72:[2,36]},{11:[2,17],31:[2,17],39:[2,17],64:[2,17],68:[2,17],72:[2,17]},{44:207,45:189,47:[1,190]},{49:[1,208]},{49:[2,19]},{49:[2,20]},{9:[2,145],11:[2,145],31:[2,145],39:[2,145],64:[2,145],68:[2,145],72:[2,145]},{161:[1,209]},{40:[2,160],55:210,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{161:[2,151]},{58:[2,45],72:[2,45]},{11:[1,211]},{9:[2,18],11:[2,18],31:[2,18],39:[2,18],64:[2,18],68:[2,18],72:[2,18]},{40:[2,160],55:212,58:[2,160],77:[2,160],85:[2,160],93:34,94:35,95:33,101:32,103:31,108:30,114:29,119:28,121:27,123:26,125:25,127:24,129:23,133:36,134:[1,37],138:[2,160],141:[2,160],142:[2,160],143:[2,160]},{72:[1,213],130:[1,43]},{11:[2,157],31:[2,157],39:[2,157],64:[2,157],68:[2,157],72:[2,157]},{72:[1,214],130:[1,43]},{11:[2,152],160:[2,152],161:[2,152]},{11:[2,153],160:[2,153],161:[2,153]}],
defaultActions: {3:[2,1],77:[2,133],108:[2,159],124:[2,10],157:[2,155],161:[2,143],184:[2,43],186:[2,30],200:[2,19],201:[2,20],205:[2,151]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:/* ignore comment */
break;
case 2:return 13;
break;
case 3:return 155;
break;
case 4:return 'USES';
break;
case 5:return 80;
break;
case 6:return 81;
break;
case 7:return 7;
break;
case 8:return 'TEST';
break;
case 9:return 'IMAGE';
break;
case 10:return 23;
break;
case 11:return 'NEEDS';
break;
case 12:return 68;
break;
case 13:return 39;
break;
case 14:return 43;
break;
case 15:return 53;
break;
case 16:return 54;
break;
case 17:return 56;
break;
case 18:return 57;
break;
case 19:return 'MAP';
break;
case 20:return 'FOR';
break;
case 21:return 78;
break;
case 22:return 77;
break;
case 23:return 143;
break;
case 24:return 138;
break;
case 25:return 141;
break;
case 26:return 'REDUCE';
break;
case 27:return 130;
break;
case 28:return 'INT';
break;
case 29:return 'LONG';
break;
case 30:return 'FLOAT';
break;
case 31:return 'DOUBLE';
break;
case 32:return 131;
break;
case 33:return 'ELSEIF';
break;
case 34:return 132; 
break;
case 35:return 64;
break;
case 36:return 66;
break;
case 37:return 31;
break;
case 38:return 34;
break;
case 39:return 161;
break;
case 40:return 47;
break;
case 41:return 49;
break;
case 42:return 'ESCAPE';	
break;
case 43:return 50;
break;
case 44:return 116;
break;
case 45:return 117;
break;
case 46:return 110;
break;
case 47:return 111;
break;
case 48:return 112;
break;
case 49:return 113;
break;
case 50:return 106;
break;
case 51:return 107;
break;
case 52:return 65;
break;
case 53:return 71;
break;
case 54:return 73;
break;
case 55:return 160;
break;
case 56:return 'PLUS';
break;
case 57:return 142;
break;
case 58:return 98;
break;
case 59:return 99;
break;
case 60:return 100;
break;
case 61:return 128;
break;
case 62:return 28;
break;
case 63:return 126;
break;
case 64:return 120;
break;
case 65:return 124;
break;
case 66:return 122;
break;
case 67:return 134;
break;
case 68:return 96;
break;
case 69:return 'QUESTION';
break;
case 70:return 92;
break;
case 71:return 148;
break;
case 72:return 150;
break;
case 73:return 40;
break;
case 74:return 42;
break;
case 75:return 87;
break;
case 76:return 88;
break;
case 77:return 152;
break;
case 78:return 26;
break;
case 79:return 60;
break;
case 80:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 85;
break;
case 81:return 144;
break;
case 82:
					if (typeof yy._iemitstack === 'undefined') {
						return 5;
					}
					
					var tokens = [];
				
				    while (0 < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				    if (tokens.length) return tokens;
				
break;
case 83:/* eat blank lines */
break;
case 84:
					if (typeof yy._iemitstack === 'undefined') {
						yy._iemitstack = [0];
					}
					var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
				    if (indentation > yy._iemitstack[0]) {
				        yy._iemitstack.unshift(indentation);
				        return 9;
				    }
				
				    var tokens = [];
				
				    while (indentation < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				    if (tokens.length) return tokens;
				
break;
case 85:/* ignore whitespace */
break;
case 86:return 58;
break;
case 87:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:theory\b)/,/^(?:extends\b)/,/^(?:uses\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:namespace\b)/,/^(?:test\b)/,/^(?:image\b)/,/^(?:data\b)/,/^(?:needs\b)/,/^(?:fn\b)/,/^(?:ff\b)/,/^(?:->)/,/^(?:<-)/,/^(?:style\b)/,/^(?:where\b)/,/^(?:yield\b)/,/^(?:map\b)/,/^(?:for\b)/,/^(?:null\b)/,/^(?:([0-9]+)+)/,/^(?:0x([0-9A-Fa-f]+))/,/^(?:([0-1]+)b\b)/,/^(?:#([0-9A-Fa-f]+))/,/^(?:reduce\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:else\s+if\b)/,/^(?:endif\b)/,/^(?:\[--)/,/^(?:--\])/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:is\b)/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\\)/,/^(?:\.\.\.)/,/^(?:eq|==)/,/^(?:neq|!=)/,/^(?:gt|>)/,/^(?:lt|<)/,/^(?:gte|>=)/,/^(?:lte|<=)/,/^(?:<<)/,/^(?:>>)/,/^(?:::)/,/^(?:=)/,/^(?:@=)/,/^(?:@)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%|mod\b)/,/^(?:\|\||or\b)/,/^(?:\|)/,/^(?:&&|and\b)/,/^(?:&)/,/^(?:\|)/,/^(?:\^|xor\b)/,/^(?:not|!)/,/^(?:\*\*)/,/^(?:\?)/,/^(?:\?!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:".*")/,/^(?:\.)/,/^(?:[\n\r\s]+$)/,/^(?:[\n\r]+\s+(?![^\n\r]))/,/^(?:[\n\r]\s+)/,/^(?:\s+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = theory;
exports.Parser = theory.Parser;
exports.parse = function () { return theory.parse.apply(theory, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}