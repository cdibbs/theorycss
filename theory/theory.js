/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var theory = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"bodylist":4,"ENDOFFILE":5,"namespace":6,"theory":7,"THEORY":8,"id":9,"EXTENDS":10,"LBRACE":11,"theorybody":12,"RBRACE":13,"deflist":14,"nslist":15,"data":16,"DATA":17,"paramlist":18,"dtypelist":19,"EOL":20,"paramdef":21,"PIPE":22,"PREFIX":23,"nsbody":24,"def":25,"sdef":26,"fdef":27,"ffdef":28,"tfdef":29,"FRAGFUNC":30,"LPAREN":31,"RPAREN":32,"ASSIGN":33,"ffnodetree":34,"ffnodelist":35,"INDENT":36,"DEINDENT":37,"ffnode":38,"LFFNODE":39,"RFFNODE":40,"ffimplist":41,"IMPLICATION":42,"fragexpr":43,"REVIMPLICATION":44,"STYLE":45,"expr":46,"WHERE":47,"YIELD":48,"ID":49,"tuplevarlist":50,"COMMA":51,"typedef":52,"LBRACK":53,"RBRACK":54,"SETSTART":55,"TYPIFY":56,"SETEND":57,"assignment_list":58,"FUNCTION":59,"expression":60,"lside":61,"assignment":62,"CASEASSIGN":63,"caselist":64,"casedef":65,"lit":66,"NATLITERAL":67,"NULL":68,"boollit":69,"TRUE":70,"FALSE":71,"elist":72,"atom":73,"constant":74,"STRING_LIT":75,"postfix_expression":76,"LBRACKET":77,"RBRACKET":78,"argument_expression_list":79,"INC_OP":80,"DEC_OP":81,"EXCUSEME":82,"unary_expression":83,"unary_op":84,"power_expression":85,"POWER":86,"muldivmod":87,"TIMES":88,"DIVIDE":89,"MOD":90,"multiplicative_expression":91,"MULDIVMOD":92,"additive_expression":93,"ADDSUB":94,"shift":95,"SHIFTL":96,"SHIFTR":97,"shift_expression":98,"compare":99,"GT":100,"LT":101,"GTE":102,"LTE":103,"relational_expression":104,"equiv":105,"EQ":106,"NEQ":107,"equivalence_expression":108,"and_expression":109,"B_AND":110,"xor_expression":111,"XOR":112,"ior_expression":113,"B_OR":114,"logical_and_expression":115,"AND":116,"logical_or_expression":117,"OR":118,"conditional_expression":119,"IF":120,"ELSE":121,"ENDIF":122,"NOT":123,"number":124,"dict":125,"array":126,"prec0list":127,"atomlist":128,"plusmin":129,"PLUS":130,"MINUS":131,"integer":132,"hexint":133,"BINNATLITERAL":134,"float":135,"color":136,"HEXCOLOR":137,"HEXNATLITERAL":138,"DOT":139,"f":140,"colondeflist":141,"string":142,"COLON":143,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",8:"THEORY",10:"EXTENDS",11:"LBRACE",13:"RBRACE",15:"nslist",17:"DATA",20:"EOL",22:"PIPE",23:"PREFIX",29:"tfdef",30:"FRAGFUNC",31:"LPAREN",32:"RPAREN",33:"ASSIGN",36:"INDENT",37:"DEINDENT",39:"LFFNODE",40:"RFFNODE",42:"IMPLICATION",44:"REVIMPLICATION",45:"STYLE",46:"expr",47:"WHERE",48:"YIELD",49:"ID",51:"COMMA",53:"LBRACK",54:"RBRACK",55:"SETSTART",56:"TYPIFY",57:"SETEND",59:"FUNCTION",63:"CASEASSIGN",67:"NATLITERAL",68:"NULL",70:"TRUE",71:"FALSE",75:"STRING_LIT",77:"LBRACKET",78:"RBRACKET",80:"INC_OP",81:"DEC_OP",82:"EXCUSEME",86:"POWER",88:"TIMES",89:"DIVIDE",90:"MOD",92:"MULDIVMOD",94:"ADDSUB",96:"SHIFTL",97:"SHIFTR",100:"GT",101:"LT",102:"GTE",103:"LTE",106:"EQ",107:"NEQ",110:"B_AND",112:"XOR",114:"B_OR",116:"AND",118:"OR",120:"IF",121:"ELSE",122:"ENDIF",123:"NOT",130:"PLUS",131:"MINUS",134:"BINNATLITERAL",137:"HEXCOLOR",138:"HEXNATLITERAL",139:"DOT",140:"f",142:"string",143:"COLON"},
productions_: [0,[3,2],[3,0],[4,1],[4,1],[4,2],[4,2],[7,7],[7,5],[12,1],[12,1],[12,0],[16,4],[19,4],[19,1],[6,5],[24,1],[24,0],[25,1],[25,1],[25,1],[25,1],[25,1],[28,7],[34,4],[34,1],[35,2],[35,1],[38,3],[38,4],[41,4],[41,2],[41,2],[43,6],[43,4],[43,4],[43,2],[43,2],[14,2],[14,1],[9,1],[50,3],[50,1],[52,1],[52,3],[26,6],[26,4],[27,8],[61,1],[61,3],[62,4],[62,4],[58,2],[58,1],[64,2],[64,0],[65,3],[18,3],[18,1],[21,2],[21,4],[66,1],[66,1],[69,1],[69,1],[72,3],[72,1],[72,0],[73,1],[73,1],[73,1],[73,3],[76,1],[76,4],[76,3],[76,4],[76,2],[76,2],[76,2],[79,1],[79,3],[83,1],[83,2],[85,1],[85,3],[87,1],[87,1],[87,1],[91,1],[91,3],[93,1],[93,3],[95,1],[95,1],[98,1],[98,3],[99,1],[99,1],[99,1],[99,1],[104,1],[104,3],[105,1],[105,1],[108,1],[108,3],[109,1],[109,3],[111,1],[111,3],[113,1],[113,3],[115,1],[115,3],[117,1],[117,3],[119,1],[119,6],[60,1],[84,1],[74,1],[74,1],[74,1],[127,1],[127,1],[128,3],[128,3],[129,1],[129,1],[124,1],[124,1],[124,1],[124,1],[124,1],[136,1],[132,2],[132,1],[133,2],[133,1],[135,3],[135,4],[135,2],[126,3],[125,3],[141,5],[141,3],[141,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return theorylist; 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = [$$[$0]]; 
break;
case 5: this.$ = $$[$0-1]; this.$.unshift($$[$0]); 
break;
case 6: this.$ = $$[$0-1]; this.$.unshift($$[$0]); 
break;
case 7: this.$ = new yy.Theory($$[$0-5], $$[$0-1], $$[$0-3]); 
break;
case 8: this.$ = new yy.Theory($$[$0-3], $$[$0-1]); 
break;
case 11: this.$ = []; 
break;
case 13: this.$ = $$[$0-1]; this.$.unshift($$[$0-3]); 
break;
case 14: this.$ = [$$[$0]]; 
break;
case 38: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 39: this.$ = [$$[$0]]; 
break;
case 41: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 42: this.$ = [ $$[$0] ]; 
break;
case 43: this.$ = new yy.Type($$[$0]); 
break;
case 44: this.$ = new yy.Type("Array", $$[$0-2]); 
break;
case 45: this.$ = new yy.SetDef($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 46: this.$ = new yy.SetDef($$[$0-2], $$[$0-2], $$[$0]); 
break;
case 47: this.$ = new yy.FnDef($$[$0-6], $$[$0-4], null, $$[$0-1]); 
break;
case 48: this.$ = [ $$[$0] ]; 
break;
case 49: this.$ = $$[$0-1]; 
break;
case 50: this.$ = new yy.Assignment($$[$0-3], $$[$0-1]); 
break;
case 51: this.$ = new yy.CaseAssignment($$[$0-3], $$[$0-1]); 
break;
case 52: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 53: this.$ = [ $$[$0] ]; 
break;
case 54: this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 55: this.$ = []; 
break;
case 56: this.$ = new yy.CaseDef($$[$0-2], $$[$0]); 
break;
case 57: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 58: this.$ = [ $$[$0] ]; 
break;
case 59: this.$ = new yy.ParamDef($$[$0-1], $$[$0]); 
break;
case 60: this.$ = new yy.ParamDef($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 61: this.$ = parseInt($$[$0]); 
break;
case 62: this.$ = null; 
break;
case 63: this.$ = true; 
break;
case 64: this.$ = false; 
break;
case 65: this.$ = $$[$0]; this.$.unshift(e); 
break;
case 66: this.$ = [ e ]; 
break;
}
},
table: [{1:[2,2],3:1,4:2,6:3,7:4,8:[1,6],23:[1,5]},{1:[3]},{5:[1,7],6:9,7:8,8:[1,6],23:[1,5]},{5:[2,3],8:[2,3],23:[2,3]},{5:[2,4],8:[2,4],23:[2,4]},{9:10,49:[1,11]},{9:12,49:[1,11]},{1:[2,1]},{5:[2,5],8:[2,5],23:[2,5]},{5:[2,6],8:[2,6],23:[2,6]},{11:[1,13]},{10:[2,40],11:[2,40],13:[2,40],20:[2,40],31:[2,40],32:[2,40],33:[2,40],40:[2,40],42:[2,40],49:[2,40],51:[2,40],53:[2,40],56:[2,40],57:[2,40],63:[2,40],77:[2,40],78:[2,40],80:[2,40],81:[2,40],82:[2,40],86:[2,40],92:[2,40],94:[2,40],96:[2,40],97:[2,40],100:[2,40],101:[2,40],102:[2,40],103:[2,40],110:[2,40],112:[2,40],114:[2,40],116:[2,40],118:[2,40],120:[2,40],121:[2,40],122:[2,40]},{10:[1,14],11:[1,15]},{6:23,13:[2,17],14:17,23:[1,5],24:16,25:18,26:19,27:20,28:21,29:[1,22],30:[1,26],55:[1,24],59:[1,25]},{9:27,49:[1,11]},{6:23,12:28,13:[2,11],14:29,15:[1,30],23:[1,5],25:18,26:19,27:20,28:21,29:[1,22],30:[1,26],55:[1,24],59:[1,25]},{13:[1,31]},{13:[2,16]},{6:23,13:[2,39],14:32,23:[1,5],25:18,26:19,27:20,28:21,29:[1,22],30:[1,26],55:[1,24],59:[1,25]},{13:[2,18],23:[2,18],29:[2,18],30:[2,18],55:[2,18],59:[2,18]},{13:[2,19],23:[2,19],29:[2,19],30:[2,19],55:[2,19],59:[2,19]},{13:[2,20],23:[2,20],29:[2,20],30:[2,20],55:[2,20],59:[2,20]},{13:[2,21],23:[2,21],29:[2,21],30:[2,21],55:[2,21],59:[2,21]},{13:[2,22],23:[2,22],29:[2,22],30:[2,22],55:[2,22],59:[2,22]},{9:33,49:[1,11]},{9:34,49:[1,11]},{9:35,49:[1,11]},{11:[1,36]},{13:[1,37]},{13:[2,9]},{13:[2,10]},{5:[2,15],8:[2,15],13:[2,15],23:[2,15],29:[2,15],30:[2,15],55:[2,15],59:[2,15]},{13:[2,38]},{56:[1,38],57:[1,39]},{31:[1,40]},{31:[1,41]},{6:23,12:42,13:[2,11],14:29,15:[1,30],23:[1,5],25:18,26:19,27:20,28:21,29:[1,22],30:[1,26],55:[1,24],59:[1,25]},{5:[2,8],8:[2,8],23:[2,8]},{9:43,49:[1,11]},{9:47,31:[1,48],49:[1,11],58:44,61:46,62:45},{9:52,18:49,21:50,49:[1,11],52:51},{9:52,18:53,21:50,49:[1,11],52:51},{13:[1,54]},{57:[1,55]},{13:[2,46],23:[2,46],29:[2,46],30:[2,46],55:[2,46],59:[2,46]},{9:47,13:[2,53],23:[2,53],29:[2,53],30:[2,53],31:[1,48],49:[1,11],55:[2,53],58:56,59:[2,53],61:46,62:45},{33:[1,57],63:[1,58]},{33:[2,48],63:[2,48]},{9:60,49:[1,11],50:59},{32:[1,61]},{32:[2,58],51:[1,62]},{9:63,49:[1,11]},{49:[2,43],53:[1,64]},{32:[1,65]},{5:[2,7],8:[2,7],23:[2,7]},{9:47,31:[1,48],49:[1,11],58:66,61:46,62:45},{13:[2,52],23:[2,52],29:[2,52],30:[2,52],55:[2,52],59:[2,52]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:67,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:69,119:68,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:106,20:[2,55],49:[1,11],64:104,65:105},{32:[1,107]},{32:[2,42],51:[1,108]},{42:[1,109]},{9:52,18:110,21:50,49:[1,11],52:51},{32:[2,59],33:[1,111],51:[2,59]},{54:[1,112]},{33:[1,113]},{13:[2,45],23:[2,45],29:[2,45],30:[2,45],55:[2,45],59:[2,45]},{20:[1,114],120:[1,115]},{13:[2,118],20:[2,118],32:[2,118],49:[2,118],51:[2,118],78:[2,118],120:[2,118],122:[2,118]},{13:[2,116],20:[2,116],32:[2,116],49:[2,116],51:[2,116],78:[2,116],118:[1,116],120:[2,116],122:[2,116]},{13:[2,114],20:[2,114],32:[2,114],49:[2,114],51:[2,114],78:[2,114],116:[1,117],118:[2,114],120:[2,114],121:[2,114],122:[2,114]},{13:[2,112],20:[2,112],32:[2,112],49:[2,112],51:[2,112],78:[2,112],114:[1,118],116:[2,112],118:[2,112],120:[2,112],121:[2,112],122:[2,112]},{13:[2,110],20:[2,110],32:[2,110],49:[2,110],51:[2,110],78:[2,110],112:[1,119],114:[2,110],116:[2,110],118:[2,110],120:[2,110],121:[2,110],122:[2,110]},{13:[2,108],20:[2,108],32:[2,108],49:[2,108],51:[2,108],78:[2,108],110:[1,120],112:[2,108],114:[2,108],116:[2,108],118:[2,108],120:[2,108],121:[2,108],122:[2,108]},{13:[2,106],20:[2,106],32:[2,106],49:[2,106],51:[2,106],78:[2,106],99:121,100:[1,122],101:[1,123],102:[1,124],103:[1,125],110:[2,106],112:[2,106],114:[2,106],116:[2,106],118:[2,106],120:[2,106],121:[2,106],122:[2,106]},{13:[2,100],20:[2,100],32:[2,100],49:[2,100],51:[2,100],78:[2,100],95:126,96:[1,127],97:[1,128],100:[2,100],101:[2,100],102:[2,100],103:[2,100],110:[2,100],112:[2,100],114:[2,100],116:[2,100],118:[2,100],120:[2,100],121:[2,100],122:[2,100]},{13:[2,94],20:[2,94],32:[2,94],49:[2,94],51:[2,94],78:[2,94],94:[1,129],96:[2,94],97:[2,94],100:[2,94],101:[2,94],102:[2,94],103:[2,94],110:[2,94],112:[2,94],114:[2,94],116:[2,94],118:[2,94],120:[2,94],121:[2,94],122:[2,94]},{13:[2,90],20:[2,90],32:[2,90],49:[2,90],51:[2,90],78:[2,90],92:[1,130],94:[2,90],96:[2,90],97:[2,90],100:[2,90],101:[2,90],102:[2,90],103:[2,90],110:[2,90],112:[2,90],114:[2,90],116:[2,90],118:[2,90],120:[2,90],121:[2,90],122:[2,90]},{13:[2,88],20:[2,88],32:[2,88],49:[2,88],51:[2,88],78:[2,88],86:[1,131],92:[2,88],94:[2,88],96:[2,88],97:[2,88],100:[2,88],101:[2,88],102:[2,88],103:[2,88],110:[2,88],112:[2,88],114:[2,88],116:[2,88],118:[2,88],120:[2,88],121:[2,88],122:[2,88]},{13:[2,83],20:[2,83],32:[2,83],49:[2,83],51:[2,83],78:[2,83],86:[2,83],92:[2,83],94:[2,83],96:[2,83],97:[2,83],100:[2,83],101:[2,83],102:[2,83],103:[2,83],110:[2,83],112:[2,83],114:[2,83],116:[2,83],118:[2,83],120:[2,83],121:[2,83],122:[2,83]},{13:[2,81],20:[2,81],31:[1,133],32:[2,81],49:[2,81],51:[2,81],77:[1,132],78:[2,81],80:[1,134],81:[1,135],82:[1,136],86:[2,81],92:[2,81],94:[2,81],96:[2,81],97:[2,81],100:[2,81],101:[2,81],102:[2,81],103:[2,81],110:[2,81],112:[2,81],114:[2,81],116:[2,81],118:[2,81],120:[2,81],121:[2,81],122:[2,81]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:137,77:[1,97],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{13:[2,72],20:[2,72],31:[2,72],32:[2,72],49:[2,72],51:[2,72],77:[2,72],78:[2,72],80:[2,72],81:[2,72],82:[2,72],86:[2,72],92:[2,72],94:[2,72],96:[2,72],97:[2,72],100:[2,72],101:[2,72],102:[2,72],103:[2,72],110:[2,72],112:[2,72],114:[2,72],116:[2,72],118:[2,72],120:[2,72],121:[2,72],122:[2,72]},{11:[2,119],31:[2,119],49:[2,119],67:[2,119],75:[2,119],77:[2,119],130:[2,119],131:[2,119],134:[2,119],137:[2,119],138:[2,119]},{13:[2,68],20:[2,68],31:[2,68],32:[2,68],49:[2,68],51:[2,68],77:[2,68],78:[2,68],80:[2,68],81:[2,68],82:[2,68],86:[2,68],92:[2,68],94:[2,68],96:[2,68],97:[2,68],100:[2,68],101:[2,68],102:[2,68],103:[2,68],110:[2,68],112:[2,68],114:[2,68],116:[2,68],118:[2,68],120:[2,68],121:[2,68],122:[2,68]},{13:[2,69],20:[2,69],31:[2,69],32:[2,69],49:[2,69],51:[2,69],77:[2,69],78:[2,69],80:[2,69],81:[2,69],82:[2,69],86:[2,69],92:[2,69],94:[2,69],96:[2,69],97:[2,69],100:[2,69],101:[2,69],102:[2,69],103:[2,69],110:[2,69],112:[2,69],114:[2,69],116:[2,69],118:[2,69],120:[2,69],121:[2,69],122:[2,69]},{13:[2,70],20:[2,70],31:[2,70],32:[2,70],49:[2,70],51:[2,70],77:[2,70],78:[2,70],80:[2,70],81:[2,70],82:[2,70],86:[2,70],92:[2,70],94:[2,70],96:[2,70],97:[2,70],100:[2,70],101:[2,70],102:[2,70],103:[2,70],110:[2,70],112:[2,70],114:[2,70],116:[2,70],118:[2,70],120:[2,70],121:[2,70],122:[2,70]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:138,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:69,119:68,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{13:[2,120],20:[2,120],31:[2,120],32:[2,120],49:[2,120],51:[2,120],77:[2,120],78:[2,120],80:[2,120],81:[2,120],82:[2,120],86:[2,120],92:[2,120],94:[2,120],96:[2,120],97:[2,120],100:[2,120],101:[2,120],102:[2,120],103:[2,120],110:[2,120],112:[2,120],114:[2,120],116:[2,120],118:[2,120],120:[2,120],121:[2,120],122:[2,120]},{13:[2,121],20:[2,121],31:[2,121],32:[2,121],49:[2,121],51:[2,121],77:[2,121],78:[2,121],80:[2,121],81:[2,121],82:[2,121],86:[2,121],92:[2,121],94:[2,121],96:[2,121],97:[2,121],100:[2,121],101:[2,121],102:[2,121],103:[2,121],110:[2,121],112:[2,121],114:[2,121],116:[2,121],118:[2,121],120:[2,121],121:[2,121],122:[2,121]},{13:[2,122],20:[2,122],31:[2,122],32:[2,122],49:[2,122],51:[2,122],77:[2,122],78:[2,122],80:[2,122],81:[2,122],82:[2,122],86:[2,122],92:[2,122],94:[2,122],96:[2,122],97:[2,122],100:[2,122],101:[2,122],102:[2,122],103:[2,122],110:[2,122],112:[2,122],114:[2,122],116:[2,122],118:[2,122],120:[2,122],121:[2,122],122:[2,122]},{13:[2,129],20:[2,129],31:[2,129],32:[2,129],49:[2,129],51:[2,129],77:[2,129],78:[2,129],80:[2,129],81:[2,129],82:[2,129],86:[2,129],92:[2,129],94:[2,129],96:[2,129],97:[2,129],100:[2,129],101:[2,129],102:[2,129],103:[2,129],110:[2,129],112:[2,129],114:[2,129],116:[2,129],118:[2,129],120:[2,129],121:[2,129],122:[2,129],139:[1,139],140:[1,140]},{13:[2,130],20:[2,130],31:[2,130],32:[2,130],49:[2,130],51:[2,130],77:[2,130],78:[2,130],80:[2,130],81:[2,130],82:[2,130],86:[2,130],92:[2,130],94:[2,130],96:[2,130],97:[2,130],100:[2,130],101:[2,130],102:[2,130],103:[2,130],110:[2,130],112:[2,130],114:[2,130],116:[2,130],118:[2,130],120:[2,130],121:[2,130],122:[2,130]},{13:[2,131],20:[2,131],31:[2,131],32:[2,131],49:[2,131],51:[2,131],77:[2,131],78:[2,131],80:[2,131],81:[2,131],82:[2,131],86:[2,131],92:[2,131],94:[2,131],96:[2,131],97:[2,131],100:[2,131],101:[2,131],102:[2,131],103:[2,131],110:[2,131],112:[2,131],114:[2,131],116:[2,131],118:[2,131],120:[2,131],121:[2,131],122:[2,131]},{13:[2,132],20:[2,132],31:[2,132],32:[2,132],49:[2,132],51:[2,132],77:[2,132],78:[2,132],80:[2,132],81:[2,132],82:[2,132],86:[2,132],92:[2,132],94:[2,132],96:[2,132],97:[2,132],100:[2,132],101:[2,132],102:[2,132],103:[2,132],110:[2,132],112:[2,132],114:[2,132],116:[2,132],118:[2,132],120:[2,132],121:[2,132],122:[2,132]},{13:[2,133],20:[2,133],31:[2,133],32:[2,133],49:[2,133],51:[2,133],77:[2,133],78:[2,133],80:[2,133],81:[2,133],82:[2,133],86:[2,133],92:[2,133],94:[2,133],96:[2,133],97:[2,133],100:[2,133],101:[2,133],102:[2,133],103:[2,133],110:[2,133],112:[2,133],114:[2,133],116:[2,133],118:[2,133],120:[2,133],121:[2,133],122:[2,133]},{13:[2,146],141:141,142:[1,142]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:144,67:[1,99],72:143,73:82,74:85,75:[1,86],76:80,77:[1,97],78:[2,67],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:69,119:68,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{67:[1,145],138:[1,146]},{13:[2,136],20:[2,136],31:[2,136],32:[2,136],49:[2,136],51:[2,136],77:[2,136],78:[2,136],80:[2,136],81:[2,136],82:[2,136],86:[2,136],92:[2,136],94:[2,136],96:[2,136],97:[2,136],100:[2,136],101:[2,136],102:[2,136],103:[2,136],110:[2,136],112:[2,136],114:[2,136],116:[2,136],118:[2,136],120:[2,136],121:[2,136],122:[2,136],139:[2,136],140:[2,136]},{13:[2,138],20:[2,138],31:[2,138],32:[2,138],49:[2,138],51:[2,138],77:[2,138],78:[2,138],80:[2,138],81:[2,138],82:[2,138],86:[2,138],92:[2,138],94:[2,138],96:[2,138],97:[2,138],100:[2,138],101:[2,138],102:[2,138],103:[2,138],110:[2,138],112:[2,138],114:[2,138],116:[2,138],118:[2,138],120:[2,138],121:[2,138],122:[2,138]},{13:[2,134],20:[2,134],31:[2,134],32:[2,134],49:[2,134],51:[2,134],77:[2,134],78:[2,134],80:[2,134],81:[2,134],82:[2,134],86:[2,134],92:[2,134],94:[2,134],96:[2,134],97:[2,134],100:[2,134],101:[2,134],102:[2,134],103:[2,134],110:[2,134],112:[2,134],114:[2,134],116:[2,134],118:[2,134],120:[2,134],121:[2,134],122:[2,134]},{67:[2,127],138:[2,127]},{67:[2,128],138:[2,128]},{20:[1,147]},{9:106,20:[2,55],49:[1,11],64:148,65:105},{42:[1,149]},{33:[2,49],63:[2,49]},{9:60,49:[1,11],50:150},{9:84,11:[1,96],31:[1,87],49:[1,11],60:151,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:69,119:68,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{32:[2,57]},{66:152,67:[1,153],68:[1,154]},{49:[2,44]},{34:155,35:156,38:157,39:[1,158]},{13:[2,50],23:[2,50],29:[2,50],30:[2,50],31:[2,50],32:[2,50],49:[2,50],51:[2,50],55:[2,50],59:[2,50]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:159,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:160,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:161,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:162,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:163,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:164,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:165,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{11:[2,96],31:[2,96],49:[2,96],67:[2,96],75:[2,96],77:[2,96],123:[2,96],130:[2,96],131:[2,96],134:[2,96],137:[2,96],138:[2,96]},{11:[2,97],31:[2,97],49:[2,97],67:[2,97],75:[2,97],77:[2,97],123:[2,97],130:[2,97],131:[2,97],134:[2,97],137:[2,97],138:[2,97]},{11:[2,98],31:[2,98],49:[2,98],67:[2,98],75:[2,98],77:[2,98],123:[2,98],130:[2,98],131:[2,98],134:[2,98],137:[2,98],138:[2,98]},{11:[2,99],31:[2,99],49:[2,99],67:[2,99],75:[2,99],77:[2,99],123:[2,99],130:[2,99],131:[2,99],134:[2,99],137:[2,99],138:[2,99]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:166,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{11:[2,92],31:[2,92],49:[2,92],67:[2,92],75:[2,92],77:[2,92],123:[2,92],130:[2,92],131:[2,92],134:[2,92],137:[2,92],138:[2,92]},{11:[2,93],31:[2,93],49:[2,93],67:[2,93],75:[2,93],77:[2,93],123:[2,93],130:[2,93],131:[2,93],134:[2,93],137:[2,93],138:[2,93]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:167,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:168,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:169,84:81,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:170,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:69,119:68,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{9:47,31:[1,48],32:[1,171],49:[1,11],61:46,62:173,79:172},{13:[2,76],20:[2,76],31:[2,76],32:[2,76],49:[2,76],51:[2,76],77:[2,76],78:[2,76],80:[2,76],81:[2,76],82:[2,76],86:[2,76],92:[2,76],94:[2,76],96:[2,76],97:[2,76],100:[2,76],101:[2,76],102:[2,76],103:[2,76],110:[2,76],112:[2,76],114:[2,76],116:[2,76],118:[2,76],120:[2,76],121:[2,76],122:[2,76]},{13:[2,77],20:[2,77],31:[2,77],32:[2,77],49:[2,77],51:[2,77],77:[2,77],78:[2,77],80:[2,77],81:[2,77],82:[2,77],86:[2,77],92:[2,77],94:[2,77],96:[2,77],97:[2,77],100:[2,77],101:[2,77],102:[2,77],103:[2,77],110:[2,77],112:[2,77],114:[2,77],116:[2,77],118:[2,77],120:[2,77],121:[2,77],122:[2,77]},{13:[2,78],20:[2,78],31:[2,78],32:[2,78],49:[2,78],51:[2,78],77:[2,78],78:[2,78],80:[2,78],81:[2,78],82:[2,78],86:[2,78],92:[2,78],94:[2,78],96:[2,78],97:[2,78],100:[2,78],101:[2,78],102:[2,78],103:[2,78],110:[2,78],112:[2,78],114:[2,78],116:[2,78],118:[2,78],120:[2,78],121:[2,78],122:[2,78]},{13:[2,82],20:[2,82],31:[1,133],32:[2,82],49:[2,82],51:[2,82],77:[1,132],78:[2,82],80:[1,134],81:[1,135],82:[1,136],86:[2,82],92:[2,82],94:[2,82],96:[2,82],97:[2,82],100:[2,82],101:[2,82],102:[2,82],103:[2,82],110:[2,82],112:[2,82],114:[2,82],116:[2,82],118:[2,82],120:[2,82],121:[2,82],122:[2,82]},{32:[1,174],120:[1,115]},{67:[1,175]},{13:[2,141],20:[2,141],31:[2,141],32:[2,141],49:[2,141],51:[2,141],77:[2,141],78:[2,141],80:[2,141],81:[2,141],82:[2,141],86:[2,141],92:[2,141],94:[2,141],96:[2,141],97:[2,141],100:[2,141],101:[2,141],102:[2,141],103:[2,141],110:[2,141],112:[2,141],114:[2,141],116:[2,141],118:[2,141],120:[2,141],121:[2,141],122:[2,141]},{13:[1,176]},{143:[1,177]},{78:[1,178]},{51:[1,179],78:[2,66],120:[1,115]},{13:[2,135],20:[2,135],31:[2,135],32:[2,135],49:[2,135],51:[2,135],77:[2,135],78:[2,135],80:[2,135],81:[2,135],82:[2,135],86:[2,135],92:[2,135],94:[2,135],96:[2,135],97:[2,135],100:[2,135],101:[2,135],102:[2,135],103:[2,135],110:[2,135],112:[2,135],114:[2,135],116:[2,135],118:[2,135],120:[2,135],121:[2,135],122:[2,135],139:[2,135],140:[2,135]},{13:[2,137],20:[2,137],31:[2,137],32:[2,137],49:[2,137],51:[2,137],77:[2,137],78:[2,137],80:[2,137],81:[2,137],82:[2,137],86:[2,137],92:[2,137],94:[2,137],96:[2,137],97:[2,137],100:[2,137],101:[2,137],102:[2,137],103:[2,137],110:[2,137],112:[2,137],114:[2,137],116:[2,137],118:[2,137],120:[2,137],121:[2,137],122:[2,137]},{13:[2,51],23:[2,51],29:[2,51],30:[2,51],31:[2,51],32:[2,51],49:[2,51],51:[2,51],55:[2,51],59:[2,51]},{20:[2,54]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:180,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:69,119:68,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{32:[2,41]},{20:[1,181],120:[1,115]},{32:[2,60],51:[2,60]},{32:[2,61],51:[2,61]},{32:[2,62],51:[2,62]},{13:[2,23],23:[2,23],29:[2,23],30:[2,23],55:[2,23],59:[2,23]},{13:[2,25],23:[2,25],29:[2,25],30:[2,25],36:[1,182],55:[2,25],59:[2,25]},{13:[2,27],23:[2,27],29:[2,27],30:[2,27],35:183,36:[2,27],37:[2,27],38:157,39:[1,158],55:[2,27],59:[2,27]},{9:184,49:[1,11]},{118:[1,116],121:[1,185]},{13:[2,115],20:[2,115],32:[2,115],49:[2,115],51:[2,115],78:[2,115],116:[1,117],118:[2,115],120:[2,115],121:[2,115],122:[2,115]},{13:[2,113],20:[2,113],32:[2,113],49:[2,113],51:[2,113],78:[2,113],114:[1,118],116:[2,113],118:[2,113],120:[2,113],121:[2,113],122:[2,113]},{13:[2,111],20:[2,111],32:[2,111],49:[2,111],51:[2,111],78:[2,111],112:[1,119],114:[2,111],116:[2,111],118:[2,111],120:[2,111],121:[2,111],122:[2,111]},{13:[2,109],20:[2,109],32:[2,109],49:[2,109],51:[2,109],78:[2,109],110:[1,120],112:[2,109],114:[2,109],116:[2,109],118:[2,109],120:[2,109],121:[2,109],122:[2,109]},{13:[2,107],20:[2,107],32:[2,107],49:[2,107],51:[2,107],78:[2,107],99:121,100:[1,122],101:[1,123],102:[1,124],103:[1,125],110:[2,107],112:[2,107],114:[2,107],116:[2,107],118:[2,107],120:[2,107],121:[2,107],122:[2,107]},{13:[2,101],20:[2,101],32:[2,101],49:[2,101],51:[2,101],78:[2,101],95:126,96:[1,127],97:[1,128],100:[2,101],101:[2,101],102:[2,101],103:[2,101],110:[2,101],112:[2,101],114:[2,101],116:[2,101],118:[2,101],120:[2,101],121:[2,101],122:[2,101]},{13:[2,95],20:[2,95],32:[2,95],49:[2,95],51:[2,95],78:[2,95],94:[1,129],96:[2,95],97:[2,95],100:[2,95],101:[2,95],102:[2,95],103:[2,95],110:[2,95],112:[2,95],114:[2,95],116:[2,95],118:[2,95],120:[2,95],121:[2,95],122:[2,95]},{13:[2,91],20:[2,91],32:[2,91],49:[2,91],51:[2,91],78:[2,91],92:[1,130],94:[2,91],96:[2,91],97:[2,91],100:[2,91],101:[2,91],102:[2,91],103:[2,91],110:[2,91],112:[2,91],114:[2,91],116:[2,91],118:[2,91],120:[2,91],121:[2,91],122:[2,91]},{13:[2,89],20:[2,89],32:[2,89],49:[2,89],51:[2,89],78:[2,89],86:[1,131],92:[2,89],94:[2,89],96:[2,89],97:[2,89],100:[2,89],101:[2,89],102:[2,89],103:[2,89],110:[2,89],112:[2,89],114:[2,89],116:[2,89],118:[2,89],120:[2,89],121:[2,89],122:[2,89]},{13:[2,84],20:[2,84],32:[2,84],49:[2,84],51:[2,84],78:[2,84],86:[2,84],92:[2,84],94:[2,84],96:[2,84],97:[2,84],100:[2,84],101:[2,84],102:[2,84],103:[2,84],110:[2,84],112:[2,84],114:[2,84],116:[2,84],118:[2,84],120:[2,84],121:[2,84],122:[2,84]},{78:[1,186],120:[1,115]},{13:[2,74],20:[2,74],31:[2,74],32:[2,74],49:[2,74],51:[2,74],77:[2,74],78:[2,74],80:[2,74],81:[2,74],82:[2,74],86:[2,74],92:[2,74],94:[2,74],96:[2,74],97:[2,74],100:[2,74],101:[2,74],102:[2,74],103:[2,74],110:[2,74],112:[2,74],114:[2,74],116:[2,74],118:[2,74],120:[2,74],121:[2,74],122:[2,74]},{32:[1,187],51:[1,188]},{32:[2,79],51:[2,79]},{13:[2,71],20:[2,71],31:[2,71],32:[2,71],49:[2,71],51:[2,71],77:[2,71],78:[2,71],80:[2,71],81:[2,71],82:[2,71],86:[2,71],92:[2,71],94:[2,71],96:[2,71],97:[2,71],100:[2,71],101:[2,71],102:[2,71],103:[2,71],110:[2,71],112:[2,71],114:[2,71],116:[2,71],118:[2,71],120:[2,71],121:[2,71],122:[2,71]},{13:[2,139],20:[2,139],31:[2,139],32:[2,139],49:[2,139],51:[2,139],77:[2,139],78:[2,139],80:[2,139],81:[2,139],82:[2,139],86:[2,139],92:[2,139],94:[2,139],96:[2,139],97:[2,139],100:[2,139],101:[2,139],102:[2,139],103:[2,139],110:[2,139],112:[2,139],114:[2,139],116:[2,139],118:[2,139],120:[2,139],121:[2,139],122:[2,139],140:[1,189]},{13:[2,143],20:[2,143],31:[2,143],32:[2,143],49:[2,143],51:[2,143],77:[2,143],78:[2,143],80:[2,143],81:[2,143],82:[2,143],86:[2,143],92:[2,143],94:[2,143],96:[2,143],97:[2,143],100:[2,143],101:[2,143],102:[2,143],103:[2,143],110:[2,143],112:[2,143],114:[2,143],116:[2,143],118:[2,143],120:[2,143],121:[2,143],122:[2,143]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:190,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:69,119:68,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{13:[2,142],20:[2,142],31:[2,142],32:[2,142],49:[2,142],51:[2,142],77:[2,142],78:[2,142],80:[2,142],81:[2,142],82:[2,142],86:[2,142],92:[2,142],94:[2,142],96:[2,142],97:[2,142],100:[2,142],101:[2,142],102:[2,142],103:[2,142],110:[2,142],112:[2,142],114:[2,142],116:[2,142],118:[2,142],120:[2,142],121:[2,142],122:[2,142]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:144,67:[1,99],72:191,73:82,74:85,75:[1,86],76:80,77:[1,97],78:[2,67],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:69,119:68,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{20:[2,56],49:[2,56],120:[1,115]},{13:[2,47],23:[2,47],29:[2,47],30:[2,47],55:[2,47],59:[2,47]},{35:192,38:157,39:[1,158]},{13:[2,26],23:[2,26],29:[2,26],30:[2,26],36:[2,26],37:[2,26],55:[2,26],59:[2,26]},{40:[1,193]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:194,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],83:79,84:81,85:78,91:77,93:76,98:75,104:74,109:73,111:72,113:71,115:70,117:69,119:68,123:[1,83],124:88,125:89,126:90,129:98,130:[1,102],131:[1,103],132:91,133:92,134:[1,93],135:94,136:95,137:[1,101],138:[1,100]},{13:[2,73],20:[2,73],31:[2,73],32:[2,73],49:[2,73],51:[2,73],77:[2,73],78:[2,73],80:[2,73],81:[2,73],82:[2,73],86:[2,73],92:[2,73],94:[2,73],96:[2,73],97:[2,73],100:[2,73],101:[2,73],102:[2,73],103:[2,73],110:[2,73],112:[2,73],114:[2,73],116:[2,73],118:[2,73],120:[2,73],121:[2,73],122:[2,73]},{13:[2,75],20:[2,75],31:[2,75],32:[2,75],49:[2,75],51:[2,75],77:[2,75],78:[2,75],80:[2,75],81:[2,75],82:[2,75],86:[2,75],92:[2,75],94:[2,75],96:[2,75],97:[2,75],100:[2,75],101:[2,75],102:[2,75],103:[2,75],110:[2,75],112:[2,75],114:[2,75],116:[2,75],118:[2,75],120:[2,75],121:[2,75],122:[2,75]},{9:47,31:[1,48],49:[1,11],61:46,62:195},{13:[2,140],20:[2,140],31:[2,140],32:[2,140],49:[2,140],51:[2,140],77:[2,140],78:[2,140],80:[2,140],81:[2,140],82:[2,140],86:[2,140],92:[2,140],94:[2,140],96:[2,140],97:[2,140],100:[2,140],101:[2,140],102:[2,140],103:[2,140],110:[2,140],112:[2,140],114:[2,140],116:[2,140],118:[2,140],120:[2,140],121:[2,140],122:[2,140]},{13:[2,145],51:[1,196],120:[1,115]},{78:[2,65]},{37:[1,197]},{13:[2,28],23:[2,28],29:[2,28],30:[2,28],36:[2,28],37:[2,28],39:[2,28],41:198,42:[1,199],44:[1,200],55:[2,28],59:[2,28]},{120:[1,115],122:[1,201]},{32:[2,80],51:[2,80]},{13:[2,146],141:202,142:[1,142]},{13:[2,24],23:[2,24],29:[2,24],30:[2,24],55:[2,24],59:[2,24]},{13:[2,29],23:[2,29],29:[2,29],30:[2,29],36:[2,29],37:[2,29],39:[2,29],55:[2,29],59:[2,29]},{43:203,45:[1,204],47:[1,205],48:[1,206]},{43:207,45:[1,204],47:[1,205],48:[1,206]},{13:[2,117],20:[2,117],32:[2,117],49:[2,117],51:[2,117],78:[2,117],120:[2,117],122:[2,117]},{13:[2,144]},{13:[2,31],23:[2,31],29:[2,31],30:[2,31],36:[2,31],37:[2,31],39:[2,31],44:[1,208],55:[2,31],59:[2,31]},{46:[1,209]},{46:[1,210]},{46:[1,211]},{13:[2,32],23:[2,32],29:[2,32],30:[2,32],36:[2,32],37:[2,32],39:[2,32],55:[2,32],59:[2,32]},{43:212,45:[1,204],47:[1,205],48:[1,206]},{13:[2,36],23:[2,36],29:[2,36],30:[2,36],36:[2,36],37:[2,36],39:[2,36],44:[2,36],47:[1,213],48:[1,214],55:[2,36],59:[2,36]},{48:[1,215]},{13:[2,37],23:[2,37],29:[2,37],30:[2,37],36:[2,37],37:[2,37],39:[2,37],44:[2,37],55:[2,37],59:[2,37]},{13:[2,30],23:[2,30],29:[2,30],30:[2,30],36:[2,30],37:[2,30],39:[2,30],55:[2,30],59:[2,30]},{46:[1,216]},{46:[1,217]},{46:[1,218]},{48:[1,219]},{13:[2,35],23:[2,35],29:[2,35],30:[2,35],36:[2,35],37:[2,35],39:[2,35],44:[2,35],55:[2,35],59:[2,35]},{13:[2,34],23:[2,34],29:[2,34],30:[2,34],36:[2,34],37:[2,34],39:[2,34],44:[2,34],55:[2,34],59:[2,34]},{46:[1,220]},{13:[2,33],23:[2,33],29:[2,33],30:[2,33],36:[2,33],37:[2,33],39:[2,33],44:[2,33],55:[2,33],59:[2,33]}],
defaultActions: {7:[2,1],17:[2,16],29:[2,9],30:[2,10],32:[2,38],110:[2,57],112:[2,44],148:[2,54],150:[2,41],191:[2,65],202:[2,144]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore blank */
break;
case 1:/* ignore blank */
break;
case 2:/* ignore comment */
break;
case 3:/* ignore comment */
break;
case 4:return 8;
break;
case 5:return 10;
break;
case 6:return 'USES';
break;
case 7:return 70;
break;
case 8:return 71;
break;
case 9:return 23;
break;
case 10:return 'TEST';
break;
case 11:return 'IMAGE';
break;
case 12:return 17;
break;
case 13:return 'NEEDS';
break;
case 14:return 59;
break;
case 15:return 30;
break;
case 16:return 42;
break;
case 17:return 44;
break;
case 18:return 45;
break;
case 19:return 47;
break;
case 20:return 48;
break;
case 21:return 'MAP';
break;
case 22:return 'FOR';
break;
case 23:return 68;
break;
case 24:return 67;
break;
case 25:return 138;
break;
case 26:return 134;
break;
case 27:return 137;
break;
case 28:return 49;
break;
case 29:return 'REDUCE';
break;
case 30:return 120;
break;
case 31:return 'INT';
break;
case 32:return 'LONG';
break;
case 33:return 'FLOAT';
break;
case 34:return 'DOUBLE';
break;
case 35:return 121;
break;
case 36:return 'ELSEIF';
break;
case 37:return 122; 
break;
case 38:return 55;
break;
case 39:return 57;
break;
case 40:return 'XPATHSTART';
break;
case 41:return 'XPATHEND';
break;
case 42:return 39;
break;
case 43:return 40;
break;
case 44:return 'ESCAPE';	
break;
case 45:return 'ELLIPSIS';
break;
case 46:return 106;
break;
case 47:return 107;
break;
case 48:return 100;
break;
case 49:return 101;
break;
case 50:return 102;
break;
case 51:return 103;
break;
case 52:return 96;
break;
case 53:return 97;
break;
case 54:return 56;
break;
case 55:return 33;
break;
case 56:return 63;
break;
case 57:return 130;
break;
case 58:return 131;
break;
case 59:return 88;
break;
case 60:return 89;
break;
case 61:return 90;
break;
case 62:return 118;
break;
case 63:return 22;
break;
case 64:return 116;
break;
case 65:return 110;
break;
case 66:return 114;
break;
case 67:return 112;
break;
case 68:return 123;
break;
case 69:return 86;
break;
case 70:return 'QUESTION';
break;
case 71:return 82;
break;
case 72:return 11;
break;
case 73:return 13;
break;
case 74:return 31;
break;
case 75:return 32;
break;
case 76:return 77;
break;
case 77:return 78;
break;
case 78:return 143;
break;
case 79:return 20;
break;
case 80:return 51;
break;
case 81:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75;
break;
case 82:return 139;
break;
case 83:
					if (typeof yy._iemitstack === 'undefined') {
						yy._iemitstack = [0];
					}
					var indentation = lexeme.length;

				    col += indentation;
				
				    if (indentation > yy._iemitstack[0]) {
				        yy._iemitstack.unshift(indentation);
				        return "INDENT";
				    }
				
				    var tokens = [];
				
				    while (indentation < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				
				    if (tokens.length) return tokens;
				
break;
case 84:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\s*\n\s*)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:theory\b)/,/^(?:extends\b)/,/^(?:uses\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:namespace\b)/,/^(?:test\b)/,/^(?:image\b)/,/^(?:data\b)/,/^(?:needs\b)/,/^(?:fn\b)/,/^(?:ff\b)/,/^(?:->)/,/^(?:<-)/,/^(?:style\b)/,/^(?:where\b)/,/^(?:yield\b)/,/^(?:map\b)/,/^(?:for\b)/,/^(?:null\b)/,/^(?:([0-9])+)/,/^(?:0x([0-9A-Fa-f])+)/,/^(?:([0-1])+b\b)/,/^(?:#([0-9A-Fa-f])+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:reduce\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:else\s+if\b)/,/^(?:endif\b)/,/^(?:\[--)/,/^(?:--\])/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\\)/,/^(?:\.\.\.)/,/^(?:eq|==)/,/^(?:neq|!=)/,/^(?:gt|>)/,/^(?:lt|<)/,/^(?:gte|>=)/,/^(?:lte|<=)/,/^(?:<<)/,/^(?:>>)/,/^(?:::)/,/^(?:=)/,/^(?:@=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%|mod\b)/,/^(?:\|\||or\b)/,/^(?:\|)/,/^(?:&&|and\b)/,/^(?:&)/,/^(?:\|)/,/^(?:\^|xor\b)/,/^(?:not|!)/,/^(?:\*\*)/,/^(?:\?)/,/^(?:\?!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:".*")/,/^(?:\.)/,/^(?:(?=^)\s*(?=gm))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = theory;
exports.Parser = theory.Parser;
exports.parse = function () { return theory.parse.apply(theory, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}