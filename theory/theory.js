/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var theory = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"bodylist":4,"ENDOFFILE":5,"namespace":6,"theory":7,"THEORY":8,"id":9,"EXTENDS":10,"LBRACE":11,"theorybody":12,"RBRACE":13,"deflist":14,"nslist":15,"data":16,"DATA":17,"paramlist":18,"dtypelist":19,"EOL":20,"paramdef":21,"PIPE":22,"PREFIX":23,"nsbody":24,"def":25,"sdef":26,"fdef":27,"ffdef":28,"tfdef":29,"FRAGFUNC":30,"LPAREN":31,"RPAREN":32,"ASSIGN":33,"ffnodetree":34,"ffnodelist":35,"INDENT":36,"DEINDENT":37,"ffnode":38,"LFFNODE":39,"RFFNODE":40,"ffimplist":41,"IMPLICATION":42,"fragexpr":43,"REVIMPLICATION":44,"STYLE":45,"expr":46,"WHERE":47,"YIELD":48,"ID":49,"tuplevarlist":50,"COMMA":51,"typedef":52,"LBRACK":53,"RBRACK":54,"SETSTART":55,"TYPIFY":56,"SETEND":57,"assignment_list":58,"FUNCTION":59,"expression":60,"lside":61,"assignment":62,"CASEASSIGN":63,"caselist":64,"casedef":65,"lit":66,"NATLITERAL":67,"NULL":68,"boollit":69,"TRUE":70,"FALSE":71,"elist":72,"atom":73,"constant":74,"STRING_LIT":75,"postfix_expression":76,"LBRACKET":77,"RBRACKET":78,"INC_OP":79,"DEC_OP":80,"EXCUSEME":81,"unary_expression":82,"unary_op":83,"power_expression":84,"POWER":85,"muldivmod":86,"TIMES":87,"DIVIDE":88,"MOD":89,"multiplicative_expression":90,"MULDIVMOD":91,"additive_expression":92,"ADDSUB":93,"shift":94,"SHIFTL":95,"SHIFTR":96,"shift_expression":97,"compare":98,"GT":99,"LT":100,"GTE":101,"LTE":102,"relational_expression":103,"equiv":104,"EQ":105,"NEQ":106,"equivalence_expression":107,"and_expression":108,"B_AND":109,"xor_expression":110,"XOR":111,"ior_expression":112,"B_OR":113,"logical_and_expression":114,"AND":115,"logical_or_expression":116,"OR":117,"conditional_expression":118,"IF":119,"ELSE":120,"ENDIF":121,"NOT":122,"number":123,"dict":124,"array":125,"integer":126,"hexint":127,"BINNATLITERAL":128,"float":129,"color":130,"HEXCOLOR":131,"MINUS":132,"HEXNATLITERAL":133,"DOT":134,"f":135,"colondeflist":136,"string":137,"COLON":138,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",8:"THEORY",10:"EXTENDS",11:"LBRACE",13:"RBRACE",15:"nslist",17:"DATA",20:"EOL",22:"PIPE",23:"PREFIX",29:"tfdef",30:"FRAGFUNC",31:"LPAREN",32:"RPAREN",33:"ASSIGN",36:"INDENT",37:"DEINDENT",39:"LFFNODE",40:"RFFNODE",42:"IMPLICATION",44:"REVIMPLICATION",45:"STYLE",46:"expr",47:"WHERE",48:"YIELD",49:"ID",51:"COMMA",53:"LBRACK",54:"RBRACK",55:"SETSTART",56:"TYPIFY",57:"SETEND",59:"FUNCTION",63:"CASEASSIGN",67:"NATLITERAL",68:"NULL",70:"TRUE",71:"FALSE",75:"STRING_LIT",77:"LBRACKET",78:"RBRACKET",79:"INC_OP",80:"DEC_OP",81:"EXCUSEME",85:"POWER",87:"TIMES",88:"DIVIDE",89:"MOD",91:"MULDIVMOD",93:"ADDSUB",95:"SHIFTL",96:"SHIFTR",99:"GT",100:"LT",101:"GTE",102:"LTE",105:"EQ",106:"NEQ",109:"B_AND",111:"XOR",113:"B_OR",115:"AND",117:"OR",119:"IF",120:"ELSE",121:"ENDIF",122:"NOT",128:"BINNATLITERAL",131:"HEXCOLOR",132:"MINUS",133:"HEXNATLITERAL",134:"DOT",135:"f",137:"string",138:"COLON"},
productions_: [0,[3,2],[3,0],[4,1],[4,1],[4,2],[4,2],[7,7],[7,5],[12,1],[12,1],[12,0],[16,4],[19,4],[19,1],[6,5],[24,1],[24,0],[25,1],[25,1],[25,1],[25,1],[25,1],[28,7],[34,4],[34,1],[35,2],[35,1],[38,3],[38,4],[41,4],[41,2],[41,2],[43,6],[43,4],[43,4],[43,2],[43,2],[14,2],[14,1],[9,1],[50,3],[50,1],[52,1],[52,3],[26,6],[26,4],[27,8],[61,1],[61,3],[62,3],[62,3],[58,1],[58,2],[64,2],[64,0],[65,3],[18,3],[18,1],[21,2],[21,4],[66,1],[66,1],[69,1],[69,1],[72,3],[72,1],[72,0],[73,1],[73,1],[73,1],[73,3],[76,1],[76,4],[76,3],[76,2],[76,2],[76,2],[82,1],[82,2],[84,1],[84,3],[86,1],[86,1],[86,1],[90,1],[90,3],[92,1],[92,3],[94,1],[94,1],[97,1],[97,3],[98,1],[98,1],[98,1],[98,1],[103,1],[103,3],[104,1],[104,1],[107,1],[107,3],[108,1],[108,3],[110,1],[110,3],[112,1],[112,3],[114,1],[114,3],[116,1],[116,3],[118,1],[118,6],[60,1],[83,1],[74,1],[74,1],[74,1],[123,1],[123,1],[123,1],[123,1],[123,1],[130,1],[126,2],[126,1],[127,2],[127,1],[129,3],[129,4],[129,2],[125,3],[124,3],[136,5],[136,3],[136,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return theorylist; 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = [$$[$0]]; 
break;
case 5: this.$ = $$[$0-1]; this.$.unshift($$[$0]); 
break;
case 6: this.$ = $$[$0-1]; this.$.unshift($$[$0]); 
break;
case 7: this.$ = new yy.Theory($$[$0-5], $$[$0-1], $$[$0-3]); 
break;
case 8: this.$ = new yy.Theory($$[$0-3], $$[$0-1]); 
break;
case 11: this.$ = []; 
break;
case 13: this.$ = $$[$0-1]; this.$.unshift($$[$0-3]); 
break;
case 14: this.$ = [$$[$0]]; 
break;
case 38: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 39: this.$ = [$$[$0]]; 
break;
case 41: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 42: this.$ = [ $$[$0] ]; 
break;
case 43: this.$ = new yy.Type($$[$0]); 
break;
case 44: this.$ = new yy.Type("Array", $$[$0-2]); 
break;
case 45: this.$ = new yy.SetDef($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 46: this.$ = new yy.SetDef($$[$0-2], $$[$0-2], $$[$0]); 
break;
case 47: this.$ = new yy.FnDef($$[$0-6], $$[$0-4], null, $$[$0-1]); 
break;
case 48: this.$ = [ $$[$0] ]; 
break;
case 49: this.$ = $$[$0-1]; 
break;
case 50: this.$ = new yy.Assignment($$[$0-2], $$[$0]); 
break;
case 51: this.$ = new yy.CaseAssignment($$[$0-2], $$[$0]); 
break;
case 52: this.$ = [ $$[$0] ]; 
break;
case 53: this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 54: this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 55: this.$ = []; 
break;
case 56: this.$ = new yy.CaseDef($$[$0-2], $$[$0]); 
break;
case 57: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 58: this.$ = [ $$[$0] ]; 
break;
case 59: this.$ = new yy.ParamDef($$[$0-1], $$[$0]); 
break;
case 60: this.$ = new yy.ParamDef($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 61: this.$ = parseInt($$[$0]); 
break;
case 62: this.$ = null; 
break;
case 63: this.$ = true; 
break;
case 64: this.$ = false; 
break;
case 65: this.$ = $$[$0]; this.$.unshift(e); 
break;
case 66: this.$ = [ e ]; 
break;
}
},
table: [{1:[2,2],3:1,4:2,6:3,7:4,8:[1,6],23:[1,5]},{1:[3]},{5:[1,7],6:9,7:8,8:[1,6],23:[1,5]},{5:[2,3],8:[2,3],23:[2,3]},{5:[2,4],8:[2,4],23:[2,4]},{9:10,49:[1,11]},{9:12,49:[1,11]},{1:[2,1]},{5:[2,5],8:[2,5],23:[2,5]},{5:[2,6],8:[2,6],23:[2,6]},{11:[1,13]},{10:[2,40],11:[2,40],13:[2,40],20:[2,40],23:[2,40],29:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],40:[2,40],42:[2,40],49:[2,40],51:[2,40],53:[2,40],55:[2,40],56:[2,40],57:[2,40],59:[2,40],63:[2,40],77:[2,40],78:[2,40],79:[2,40],80:[2,40],81:[2,40],85:[2,40],91:[2,40],93:[2,40],95:[2,40],96:[2,40],99:[2,40],100:[2,40],101:[2,40],102:[2,40],109:[2,40],111:[2,40],113:[2,40],115:[2,40],117:[2,40],119:[2,40],120:[2,40],121:[2,40]},{10:[1,14],11:[1,15]},{6:23,13:[2,17],14:17,23:[1,5],24:16,25:18,26:19,27:20,28:21,29:[1,22],30:[1,26],55:[1,24],59:[1,25]},{9:27,49:[1,11]},{6:23,12:28,13:[2,11],14:29,15:[1,30],23:[1,5],25:18,26:19,27:20,28:21,29:[1,22],30:[1,26],55:[1,24],59:[1,25]},{13:[1,31]},{13:[2,16]},{6:23,13:[2,39],14:32,23:[1,5],25:18,26:19,27:20,28:21,29:[1,22],30:[1,26],55:[1,24],59:[1,25]},{13:[2,18],23:[2,18],29:[2,18],30:[2,18],55:[2,18],59:[2,18]},{13:[2,19],23:[2,19],29:[2,19],30:[2,19],55:[2,19],59:[2,19]},{13:[2,20],23:[2,20],29:[2,20],30:[2,20],55:[2,20],59:[2,20]},{13:[2,21],23:[2,21],29:[2,21],30:[2,21],55:[2,21],59:[2,21]},{13:[2,22],23:[2,22],29:[2,22],30:[2,22],55:[2,22],59:[2,22]},{9:33,49:[1,11]},{9:34,49:[1,11]},{9:35,49:[1,11]},{11:[1,36]},{13:[1,37]},{13:[2,9]},{13:[2,10]},{5:[2,15],8:[2,15],13:[2,15],23:[2,15],29:[2,15],30:[2,15],55:[2,15],59:[2,15]},{13:[2,38]},{56:[1,38],57:[1,39]},{31:[1,40]},{31:[1,41]},{6:23,12:42,13:[2,11],14:29,15:[1,30],23:[1,5],25:18,26:19,27:20,28:21,29:[1,22],30:[1,26],55:[1,24],59:[1,25]},{5:[2,8],8:[2,8],23:[2,8]},{9:43,49:[1,11]},{9:47,31:[1,48],49:[1,11],58:44,61:46,62:45},{9:52,18:49,21:50,49:[1,11],52:51},{9:52,18:53,21:50,49:[1,11],52:51},{13:[1,54]},{57:[1,55]},{13:[2,46],23:[2,46],29:[2,46],30:[2,46],55:[2,46],59:[2,46]},{9:47,13:[2,52],23:[2,52],29:[2,52],30:[2,52],31:[1,48],49:[1,11],55:[2,52],58:56,59:[2,52],61:46,62:45},{33:[1,57],63:[1,58]},{33:[2,48],63:[2,48]},{9:60,49:[1,11],50:59},{32:[1,61]},{32:[2,58],51:[1,62]},{9:63,49:[1,11]},{49:[2,43],53:[1,64]},{32:[1,65]},{5:[2,7],8:[2,7],23:[2,7]},{9:47,31:[1,48],49:[1,11],58:66,61:46,62:45},{13:[2,53],23:[2,53],29:[2,53],30:[2,53],55:[2,53],59:[2,53]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:67,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:69,118:68,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:104,13:[2,55],23:[2,55],29:[2,55],30:[2,55],31:[2,55],49:[1,11],55:[2,55],59:[2,55],64:102,65:103},{32:[1,105]},{32:[2,42],51:[1,106]},{42:[1,107]},{9:52,18:108,21:50,49:[1,11],52:51},{32:[2,59],33:[1,109],51:[2,59]},{54:[1,110]},{33:[1,111]},{13:[2,45],23:[2,45],29:[2,45],30:[2,45],55:[2,45],59:[2,45]},{13:[2,50],23:[2,50],29:[2,50],30:[2,50],31:[2,50],49:[2,50],55:[2,50],59:[2,50],119:[1,112]},{13:[2,115],20:[2,115],23:[2,115],29:[2,115],30:[2,115],31:[2,115],32:[2,115],49:[2,115],51:[2,115],55:[2,115],59:[2,115],78:[2,115],119:[2,115],121:[2,115]},{13:[2,113],20:[2,113],23:[2,113],29:[2,113],30:[2,113],31:[2,113],32:[2,113],49:[2,113],51:[2,113],55:[2,113],59:[2,113],78:[2,113],117:[1,113],119:[2,113],121:[2,113]},{13:[2,111],20:[2,111],23:[2,111],29:[2,111],30:[2,111],31:[2,111],32:[2,111],49:[2,111],51:[2,111],55:[2,111],59:[2,111],78:[2,111],115:[1,114],117:[2,111],119:[2,111],120:[2,111],121:[2,111]},{13:[2,109],20:[2,109],23:[2,109],29:[2,109],30:[2,109],31:[2,109],32:[2,109],49:[2,109],51:[2,109],55:[2,109],59:[2,109],78:[2,109],113:[1,115],115:[2,109],117:[2,109],119:[2,109],120:[2,109],121:[2,109]},{13:[2,107],20:[2,107],23:[2,107],29:[2,107],30:[2,107],31:[2,107],32:[2,107],49:[2,107],51:[2,107],55:[2,107],59:[2,107],78:[2,107],111:[1,116],113:[2,107],115:[2,107],117:[2,107],119:[2,107],120:[2,107],121:[2,107]},{13:[2,105],20:[2,105],23:[2,105],29:[2,105],30:[2,105],31:[2,105],32:[2,105],49:[2,105],51:[2,105],55:[2,105],59:[2,105],78:[2,105],109:[1,117],111:[2,105],113:[2,105],115:[2,105],117:[2,105],119:[2,105],120:[2,105],121:[2,105]},{13:[2,103],20:[2,103],23:[2,103],29:[2,103],30:[2,103],31:[2,103],32:[2,103],49:[2,103],51:[2,103],55:[2,103],59:[2,103],78:[2,103],98:118,99:[1,119],100:[1,120],101:[1,121],102:[1,122],109:[2,103],111:[2,103],113:[2,103],115:[2,103],117:[2,103],119:[2,103],120:[2,103],121:[2,103]},{13:[2,97],20:[2,97],23:[2,97],29:[2,97],30:[2,97],31:[2,97],32:[2,97],49:[2,97],51:[2,97],55:[2,97],59:[2,97],78:[2,97],94:123,95:[1,124],96:[1,125],99:[2,97],100:[2,97],101:[2,97],102:[2,97],109:[2,97],111:[2,97],113:[2,97],115:[2,97],117:[2,97],119:[2,97],120:[2,97],121:[2,97]},{13:[2,91],20:[2,91],23:[2,91],29:[2,91],30:[2,91],31:[2,91],32:[2,91],49:[2,91],51:[2,91],55:[2,91],59:[2,91],78:[2,91],93:[1,126],95:[2,91],96:[2,91],99:[2,91],100:[2,91],101:[2,91],102:[2,91],109:[2,91],111:[2,91],113:[2,91],115:[2,91],117:[2,91],119:[2,91],120:[2,91],121:[2,91]},{13:[2,87],20:[2,87],23:[2,87],29:[2,87],30:[2,87],31:[2,87],32:[2,87],49:[2,87],51:[2,87],55:[2,87],59:[2,87],78:[2,87],91:[1,127],93:[2,87],95:[2,87],96:[2,87],99:[2,87],100:[2,87],101:[2,87],102:[2,87],109:[2,87],111:[2,87],113:[2,87],115:[2,87],117:[2,87],119:[2,87],120:[2,87],121:[2,87]},{13:[2,85],20:[2,85],23:[2,85],29:[2,85],30:[2,85],31:[2,85],32:[2,85],49:[2,85],51:[2,85],55:[2,85],59:[2,85],78:[2,85],85:[1,128],91:[2,85],93:[2,85],95:[2,85],96:[2,85],99:[2,85],100:[2,85],101:[2,85],102:[2,85],109:[2,85],111:[2,85],113:[2,85],115:[2,85],117:[2,85],119:[2,85],120:[2,85],121:[2,85]},{13:[2,80],20:[2,80],23:[2,80],29:[2,80],30:[2,80],31:[2,80],32:[2,80],49:[2,80],51:[2,80],55:[2,80],59:[2,80],78:[2,80],85:[2,80],91:[2,80],93:[2,80],95:[2,80],96:[2,80],99:[2,80],100:[2,80],101:[2,80],102:[2,80],109:[2,80],111:[2,80],113:[2,80],115:[2,80],117:[2,80],119:[2,80],120:[2,80],121:[2,80]},{13:[2,78],20:[2,78],23:[2,78],29:[2,78],30:[2,78],31:[1,130],32:[2,78],49:[2,78],51:[2,78],55:[2,78],59:[2,78],77:[1,129],78:[2,78],79:[1,131],80:[1,132],81:[1,133],85:[2,78],91:[2,78],93:[2,78],95:[2,78],96:[2,78],99:[2,78],100:[2,78],101:[2,78],102:[2,78],109:[2,78],111:[2,78],113:[2,78],115:[2,78],117:[2,78],119:[2,78],120:[2,78],121:[2,78]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:134,77:[1,97],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{13:[2,72],20:[2,72],23:[2,72],29:[2,72],30:[2,72],31:[2,72],32:[2,72],49:[2,72],51:[2,72],55:[2,72],59:[2,72],77:[2,72],78:[2,72],79:[2,72],80:[2,72],81:[2,72],85:[2,72],91:[2,72],93:[2,72],95:[2,72],96:[2,72],99:[2,72],100:[2,72],101:[2,72],102:[2,72],109:[2,72],111:[2,72],113:[2,72],115:[2,72],117:[2,72],119:[2,72],120:[2,72],121:[2,72]},{11:[2,116],31:[2,116],49:[2,116],67:[2,116],75:[2,116],77:[2,116],128:[2,116],131:[2,116],132:[2,116],133:[2,116]},{13:[2,68],20:[2,68],23:[2,68],29:[2,68],30:[2,68],31:[2,68],32:[2,68],49:[2,68],51:[2,68],55:[2,68],59:[2,68],77:[2,68],78:[2,68],79:[2,68],80:[2,68],81:[2,68],85:[2,68],91:[2,68],93:[2,68],95:[2,68],96:[2,68],99:[2,68],100:[2,68],101:[2,68],102:[2,68],109:[2,68],111:[2,68],113:[2,68],115:[2,68],117:[2,68],119:[2,68],120:[2,68],121:[2,68]},{13:[2,69],20:[2,69],23:[2,69],29:[2,69],30:[2,69],31:[2,69],32:[2,69],49:[2,69],51:[2,69],55:[2,69],59:[2,69],77:[2,69],78:[2,69],79:[2,69],80:[2,69],81:[2,69],85:[2,69],91:[2,69],93:[2,69],95:[2,69],96:[2,69],99:[2,69],100:[2,69],101:[2,69],102:[2,69],109:[2,69],111:[2,69],113:[2,69],115:[2,69],117:[2,69],119:[2,69],120:[2,69],121:[2,69]},{13:[2,70],20:[2,70],23:[2,70],29:[2,70],30:[2,70],31:[2,70],32:[2,70],49:[2,70],51:[2,70],55:[2,70],59:[2,70],77:[2,70],78:[2,70],79:[2,70],80:[2,70],81:[2,70],85:[2,70],91:[2,70],93:[2,70],95:[2,70],96:[2,70],99:[2,70],100:[2,70],101:[2,70],102:[2,70],109:[2,70],111:[2,70],113:[2,70],115:[2,70],117:[2,70],119:[2,70],120:[2,70],121:[2,70]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:135,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:69,118:68,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{13:[2,117],20:[2,117],23:[2,117],29:[2,117],30:[2,117],31:[2,117],32:[2,117],49:[2,117],51:[2,117],55:[2,117],59:[2,117],77:[2,117],78:[2,117],79:[2,117],80:[2,117],81:[2,117],85:[2,117],91:[2,117],93:[2,117],95:[2,117],96:[2,117],99:[2,117],100:[2,117],101:[2,117],102:[2,117],109:[2,117],111:[2,117],113:[2,117],115:[2,117],117:[2,117],119:[2,117],120:[2,117],121:[2,117]},{13:[2,118],20:[2,118],23:[2,118],29:[2,118],30:[2,118],31:[2,118],32:[2,118],49:[2,118],51:[2,118],55:[2,118],59:[2,118],77:[2,118],78:[2,118],79:[2,118],80:[2,118],81:[2,118],85:[2,118],91:[2,118],93:[2,118],95:[2,118],96:[2,118],99:[2,118],100:[2,118],101:[2,118],102:[2,118],109:[2,118],111:[2,118],113:[2,118],115:[2,118],117:[2,118],119:[2,118],120:[2,118],121:[2,118]},{13:[2,119],20:[2,119],23:[2,119],29:[2,119],30:[2,119],31:[2,119],32:[2,119],49:[2,119],51:[2,119],55:[2,119],59:[2,119],77:[2,119],78:[2,119],79:[2,119],80:[2,119],81:[2,119],85:[2,119],91:[2,119],93:[2,119],95:[2,119],96:[2,119],99:[2,119],100:[2,119],101:[2,119],102:[2,119],109:[2,119],111:[2,119],113:[2,119],115:[2,119],117:[2,119],119:[2,119],120:[2,119],121:[2,119]},{13:[2,120],20:[2,120],23:[2,120],29:[2,120],30:[2,120],31:[2,120],32:[2,120],49:[2,120],51:[2,120],55:[2,120],59:[2,120],77:[2,120],78:[2,120],79:[2,120],80:[2,120],81:[2,120],85:[2,120],91:[2,120],93:[2,120],95:[2,120],96:[2,120],99:[2,120],100:[2,120],101:[2,120],102:[2,120],109:[2,120],111:[2,120],113:[2,120],115:[2,120],117:[2,120],119:[2,120],120:[2,120],121:[2,120],134:[1,136],135:[1,137]},{13:[2,121],20:[2,121],23:[2,121],29:[2,121],30:[2,121],31:[2,121],32:[2,121],49:[2,121],51:[2,121],55:[2,121],59:[2,121],77:[2,121],78:[2,121],79:[2,121],80:[2,121],81:[2,121],85:[2,121],91:[2,121],93:[2,121],95:[2,121],96:[2,121],99:[2,121],100:[2,121],101:[2,121],102:[2,121],109:[2,121],111:[2,121],113:[2,121],115:[2,121],117:[2,121],119:[2,121],120:[2,121],121:[2,121]},{13:[2,122],20:[2,122],23:[2,122],29:[2,122],30:[2,122],31:[2,122],32:[2,122],49:[2,122],51:[2,122],55:[2,122],59:[2,122],77:[2,122],78:[2,122],79:[2,122],80:[2,122],81:[2,122],85:[2,122],91:[2,122],93:[2,122],95:[2,122],96:[2,122],99:[2,122],100:[2,122],101:[2,122],102:[2,122],109:[2,122],111:[2,122],113:[2,122],115:[2,122],117:[2,122],119:[2,122],120:[2,122],121:[2,122]},{13:[2,123],20:[2,123],23:[2,123],29:[2,123],30:[2,123],31:[2,123],32:[2,123],49:[2,123],51:[2,123],55:[2,123],59:[2,123],77:[2,123],78:[2,123],79:[2,123],80:[2,123],81:[2,123],85:[2,123],91:[2,123],93:[2,123],95:[2,123],96:[2,123],99:[2,123],100:[2,123],101:[2,123],102:[2,123],109:[2,123],111:[2,123],113:[2,123],115:[2,123],117:[2,123],119:[2,123],120:[2,123],121:[2,123]},{13:[2,124],20:[2,124],23:[2,124],29:[2,124],30:[2,124],31:[2,124],32:[2,124],49:[2,124],51:[2,124],55:[2,124],59:[2,124],77:[2,124],78:[2,124],79:[2,124],80:[2,124],81:[2,124],85:[2,124],91:[2,124],93:[2,124],95:[2,124],96:[2,124],99:[2,124],100:[2,124],101:[2,124],102:[2,124],109:[2,124],111:[2,124],113:[2,124],115:[2,124],117:[2,124],119:[2,124],120:[2,124],121:[2,124]},{13:[2,137],136:138,137:[1,139]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:141,67:[1,99],72:140,73:82,74:85,75:[1,86],76:80,77:[1,97],78:[2,67],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:69,118:68,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{67:[1,142],133:[1,143]},{13:[2,127],20:[2,127],23:[2,127],29:[2,127],30:[2,127],31:[2,127],32:[2,127],49:[2,127],51:[2,127],55:[2,127],59:[2,127],77:[2,127],78:[2,127],79:[2,127],80:[2,127],81:[2,127],85:[2,127],91:[2,127],93:[2,127],95:[2,127],96:[2,127],99:[2,127],100:[2,127],101:[2,127],102:[2,127],109:[2,127],111:[2,127],113:[2,127],115:[2,127],117:[2,127],119:[2,127],120:[2,127],121:[2,127],134:[2,127],135:[2,127]},{13:[2,129],20:[2,129],23:[2,129],29:[2,129],30:[2,129],31:[2,129],32:[2,129],49:[2,129],51:[2,129],55:[2,129],59:[2,129],77:[2,129],78:[2,129],79:[2,129],80:[2,129],81:[2,129],85:[2,129],91:[2,129],93:[2,129],95:[2,129],96:[2,129],99:[2,129],100:[2,129],101:[2,129],102:[2,129],109:[2,129],111:[2,129],113:[2,129],115:[2,129],117:[2,129],119:[2,129],120:[2,129],121:[2,129]},{13:[2,125],20:[2,125],23:[2,125],29:[2,125],30:[2,125],31:[2,125],32:[2,125],49:[2,125],51:[2,125],55:[2,125],59:[2,125],77:[2,125],78:[2,125],79:[2,125],80:[2,125],81:[2,125],85:[2,125],91:[2,125],93:[2,125],95:[2,125],96:[2,125],99:[2,125],100:[2,125],101:[2,125],102:[2,125],109:[2,125],111:[2,125],113:[2,125],115:[2,125],117:[2,125],119:[2,125],120:[2,125],121:[2,125]},{13:[2,51],23:[2,51],29:[2,51],30:[2,51],31:[2,51],49:[2,51],55:[2,51],59:[2,51]},{9:104,13:[2,55],23:[2,55],29:[2,55],30:[2,55],31:[2,55],49:[1,11],55:[2,55],59:[2,55],64:144,65:103},{42:[1,145]},{33:[2,49],63:[2,49]},{9:60,49:[1,11],50:146},{9:84,11:[1,96],31:[1,87],49:[1,11],60:147,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:69,118:68,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{32:[2,57]},{66:148,67:[1,149],68:[1,150]},{49:[2,44]},{34:151,35:152,38:153,39:[1,154]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:155,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:156,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:157,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:158,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:159,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:160,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:161,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{11:[2,93],31:[2,93],49:[2,93],67:[2,93],75:[2,93],77:[2,93],122:[2,93],128:[2,93],131:[2,93],132:[2,93],133:[2,93]},{11:[2,94],31:[2,94],49:[2,94],67:[2,94],75:[2,94],77:[2,94],122:[2,94],128:[2,94],131:[2,94],132:[2,94],133:[2,94]},{11:[2,95],31:[2,95],49:[2,95],67:[2,95],75:[2,95],77:[2,95],122:[2,95],128:[2,95],131:[2,95],132:[2,95],133:[2,95]},{11:[2,96],31:[2,96],49:[2,96],67:[2,96],75:[2,96],77:[2,96],122:[2,96],128:[2,96],131:[2,96],132:[2,96],133:[2,96]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:162,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{11:[2,89],31:[2,89],49:[2,89],67:[2,89],75:[2,89],77:[2,89],122:[2,89],128:[2,89],131:[2,89],132:[2,89],133:[2,89]},{11:[2,90],31:[2,90],49:[2,90],67:[2,90],75:[2,90],77:[2,90],122:[2,90],128:[2,90],131:[2,90],132:[2,90],133:[2,90]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:163,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:164,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:165,83:81,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:166,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:69,118:68,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{32:[1,167]},{13:[2,75],20:[2,75],23:[2,75],29:[2,75],30:[2,75],31:[2,75],32:[2,75],49:[2,75],51:[2,75],55:[2,75],59:[2,75],77:[2,75],78:[2,75],79:[2,75],80:[2,75],81:[2,75],85:[2,75],91:[2,75],93:[2,75],95:[2,75],96:[2,75],99:[2,75],100:[2,75],101:[2,75],102:[2,75],109:[2,75],111:[2,75],113:[2,75],115:[2,75],117:[2,75],119:[2,75],120:[2,75],121:[2,75]},{13:[2,76],20:[2,76],23:[2,76],29:[2,76],30:[2,76],31:[2,76],32:[2,76],49:[2,76],51:[2,76],55:[2,76],59:[2,76],77:[2,76],78:[2,76],79:[2,76],80:[2,76],81:[2,76],85:[2,76],91:[2,76],93:[2,76],95:[2,76],96:[2,76],99:[2,76],100:[2,76],101:[2,76],102:[2,76],109:[2,76],111:[2,76],113:[2,76],115:[2,76],117:[2,76],119:[2,76],120:[2,76],121:[2,76]},{13:[2,77],20:[2,77],23:[2,77],29:[2,77],30:[2,77],31:[2,77],32:[2,77],49:[2,77],51:[2,77],55:[2,77],59:[2,77],77:[2,77],78:[2,77],79:[2,77],80:[2,77],81:[2,77],85:[2,77],91:[2,77],93:[2,77],95:[2,77],96:[2,77],99:[2,77],100:[2,77],101:[2,77],102:[2,77],109:[2,77],111:[2,77],113:[2,77],115:[2,77],117:[2,77],119:[2,77],120:[2,77],121:[2,77]},{13:[2,79],20:[2,79],23:[2,79],29:[2,79],30:[2,79],31:[1,130],32:[2,79],49:[2,79],51:[2,79],55:[2,79],59:[2,79],77:[1,129],78:[2,79],79:[1,131],80:[1,132],81:[1,133],85:[2,79],91:[2,79],93:[2,79],95:[2,79],96:[2,79],99:[2,79],100:[2,79],101:[2,79],102:[2,79],109:[2,79],111:[2,79],113:[2,79],115:[2,79],117:[2,79],119:[2,79],120:[2,79],121:[2,79]},{32:[1,168],119:[1,112]},{67:[1,169]},{13:[2,132],20:[2,132],23:[2,132],29:[2,132],30:[2,132],31:[2,132],32:[2,132],49:[2,132],51:[2,132],55:[2,132],59:[2,132],77:[2,132],78:[2,132],79:[2,132],80:[2,132],81:[2,132],85:[2,132],91:[2,132],93:[2,132],95:[2,132],96:[2,132],99:[2,132],100:[2,132],101:[2,132],102:[2,132],109:[2,132],111:[2,132],113:[2,132],115:[2,132],117:[2,132],119:[2,132],120:[2,132],121:[2,132]},{13:[1,170]},{138:[1,171]},{78:[1,172]},{51:[1,173],78:[2,66],119:[1,112]},{13:[2,126],20:[2,126],23:[2,126],29:[2,126],30:[2,126],31:[2,126],32:[2,126],49:[2,126],51:[2,126],55:[2,126],59:[2,126],77:[2,126],78:[2,126],79:[2,126],80:[2,126],81:[2,126],85:[2,126],91:[2,126],93:[2,126],95:[2,126],96:[2,126],99:[2,126],100:[2,126],101:[2,126],102:[2,126],109:[2,126],111:[2,126],113:[2,126],115:[2,126],117:[2,126],119:[2,126],120:[2,126],121:[2,126],134:[2,126],135:[2,126]},{13:[2,128],20:[2,128],23:[2,128],29:[2,128],30:[2,128],31:[2,128],32:[2,128],49:[2,128],51:[2,128],55:[2,128],59:[2,128],77:[2,128],78:[2,128],79:[2,128],80:[2,128],81:[2,128],85:[2,128],91:[2,128],93:[2,128],95:[2,128],96:[2,128],99:[2,128],100:[2,128],101:[2,128],102:[2,128],109:[2,128],111:[2,128],113:[2,128],115:[2,128],117:[2,128],119:[2,128],120:[2,128],121:[2,128]},{13:[2,54],23:[2,54],29:[2,54],30:[2,54],31:[2,54],49:[2,54],55:[2,54],59:[2,54]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:174,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:69,118:68,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{32:[2,41]},{20:[1,175],119:[1,112]},{32:[2,60],51:[2,60]},{32:[2,61],51:[2,61]},{32:[2,62],51:[2,62]},{13:[2,23],23:[2,23],29:[2,23],30:[2,23],55:[2,23],59:[2,23]},{13:[2,25],23:[2,25],29:[2,25],30:[2,25],36:[1,176],55:[2,25],59:[2,25]},{13:[2,27],23:[2,27],29:[2,27],30:[2,27],35:177,36:[2,27],37:[2,27],38:153,39:[1,154],55:[2,27],59:[2,27]},{9:178,49:[1,11]},{117:[1,113],120:[1,179]},{13:[2,112],20:[2,112],23:[2,112],29:[2,112],30:[2,112],31:[2,112],32:[2,112],49:[2,112],51:[2,112],55:[2,112],59:[2,112],78:[2,112],115:[1,114],117:[2,112],119:[2,112],120:[2,112],121:[2,112]},{13:[2,110],20:[2,110],23:[2,110],29:[2,110],30:[2,110],31:[2,110],32:[2,110],49:[2,110],51:[2,110],55:[2,110],59:[2,110],78:[2,110],113:[1,115],115:[2,110],117:[2,110],119:[2,110],120:[2,110],121:[2,110]},{13:[2,108],20:[2,108],23:[2,108],29:[2,108],30:[2,108],31:[2,108],32:[2,108],49:[2,108],51:[2,108],55:[2,108],59:[2,108],78:[2,108],111:[1,116],113:[2,108],115:[2,108],117:[2,108],119:[2,108],120:[2,108],121:[2,108]},{13:[2,106],20:[2,106],23:[2,106],29:[2,106],30:[2,106],31:[2,106],32:[2,106],49:[2,106],51:[2,106],55:[2,106],59:[2,106],78:[2,106],109:[1,117],111:[2,106],113:[2,106],115:[2,106],117:[2,106],119:[2,106],120:[2,106],121:[2,106]},{13:[2,104],20:[2,104],23:[2,104],29:[2,104],30:[2,104],31:[2,104],32:[2,104],49:[2,104],51:[2,104],55:[2,104],59:[2,104],78:[2,104],98:118,99:[1,119],100:[1,120],101:[1,121],102:[1,122],109:[2,104],111:[2,104],113:[2,104],115:[2,104],117:[2,104],119:[2,104],120:[2,104],121:[2,104]},{13:[2,98],20:[2,98],23:[2,98],29:[2,98],30:[2,98],31:[2,98],32:[2,98],49:[2,98],51:[2,98],55:[2,98],59:[2,98],78:[2,98],94:123,95:[1,124],96:[1,125],99:[2,98],100:[2,98],101:[2,98],102:[2,98],109:[2,98],111:[2,98],113:[2,98],115:[2,98],117:[2,98],119:[2,98],120:[2,98],121:[2,98]},{13:[2,92],20:[2,92],23:[2,92],29:[2,92],30:[2,92],31:[2,92],32:[2,92],49:[2,92],51:[2,92],55:[2,92],59:[2,92],78:[2,92],93:[1,126],95:[2,92],96:[2,92],99:[2,92],100:[2,92],101:[2,92],102:[2,92],109:[2,92],111:[2,92],113:[2,92],115:[2,92],117:[2,92],119:[2,92],120:[2,92],121:[2,92]},{13:[2,88],20:[2,88],23:[2,88],29:[2,88],30:[2,88],31:[2,88],32:[2,88],49:[2,88],51:[2,88],55:[2,88],59:[2,88],78:[2,88],91:[1,127],93:[2,88],95:[2,88],96:[2,88],99:[2,88],100:[2,88],101:[2,88],102:[2,88],109:[2,88],111:[2,88],113:[2,88],115:[2,88],117:[2,88],119:[2,88],120:[2,88],121:[2,88]},{13:[2,86],20:[2,86],23:[2,86],29:[2,86],30:[2,86],31:[2,86],32:[2,86],49:[2,86],51:[2,86],55:[2,86],59:[2,86],78:[2,86],85:[1,128],91:[2,86],93:[2,86],95:[2,86],96:[2,86],99:[2,86],100:[2,86],101:[2,86],102:[2,86],109:[2,86],111:[2,86],113:[2,86],115:[2,86],117:[2,86],119:[2,86],120:[2,86],121:[2,86]},{13:[2,81],20:[2,81],23:[2,81],29:[2,81],30:[2,81],31:[2,81],32:[2,81],49:[2,81],51:[2,81],55:[2,81],59:[2,81],78:[2,81],85:[2,81],91:[2,81],93:[2,81],95:[2,81],96:[2,81],99:[2,81],100:[2,81],101:[2,81],102:[2,81],109:[2,81],111:[2,81],113:[2,81],115:[2,81],117:[2,81],119:[2,81],120:[2,81],121:[2,81]},{78:[1,180],119:[1,112]},{13:[2,74],20:[2,74],23:[2,74],29:[2,74],30:[2,74],31:[2,74],32:[2,74],49:[2,74],51:[2,74],55:[2,74],59:[2,74],77:[2,74],78:[2,74],79:[2,74],80:[2,74],81:[2,74],85:[2,74],91:[2,74],93:[2,74],95:[2,74],96:[2,74],99:[2,74],100:[2,74],101:[2,74],102:[2,74],109:[2,74],111:[2,74],113:[2,74],115:[2,74],117:[2,74],119:[2,74],120:[2,74],121:[2,74]},{13:[2,71],20:[2,71],23:[2,71],29:[2,71],30:[2,71],31:[2,71],32:[2,71],49:[2,71],51:[2,71],55:[2,71],59:[2,71],77:[2,71],78:[2,71],79:[2,71],80:[2,71],81:[2,71],85:[2,71],91:[2,71],93:[2,71],95:[2,71],96:[2,71],99:[2,71],100:[2,71],101:[2,71],102:[2,71],109:[2,71],111:[2,71],113:[2,71],115:[2,71],117:[2,71],119:[2,71],120:[2,71],121:[2,71]},{13:[2,130],20:[2,130],23:[2,130],29:[2,130],30:[2,130],31:[2,130],32:[2,130],49:[2,130],51:[2,130],55:[2,130],59:[2,130],77:[2,130],78:[2,130],79:[2,130],80:[2,130],81:[2,130],85:[2,130],91:[2,130],93:[2,130],95:[2,130],96:[2,130],99:[2,130],100:[2,130],101:[2,130],102:[2,130],109:[2,130],111:[2,130],113:[2,130],115:[2,130],117:[2,130],119:[2,130],120:[2,130],121:[2,130],135:[1,181]},{13:[2,134],20:[2,134],23:[2,134],29:[2,134],30:[2,134],31:[2,134],32:[2,134],49:[2,134],51:[2,134],55:[2,134],59:[2,134],77:[2,134],78:[2,134],79:[2,134],80:[2,134],81:[2,134],85:[2,134],91:[2,134],93:[2,134],95:[2,134],96:[2,134],99:[2,134],100:[2,134],101:[2,134],102:[2,134],109:[2,134],111:[2,134],113:[2,134],115:[2,134],117:[2,134],119:[2,134],120:[2,134],121:[2,134]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:182,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:69,118:68,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{13:[2,133],20:[2,133],23:[2,133],29:[2,133],30:[2,133],31:[2,133],32:[2,133],49:[2,133],51:[2,133],55:[2,133],59:[2,133],77:[2,133],78:[2,133],79:[2,133],80:[2,133],81:[2,133],85:[2,133],91:[2,133],93:[2,133],95:[2,133],96:[2,133],99:[2,133],100:[2,133],101:[2,133],102:[2,133],109:[2,133],111:[2,133],113:[2,133],115:[2,133],117:[2,133],119:[2,133],120:[2,133],121:[2,133]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:141,67:[1,99],72:183,73:82,74:85,75:[1,86],76:80,77:[1,97],78:[2,67],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:69,118:68,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{13:[2,56],23:[2,56],29:[2,56],30:[2,56],31:[2,56],49:[2,56],55:[2,56],59:[2,56],119:[1,112]},{13:[2,47],23:[2,47],29:[2,47],30:[2,47],55:[2,47],59:[2,47]},{35:184,38:153,39:[1,154]},{13:[2,26],23:[2,26],29:[2,26],30:[2,26],36:[2,26],37:[2,26],55:[2,26],59:[2,26]},{40:[1,185]},{9:84,11:[1,96],31:[1,87],49:[1,11],60:186,67:[1,99],73:82,74:85,75:[1,86],76:80,77:[1,97],82:79,83:81,84:78,90:77,92:76,97:75,103:74,108:73,110:72,112:71,114:70,116:69,118:68,122:[1,83],123:88,124:89,125:90,126:91,127:92,128:[1,93],129:94,130:95,131:[1,101],132:[1,98],133:[1,100]},{13:[2,73],20:[2,73],23:[2,73],29:[2,73],30:[2,73],31:[2,73],32:[2,73],49:[2,73],51:[2,73],55:[2,73],59:[2,73],77:[2,73],78:[2,73],79:[2,73],80:[2,73],81:[2,73],85:[2,73],91:[2,73],93:[2,73],95:[2,73],96:[2,73],99:[2,73],100:[2,73],101:[2,73],102:[2,73],109:[2,73],111:[2,73],113:[2,73],115:[2,73],117:[2,73],119:[2,73],120:[2,73],121:[2,73]},{13:[2,131],20:[2,131],23:[2,131],29:[2,131],30:[2,131],31:[2,131],32:[2,131],49:[2,131],51:[2,131],55:[2,131],59:[2,131],77:[2,131],78:[2,131],79:[2,131],80:[2,131],81:[2,131],85:[2,131],91:[2,131],93:[2,131],95:[2,131],96:[2,131],99:[2,131],100:[2,131],101:[2,131],102:[2,131],109:[2,131],111:[2,131],113:[2,131],115:[2,131],117:[2,131],119:[2,131],120:[2,131],121:[2,131]},{13:[2,136],51:[1,187],119:[1,112]},{78:[2,65]},{37:[1,188]},{13:[2,28],23:[2,28],29:[2,28],30:[2,28],36:[2,28],37:[2,28],39:[2,28],41:189,42:[1,190],44:[1,191],55:[2,28],59:[2,28]},{119:[1,112],121:[1,192]},{13:[2,137],136:193,137:[1,139]},{13:[2,24],23:[2,24],29:[2,24],30:[2,24],55:[2,24],59:[2,24]},{13:[2,29],23:[2,29],29:[2,29],30:[2,29],36:[2,29],37:[2,29],39:[2,29],55:[2,29],59:[2,29]},{43:194,45:[1,195],47:[1,196],48:[1,197]},{43:198,45:[1,195],47:[1,196],48:[1,197]},{13:[2,114],20:[2,114],23:[2,114],29:[2,114],30:[2,114],31:[2,114],32:[2,114],49:[2,114],51:[2,114],55:[2,114],59:[2,114],78:[2,114],119:[2,114],121:[2,114]},{13:[2,135]},{13:[2,31],23:[2,31],29:[2,31],30:[2,31],36:[2,31],37:[2,31],39:[2,31],44:[1,199],55:[2,31],59:[2,31]},{46:[1,200]},{46:[1,201]},{46:[1,202]},{13:[2,32],23:[2,32],29:[2,32],30:[2,32],36:[2,32],37:[2,32],39:[2,32],55:[2,32],59:[2,32]},{43:203,45:[1,195],47:[1,196],48:[1,197]},{13:[2,36],23:[2,36],29:[2,36],30:[2,36],36:[2,36],37:[2,36],39:[2,36],44:[2,36],47:[1,204],48:[1,205],55:[2,36],59:[2,36]},{48:[1,206]},{13:[2,37],23:[2,37],29:[2,37],30:[2,37],36:[2,37],37:[2,37],39:[2,37],44:[2,37],55:[2,37],59:[2,37]},{13:[2,30],23:[2,30],29:[2,30],30:[2,30],36:[2,30],37:[2,30],39:[2,30],55:[2,30],59:[2,30]},{46:[1,207]},{46:[1,208]},{46:[1,209]},{48:[1,210]},{13:[2,35],23:[2,35],29:[2,35],30:[2,35],36:[2,35],37:[2,35],39:[2,35],44:[2,35],55:[2,35],59:[2,35]},{13:[2,34],23:[2,34],29:[2,34],30:[2,34],36:[2,34],37:[2,34],39:[2,34],44:[2,34],55:[2,34],59:[2,34]},{46:[1,211]},{13:[2,33],23:[2,33],29:[2,33],30:[2,33],36:[2,33],37:[2,33],39:[2,33],44:[2,33],55:[2,33],59:[2,33]}],
defaultActions: {7:[2,1],17:[2,16],29:[2,9],30:[2,10],32:[2,38],108:[2,57],110:[2,44],146:[2,41],183:[2,65],193:[2,135]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore blank */
break;
case 1:/* ignore blank */
break;
case 2:/* ignore comment */
break;
case 3:/* ignore comment */
break;
case 4:return 8;
break;
case 5:return 10;
break;
case 6:return 'USES';
break;
case 7:return 70;
break;
case 8:return 71;
break;
case 9:return 23;
break;
case 10:return 'TEST';
break;
case 11:return 'IMAGE';
break;
case 12:return 17;
break;
case 13:return 'NEEDS';
break;
case 14:return 59;
break;
case 15:return 30;
break;
case 16:return 42;
break;
case 17:return 44;
break;
case 18:return 45;
break;
case 19:return 47;
break;
case 20:return 48;
break;
case 21:return 'MAP';
break;
case 22:return 'FOR';
break;
case 23:return 68;
break;
case 24:return 67;
break;
case 25:return 133;
break;
case 26:return 128;
break;
case 27:return 131;
break;
case 28:return 49;
break;
case 29:return 'REDUCE';
break;
case 30:return 119;
break;
case 31:return 'INT';
break;
case 32:return 'LONG';
break;
case 33:return 'FLOAT';
break;
case 34:return 'DOUBLE';
break;
case 35:return 120;
break;
case 36:return 'ELSEIF';
break;
case 37:return 121; 
break;
case 38:return 55;
break;
case 39:return 57;
break;
case 40:return 'XPATHSTART';
break;
case 41:return 'XPATHEND';
break;
case 42:return 39;
break;
case 43:return 40;
break;
case 44:return 'ESCAPE';	
break;
case 45:return 'ELLIPSIS';
break;
case 46:return 105;
break;
case 47:return 106;
break;
case 48:return 99;
break;
case 49:return 100;
break;
case 50:return 101;
break;
case 51:return 102;
break;
case 52:return 95;
break;
case 53:return 96;
break;
case 54:return 56;
break;
case 55:return 33;
break;
case 56:return 63;
break;
case 57:return 'PLUS';
break;
case 58:return 132;
break;
case 59:return 87;
break;
case 60:return 88;
break;
case 61:return 89;
break;
case 62:return 117;
break;
case 63:return 22;
break;
case 64:return 115;
break;
case 65:return 109;
break;
case 66:return 113;
break;
case 67:return 111;
break;
case 68:return 122;
break;
case 69:return 85;
break;
case 70:return 'QUESTION';
break;
case 71:return 81;
break;
case 72:return 11;
break;
case 73:return 13;
break;
case 74:return 31;
break;
case 75:return 32;
break;
case 76:return 77;
break;
case 77:return 78;
break;
case 78:return 138;
break;
case 79:return 20;
break;
case 80:return 51;
break;
case 81:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75;
break;
case 82:return 134;
break;
case 83:
					if (typeof yy._iemitstack === 'undefined') {
						yy._iemitstack = [0];
					}
					var indentation = lexeme.length;

				    col += indentation;
				
				    if (indentation > yy._iemitstack[0]) {
				        yy._iemitstack.unshift(indentation);
				        return "INDENT";
				    }
				
				    var tokens = [];
				
				    while (indentation < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				
				    if (tokens.length) return tokens;
				
break;
case 84:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\s*\n\s*)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:theory\b)/,/^(?:extends\b)/,/^(?:uses\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:namespace\b)/,/^(?:test\b)/,/^(?:image\b)/,/^(?:data\b)/,/^(?:needs\b)/,/^(?:fn\b)/,/^(?:ff\b)/,/^(?:->)/,/^(?:<-)/,/^(?:style\b)/,/^(?:where\b)/,/^(?:yield\b)/,/^(?:map\b)/,/^(?:for\b)/,/^(?:null\b)/,/^(?:([0-9])+)/,/^(?:0x([0-9A-Fa-f])+)/,/^(?:([0-1])+b\b)/,/^(?:#([0-9A-Fa-f])+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:reduce\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:else\s+if\b)/,/^(?:endif\b)/,/^(?:\[--)/,/^(?:--\])/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\\)/,/^(?:\.\.\.)/,/^(?:eq|==)/,/^(?:neq|!=)/,/^(?:gt|>)/,/^(?:lt|<)/,/^(?:gte|>=)/,/^(?:lte|<=)/,/^(?:<<)/,/^(?:>>)/,/^(?:::)/,/^(?:=)/,/^(?:@=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%|mod\b)/,/^(?:\|\||or\b)/,/^(?:\|)/,/^(?:&&|and\b)/,/^(?:&)/,/^(?:\|)/,/^(?:\^|xor\b)/,/^(?:not|!)/,/^(?:\*\*)/,/^(?:\?)/,/^(?:\?!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:".*")/,/^(?:\.)/,/^(?:(?=^)\s*(?=gm))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = theory;
exports.Parser = theory.Parser;
exports.parse = function () { return theory.parse.apply(theory, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}