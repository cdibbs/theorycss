/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var theory = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"file_repetition0":4,"ENDOFFILE":5,"namespace":6,"PREFIX":7,"id":8,"INDENT":9,"namespace_repetition0":10,"DEDENT":11,"theory":12,"THEORY":13,"theory_option0":14,"theorybody":15,"theorybody_repetition0":16,"def":17,"sdef":18,"fdef":19,"fragfunc":20,"treefrag":21,"tfnode":22,"treefrag_option0":23,"XPATHSTART":24,"leafid":25,"tfnode_option0":26,"XPATHEND":27,"tfnode_option1":28,"leafid_repetition_plus0":29,"tf_islist":30,"tf_islist_repetition_plus0":31,"FRAGFUNC":32,"LPAREN":33,"fragfunc_option0":34,"RPAREN":35,"IMPLICATION":36,"fftree":37,"ffnode":38,"fftree_option0":39,"LFFNODE":40,"ffid":41,"RFFNODE":42,"ELLIPSIS":43,"ffimplist":44,"fragexpr":45,"REVIMPLICATION":46,"STYLE":47,"expression":48,"WHERE":49,"YIELD":50,"tuplevarlist":51,"COMMA":52,"typedef":53,"LBRACK":54,"RBRACK":55,"SETSTART":56,"TYPIFY":57,"SETEND":58,"assignment_list":59,"FUNCTION":60,"fdef_option0":61,"EOL":62,"lside":63,"assignment":64,"ASSIGN":65,"CASEASSIGN":66,"caselist":67,"casedef":68,"arglist":69,"argdef":70,"paramlist":71,"paramlist_repetition0":72,"boollit":73,"TRUE":74,"FALSE":75,"elist":76,"atom":77,"number":78,"STRING_LIT":79,"dict":80,"postfix_expression":81,"LBRACKET":82,"RBRACKET":83,"INC_OP":84,"DEC_OP":85,"EXCUSEME":86,"unary_expression":87,"unary_expression_option0":88,"power_expression":89,"power_expression_option0":90,"multiplicative_expression":91,"multiplicative_expression_option0":92,"additive_expression":93,"additive_expression_option0":94,"shift_expression":95,"shift_expression_option0":96,"relational_expression":97,"relational_expression_option0":98,"equivalence_expression":99,"equivalence_expression_option0":100,"and_expression":101,"and_expression_option0":102,"xor_expression":103,"xor_expression_option0":104,"ior_expression":105,"ior_expression_option0":106,"logical_and_expression":107,"logical_and_expression_option0":108,"logical_or_expression":109,"logical_or_expression_option0":110,"test_expression":111,"IF":112,"test_expression_option0":113,"ENDIF":114,"unary_op":115,"NOT":116,"equiv_op":117,"EQ":118,"NEQ":119,"compare_op":120,"GT":121,"LT":122,"GTE":123,"LTE":124,"muldivmod_op":125,"TIMES":126,"DIVIDE":127,"MOD":128,"shift_op":129,"SHIFTL":130,"SHIFTR":131,"addsub_op":132,"PLUS":133,"MINUS":134,"INTEGER":135,"FLOAT":136,"color":137,"HEXNATLITERAL":138,"BINNATLITERAL":139,"FLOAT_UNITS":140,"INT_UNITS":141,"ID":142,"HEXCOLOR":143,"array":144,"LBRACE":145,"ddeflist":146,"RBRACE":147,"dictdef":148,"ddatom":149,"COLON":150,"file_repetition0_group0":151,"NEWLINE":152,"namespace_repetition0_group0":153,"data":154,"EXTENDS":155,"theorybody_repetition0_group0":156,"treefrag_option0_repetition_plus0":157,"leafid_repetition_plus0_group0":158,"DOT":159,"tf_islist_repetition_plus0_option0":160,"AT":161,"IS":162,"POWER":163,"B_AND":164,"XOR":165,"B_OR":166,"AND":167,"OR":168,"ELSE":169,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",7:"PREFIX",9:"INDENT",11:"DEDENT",13:"THEORY",24:"XPATHSTART",27:"XPATHEND",32:"FRAGFUNC",33:"LPAREN",35:"RPAREN",36:"IMPLICATION",40:"LFFNODE",42:"RFFNODE",43:"ELLIPSIS",46:"REVIMPLICATION",47:"STYLE",49:"WHERE",50:"YIELD",52:"COMMA",54:"LBRACK",55:"RBRACK",56:"SETSTART",57:"TYPIFY",58:"SETEND",60:"FUNCTION",62:"EOL",65:"ASSIGN",66:"CASEASSIGN",74:"TRUE",75:"FALSE",79:"STRING_LIT",82:"LBRACKET",83:"RBRACKET",84:"INC_OP",85:"DEC_OP",86:"EXCUSEME",112:"IF",114:"ENDIF",116:"NOT",118:"EQ",119:"NEQ",121:"GT",122:"LT",123:"GTE",124:"LTE",126:"TIMES",127:"DIVIDE",128:"MOD",130:"SHIFTL",131:"SHIFTR",133:"PLUS",134:"MINUS",135:"INTEGER",136:"FLOAT",138:"HEXNATLITERAL",139:"BINNATLITERAL",140:"FLOAT_UNITS",141:"INT_UNITS",142:"ID",143:"HEXCOLOR",145:"LBRACE",147:"RBRACE",150:"COLON",152:"NEWLINE",154:"data",155:"EXTENDS",159:"DOT",161:"AT",162:"IS",163:"POWER",164:"B_AND",165:"XOR",166:"B_OR",167:"AND",168:"OR",169:"ELSE"},
productions_: [0,[3,2],[6,5],[12,6],[15,1],[17,1],[17,1],[17,1],[17,1],[21,2],[22,5],[25,1],[30,1],[20,7],[37,2],[38,3],[41,1],[41,1],[44,4],[44,2],[44,2],[45,6],[45,4],[45,4],[45,2],[45,2],[51,3],[51,1],[53,1],[53,3],[18,6],[18,4],[19,8],[63,1],[64,3],[64,3],[59,1],[59,3],[67,2],[67,0],[68,3],[69,1],[69,3],[70,1],[71,2],[73,1],[73,1],[76,3],[76,1],[76,0],[77,1],[77,1],[77,1],[77,3],[77,1],[81,1],[81,4],[81,2],[81,2],[81,2],[81,4],[87,2],[89,2],[91,2],[93,2],[95,2],[97,2],[99,2],[101,2],[103,2],[105,2],[107,2],[109,2],[111,5],[48,1],[48,1],[115,1],[117,1],[117,1],[120,1],[120,1],[120,1],[120,1],[125,1],[125,1],[125,1],[129,1],[129,1],[132,1],[132,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[8,1],[137,1],[144,3],[80,3],[146,1],[146,3],[148,3],[149,1],[149,1],[149,1],[149,3],[151,1],[151,1],[4,0],[4,2],[153,1],[153,1],[153,1],[10,0],[10,2],[14,0],[14,2],[156,1],[156,1],[16,0],[16,2],[157,1],[157,2],[23,0],[23,3],[26,0],[26,2],[28,0],[28,4],[158,1],[158,1],[29,1],[29,2],[160,0],[160,2],[31,4],[31,5],[34,0],[34,1],[39,0],[39,3],[61,0],[61,1],[72,0],[72,3],[88,0],[88,1],[90,0],[90,2],[92,0],[92,2],[94,0],[94,2],[96,0],[96,2],[98,0],[98,2],[100,0],[100,2],[102,0],[102,2],[104,0],[104,2],[106,0],[106,2],[108,0],[108,2],[110,0],[110,2],[113,0],[113,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-1]; 
break;
case 3: this.$ = new yy.Theory($$[$0-4], $$[$0-1], $$[$0-2]); 
break;
case 26: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 27: this.$ = [ $$[$0] ]; 
break;
case 28: this.$ = new yy.Type($$[$0]); 
break;
case 29: this.$ = new yy.Type("Array", $$[$0-2]); 
break;
case 30: this.$ = new yy.SetDef($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 31: this.$ = new yy.SetDef($$[$0-2], $$[$0-2], $$[$0]); 
break;
case 32: this.$ = new yy.FnDef($$[$0-6], paramlist, null, $$[$0-1]); 
break;
case 33: this.$ = [ $$[$0] ]; 
break;
case 34: this.$ = new yy.Assignment($$[$0-2], $$[$0]); 
break;
case 35: this.$ = new yy.CaseAssignment($$[$0-2], $$[$0]); 
break;
case 36: this.$ = [ $$[$0] ]; 
break;
case 37: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 38: this.$ = $$[$0]; $$[$0].unshift($$[$0-1]); 
break;
case 39: this.$ = []; 
break;
case 40: this.$ = new yy.CaseDef($$[$0-2], $$[$0]); 
break;
case 45: this.$ = true; 
break;
case 46: this.$ = false; 
break;
case 47: this.$ = $$[$0]; this.$.unshift(e); 
break;
case 48: this.$ = [ e ]; 
break;
case 110:this.$ = [];
break;
case 111:$$[$0-1].push($$[$0]);
break;
case 115:this.$ = [];
break;
case 116:$$[$0-1].push($$[$0]);
break;
case 121:this.$ = [];
break;
case 122:$$[$0-1].push($$[$0]);
break;
case 123:this.$ = [$$[$0]];
break;
case 124:$$[$0-1].push($$[$0]);
break;
case 133:this.$ = [$$[$0]];
break;
case 134:$$[$0-1].push($$[$0]);
break;
case 137:this.$ = [$$[$0-3]];
break;
case 138:$$[$0-4].push($$[$0-3]);
break;
case 145:this.$ = [];
break;
case 146:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,5:[2,110],7:[2,110],152:[2,110]},{1:[3]},{5:[1,3],6:5,7:[1,7],151:4,152:[1,6]},{1:[2,1]},{5:[2,111],7:[2,111],152:[2,111]},{5:[2,108],7:[2,108],152:[2,108]},{5:[2,109],7:[2,109],152:[2,109]},{8:8,142:[1,9]},{9:[1,10]},{9:[2,97],11:[2,97],24:[2,97],27:[2,97],32:[2,97],33:[2,97],35:[2,97],36:[2,97],42:[2,97],52:[2,97],56:[2,97],57:[2,97],58:[2,97],60:[2,97],62:[2,97],65:[2,97],66:[2,97],82:[2,97],83:[2,97],84:[2,97],85:[2,97],86:[2,97],112:[2,97],114:[2,97],121:[2,97],122:[2,97],123:[2,97],124:[2,97],126:[2,97],127:[2,97],128:[2,97],130:[2,97],131:[2,97],133:[2,97],134:[2,97],142:[2,97],147:[2,97],150:[2,97],152:[2,97],155:[2,97],159:[2,97],162:[2,97],163:[2,97],164:[2,97],165:[2,97],166:[2,97],167:[2,97],168:[2,97],169:[2,97]},{10:11,11:[2,115],13:[2,115],152:[2,115],154:[2,115]},{11:[1,12],12:14,13:[1,17],152:[1,16],153:13,154:[1,15]},{5:[2,2],7:[2,2],152:[2,2]},{11:[2,116],13:[2,116],152:[2,116],154:[2,116]},{11:[2,112],13:[2,112],152:[2,112],154:[2,112]},{11:[2,113],13:[2,113],152:[2,113],154:[2,113]},{11:[2,114],13:[2,114],152:[2,114],154:[2,114]},{8:18,142:[1,9]},{9:[2,117],14:19,155:[1,20]},{9:[1,21]},{8:22,142:[1,9]},{11:[2,121],15:23,16:24,24:[2,121],32:[2,121],56:[2,121],60:[2,121],152:[2,121]},{9:[2,118]},{11:[1,25]},{11:[2,4],17:27,18:29,19:30,20:31,21:32,22:36,24:[1,37],32:[1,35],56:[1,33],60:[1,34],152:[1,28],156:26},{11:[2,3],13:[2,3],152:[2,3],154:[2,3]},{11:[2,122],24:[2,122],32:[2,122],56:[2,122],60:[2,122],152:[2,122]},{11:[2,119],24:[2,119],32:[2,119],56:[2,119],60:[2,119],152:[2,119]},{11:[2,120],24:[2,120],32:[2,120],56:[2,120],60:[2,120],152:[2,120]},{11:[2,5],24:[2,5],32:[2,5],56:[2,5],60:[2,5],152:[2,5]},{11:[2,6],24:[2,6],32:[2,6],56:[2,6],60:[2,6],152:[2,6]},{11:[2,7],24:[2,7],32:[2,7],56:[2,7],60:[2,7],152:[2,7]},{11:[2,8],24:[2,8],32:[2,8],56:[2,8],60:[2,8],152:[2,8]},{8:38,142:[1,9]},{8:39,142:[1,9]},{8:40,142:[1,9]},{9:[1,42],11:[2,125],23:41,24:[2,125],32:[2,125],56:[2,125],60:[2,125],152:[2,125]},{8:46,25:43,29:44,142:[1,9],158:45,159:[1,47]},{57:[1,48],58:[1,49]},{33:[1,50]},{33:[1,51]},{11:[2,9],24:[2,9],32:[2,9],56:[2,9],60:[2,9],152:[2,9]},{21:53,22:36,24:[1,37],157:52},{26:54,27:[2,127],57:[1,55]},{8:46,27:[2,11],42:[2,11],57:[2,11],142:[1,9],158:56,159:[1,47]},{27:[2,133],42:[2,133],57:[2,133],142:[2,133],159:[2,133]},{27:[2,131],42:[2,131],57:[2,131],142:[2,131],159:[2,131]},{27:[2,132],42:[2,132],57:[2,132],142:[2,132],159:[2,132]},{8:57,142:[1,9]},{8:61,59:58,63:60,64:59,142:[1,9]},{8:64,35:[2,143],61:62,71:63,142:[1,9]},{8:64,34:65,35:[2,139],71:66,142:[1,9]},{11:[1,67],21:68,22:36,24:[1,37]},{11:[2,123],24:[2,123]},{27:[1,69]},{8:70,142:[1,9]},{27:[2,134],42:[2,134],57:[2,134],142:[2,134],159:[2,134]},{58:[1,71]},{11:[2,31],24:[2,31],32:[2,31],56:[2,31],60:[2,31],152:[2,31]},{11:[2,36],24:[2,36],32:[2,36],52:[1,72],56:[2,36],60:[2,36],152:[2,36]},{65:[1,73],66:[1,74]},{65:[2,33],66:[2,33]},{35:[1,75]},{35:[2,144]},{35:[2,145],52:[2,145],72:76},{35:[1,77]},{35:[2,140]},{11:[2,126],24:[2,126],32:[2,126],56:[2,126],60:[2,126],152:[2,126]},{11:[2,124],24:[2,124]},{9:[2,129],11:[2,129],24:[2,129],28:78,32:[2,129],56:[2,129],57:[1,79],60:[2,129],152:[2,129]},{27:[2,128]},{8:61,59:80,63:60,64:59,142:[1,9]},{8:61,59:81,63:60,64:59,142:[1,9]},{33:[2,169],48:82,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{8:88,11:[2,39],24:[2,39],32:[2,39],52:[2,39],56:[2,39],60:[2,39],67:86,68:87,142:[1,9],152:[2,39]},{36:[1,89]},{35:[2,44],52:[1,90]},{36:[1,91]},{9:[2,10],11:[2,10],24:[2,10],32:[2,10],56:[2,10],60:[2,10],152:[2,10]},{9:[1,92]},{11:[2,30],24:[2,30],32:[2,30],56:[2,30],60:[2,30],152:[2,30]},{11:[2,37],24:[2,37],32:[2,37],56:[2,37],60:[2,37],152:[2,37]},{11:[2,34],24:[2,34],32:[2,34],52:[2,34],56:[2,34],60:[2,34],152:[2,34]},{11:[2,74],24:[2,74],32:[2,74],35:[2,74],52:[2,74],56:[2,74],60:[2,74],62:[2,74],83:[2,74],142:[2,74],147:[2,74],152:[2,74]},{11:[2,75],24:[2,75],32:[2,75],35:[2,75],52:[2,75],56:[2,75],60:[2,75],62:[2,75],83:[2,75],112:[1,93],142:[2,75],147:[2,75],152:[2,75],168:[1,94]},{33:[2,167],79:[2,167],107:95,108:96,116:[2,167],135:[2,167],136:[2,167],138:[2,167],139:[2,167],140:[2,167],141:[2,167],142:[2,167],143:[2,167],145:[2,167]},{11:[2,35],24:[2,35],32:[2,35],52:[2,35],56:[2,35],60:[2,35],152:[2,35]},{8:88,11:[2,39],24:[2,39],32:[2,39],52:[2,39],56:[2,39],60:[2,39],67:97,68:87,142:[1,9],152:[2,39]},{36:[1,98]},{33:[2,169],48:99,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{8:100,142:[1,9]},{37:101,38:102,40:[1,103]},{30:104,31:105,160:106,161:[1,107],162:[2,135]},{33:[2,169],79:[2,169],109:108,110:85,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{33:[2,170],79:[2,170],116:[2,170],135:[2,170],136:[2,170],138:[2,170],139:[2,170],140:[2,170],141:[2,170],142:[2,170],143:[2,170],145:[2,170]},{11:[2,72],24:[2,72],32:[2,72],35:[2,72],52:[2,72],56:[2,72],60:[2,72],62:[2,72],83:[2,72],112:[2,72],114:[2,72],142:[2,72],147:[2,72],152:[2,72],167:[1,109],168:[2,72],169:[2,72]},{33:[2,165],79:[2,165],105:110,106:111,116:[2,165],135:[2,165],136:[2,165],138:[2,165],139:[2,165],140:[2,165],141:[2,165],142:[2,165],143:[2,165],145:[2,165]},{11:[2,38],24:[2,38],32:[2,38],52:[2,38],56:[2,38],60:[2,38],152:[2,38]},{33:[2,169],48:112,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{62:[1,113]},{35:[2,146],52:[2,146]},{11:[2,13],24:[2,13],32:[2,13],56:[2,13],60:[2,13],152:[2,13]},{9:[1,115],11:[2,141],24:[2,141],32:[2,141],39:114,56:[2,141],60:[2,141],152:[2,141]},{8:46,25:117,29:44,41:116,43:[1,118],142:[1,9],158:45,159:[1,47]},{11:[1,119]},{11:[2,12],160:120,161:[1,107],162:[2,135]},{162:[1,121]},{8:122,142:[1,9]},{113:123,114:[2,171],168:[1,94],169:[1,124]},{33:[2,168],79:[2,168],116:[2,168],135:[2,168],136:[2,168],138:[2,168],139:[2,168],140:[2,168],141:[2,168],142:[2,168],143:[2,168],145:[2,168]},{11:[2,71],24:[2,71],32:[2,71],35:[2,71],52:[2,71],56:[2,71],60:[2,71],62:[2,71],83:[2,71],112:[2,71],114:[2,71],142:[2,71],147:[2,71],152:[2,71],166:[1,125],167:[2,71],168:[2,71],169:[2,71]},{33:[2,163],79:[2,163],103:126,104:127,116:[2,163],135:[2,163],136:[2,163],138:[2,163],139:[2,163],140:[2,163],141:[2,163],142:[2,163],143:[2,163],145:[2,163]},{11:[2,40],24:[2,40],32:[2,40],52:[2,40],56:[2,40],60:[2,40],142:[2,40],152:[2,40]},{11:[2,32],24:[2,32],32:[2,32],56:[2,32],60:[2,32],152:[2,32]},{11:[2,14],24:[2,14],32:[2,14],56:[2,14],60:[2,14],152:[2,14]},{37:128,38:102,40:[1,103]},{42:[1,129]},{42:[2,16]},{42:[2,17]},{9:[2,130],11:[2,130],24:[2,130],32:[2,130],56:[2,130],60:[2,130],152:[2,130]},{162:[1,130]},{33:[2,169],48:131,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{162:[2,136]},{114:[1,132]},{33:[2,169],79:[2,169],109:133,110:85,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{33:[2,166],79:[2,166],116:[2,166],135:[2,166],136:[2,166],138:[2,166],139:[2,166],140:[2,166],141:[2,166],142:[2,166],143:[2,166],145:[2,166]},{11:[2,70],24:[2,70],32:[2,70],35:[2,70],52:[2,70],56:[2,70],60:[2,70],62:[2,70],83:[2,70],112:[2,70],114:[2,70],142:[2,70],147:[2,70],152:[2,70],165:[1,134],166:[2,70],167:[2,70],168:[2,70],169:[2,70]},{33:[2,161],79:[2,161],101:135,102:136,116:[2,161],135:[2,161],136:[2,161],138:[2,161],139:[2,161],140:[2,161],141:[2,161],142:[2,161],143:[2,161],145:[2,161]},{11:[1,137]},{9:[2,15],11:[2,15],24:[2,15],32:[2,15],56:[2,15],60:[2,15],152:[2,15]},{33:[2,169],48:138,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{62:[1,139]},{11:[2,73],24:[2,73],32:[2,73],35:[2,73],52:[2,73],56:[2,73],60:[2,73],62:[2,73],83:[2,73],142:[2,73],147:[2,73],152:[2,73]},{114:[2,172],168:[1,94]},{33:[2,164],79:[2,164],116:[2,164],135:[2,164],136:[2,164],138:[2,164],139:[2,164],140:[2,164],141:[2,164],142:[2,164],143:[2,164],145:[2,164]},{11:[2,69],24:[2,69],32:[2,69],35:[2,69],52:[2,69],56:[2,69],60:[2,69],62:[2,69],83:[2,69],112:[2,69],114:[2,69],142:[2,69],147:[2,69],152:[2,69],164:[1,140],165:[2,69],166:[2,69],167:[2,69],168:[2,69],169:[2,69]},{33:[2,157],79:[2,157],97:141,98:142,116:[2,157],135:[2,157],136:[2,157],138:[2,157],139:[2,157],140:[2,157],141:[2,157],142:[2,157],143:[2,157],145:[2,157]},{11:[2,142],24:[2,142],32:[2,142],56:[2,142],60:[2,142],152:[2,142]},{62:[1,143]},{11:[2,137],161:[2,137],162:[2,137]},{33:[2,162],79:[2,162],116:[2,162],135:[2,162],136:[2,162],138:[2,162],139:[2,162],140:[2,162],141:[2,162],142:[2,162],143:[2,162],145:[2,162]},{11:[2,68],24:[2,68],32:[2,68],35:[2,68],52:[2,68],56:[2,68],60:[2,68],62:[2,68],83:[2,68],112:[2,68],114:[2,68],120:144,121:[1,145],122:[1,146],123:[1,147],124:[1,148],142:[2,68],147:[2,68],152:[2,68],164:[2,68],165:[2,68],166:[2,68],167:[2,68],168:[2,68],169:[2,68]},{33:[2,155],79:[2,155],95:149,96:150,116:[2,155],135:[2,155],136:[2,155],138:[2,155],139:[2,155],140:[2,155],141:[2,155],142:[2,155],143:[2,155],145:[2,155]},{11:[2,138],161:[2,138],162:[2,138]},{33:[2,158],79:[2,158],116:[2,158],135:[2,158],136:[2,158],138:[2,158],139:[2,158],140:[2,158],141:[2,158],142:[2,158],143:[2,158],145:[2,158]},{33:[2,79],79:[2,79],116:[2,79],135:[2,79],136:[2,79],138:[2,79],139:[2,79],140:[2,79],141:[2,79],142:[2,79],143:[2,79],145:[2,79]},{33:[2,80],79:[2,80],116:[2,80],135:[2,80],136:[2,80],138:[2,80],139:[2,80],140:[2,80],141:[2,80],142:[2,80],143:[2,80],145:[2,80]},{33:[2,81],79:[2,81],116:[2,81],135:[2,81],136:[2,81],138:[2,81],139:[2,81],140:[2,81],141:[2,81],142:[2,81],143:[2,81],145:[2,81]},{33:[2,82],79:[2,82],116:[2,82],135:[2,82],136:[2,82],138:[2,82],139:[2,82],140:[2,82],141:[2,82],142:[2,82],143:[2,82],145:[2,82]},{11:[2,66],24:[2,66],32:[2,66],35:[2,66],52:[2,66],56:[2,66],60:[2,66],62:[2,66],83:[2,66],112:[2,66],114:[2,66],121:[2,66],122:[2,66],123:[2,66],124:[2,66],129:151,130:[1,152],131:[1,153],142:[2,66],147:[2,66],152:[2,66],164:[2,66],165:[2,66],166:[2,66],167:[2,66],168:[2,66],169:[2,66]},{33:[2,153],79:[2,153],93:154,94:155,116:[2,153],135:[2,153],136:[2,153],138:[2,153],139:[2,153],140:[2,153],141:[2,153],142:[2,153],143:[2,153],145:[2,153]},{33:[2,156],79:[2,156],116:[2,156],135:[2,156],136:[2,156],138:[2,156],139:[2,156],140:[2,156],141:[2,156],142:[2,156],143:[2,156],145:[2,156]},{33:[2,86],79:[2,86],116:[2,86],135:[2,86],136:[2,86],138:[2,86],139:[2,86],140:[2,86],141:[2,86],142:[2,86],143:[2,86],145:[2,86]},{33:[2,87],79:[2,87],116:[2,87],135:[2,87],136:[2,87],138:[2,87],139:[2,87],140:[2,87],141:[2,87],142:[2,87],143:[2,87],145:[2,87]},{11:[2,65],24:[2,65],32:[2,65],35:[2,65],52:[2,65],56:[2,65],60:[2,65],62:[2,65],83:[2,65],112:[2,65],114:[2,65],121:[2,65],122:[2,65],123:[2,65],124:[2,65],130:[2,65],131:[2,65],132:156,133:[1,157],134:[1,158],142:[2,65],147:[2,65],152:[2,65],164:[2,65],165:[2,65],166:[2,65],167:[2,65],168:[2,65],169:[2,65]},{33:[2,151],79:[2,151],91:159,92:160,116:[2,151],135:[2,151],136:[2,151],138:[2,151],139:[2,151],140:[2,151],141:[2,151],142:[2,151],143:[2,151],145:[2,151]},{33:[2,154],79:[2,154],116:[2,154],135:[2,154],136:[2,154],138:[2,154],139:[2,154],140:[2,154],141:[2,154],142:[2,154],143:[2,154],145:[2,154]},{33:[2,88],79:[2,88],116:[2,88],135:[2,88],136:[2,88],138:[2,88],139:[2,88],140:[2,88],141:[2,88],142:[2,88],143:[2,88],145:[2,88]},{33:[2,89],79:[2,89],116:[2,89],135:[2,89],136:[2,89],138:[2,89],139:[2,89],140:[2,89],141:[2,89],142:[2,89],143:[2,89],145:[2,89]},{11:[2,64],24:[2,64],32:[2,64],35:[2,64],52:[2,64],56:[2,64],60:[2,64],62:[2,64],83:[2,64],112:[2,64],114:[2,64],121:[2,64],122:[2,64],123:[2,64],124:[2,64],125:161,126:[1,162],127:[1,163],128:[1,164],130:[2,64],131:[2,64],133:[2,64],134:[2,64],142:[2,64],147:[2,64],152:[2,64],164:[2,64],165:[2,64],166:[2,64],167:[2,64],168:[2,64],169:[2,64]},{33:[2,149],79:[2,149],89:165,90:166,116:[2,149],135:[2,149],136:[2,149],138:[2,149],139:[2,149],140:[2,149],141:[2,149],142:[2,149],143:[2,149],145:[2,149]},{33:[2,152],79:[2,152],116:[2,152],135:[2,152],136:[2,152],138:[2,152],139:[2,152],140:[2,152],141:[2,152],142:[2,152],143:[2,152],145:[2,152]},{33:[2,83],79:[2,83],116:[2,83],135:[2,83],136:[2,83],138:[2,83],139:[2,83],140:[2,83],141:[2,83],142:[2,83],143:[2,83],145:[2,83]},{33:[2,84],79:[2,84],116:[2,84],135:[2,84],136:[2,84],138:[2,84],139:[2,84],140:[2,84],141:[2,84],142:[2,84],143:[2,84],145:[2,84]},{33:[2,85],79:[2,85],116:[2,85],135:[2,85],136:[2,85],138:[2,85],139:[2,85],140:[2,85],141:[2,85],142:[2,85],143:[2,85],145:[2,85]},{11:[2,63],24:[2,63],32:[2,63],35:[2,63],52:[2,63],56:[2,63],60:[2,63],62:[2,63],83:[2,63],112:[2,63],114:[2,63],121:[2,63],122:[2,63],123:[2,63],124:[2,63],126:[2,63],127:[2,63],128:[2,63],130:[2,63],131:[2,63],133:[2,63],134:[2,63],142:[2,63],147:[2,63],152:[2,63],163:[1,167],164:[2,63],165:[2,63],166:[2,63],167:[2,63],168:[2,63],169:[2,63]},{33:[2,147],79:[2,147],87:168,88:169,115:170,116:[1,171],135:[2,147],136:[2,147],138:[2,147],139:[2,147],140:[2,147],141:[2,147],142:[2,147],143:[2,147],145:[2,147]},{33:[2,150],79:[2,150],116:[2,150],135:[2,150],136:[2,150],138:[2,150],139:[2,150],140:[2,150],141:[2,150],142:[2,150],143:[2,150],145:[2,150]},{11:[2,62],24:[2,62],32:[2,62],35:[2,62],52:[2,62],56:[2,62],60:[2,62],62:[2,62],83:[2,62],112:[2,62],114:[2,62],121:[2,62],122:[2,62],123:[2,62],124:[2,62],126:[2,62],127:[2,62],128:[2,62],130:[2,62],131:[2,62],133:[2,62],134:[2,62],142:[2,62],147:[2,62],152:[2,62],163:[2,62],164:[2,62],165:[2,62],166:[2,62],167:[2,62],168:[2,62],169:[2,62]},{8:174,33:[1,177],77:173,78:175,79:[1,176],80:178,81:172,135:[1,179],136:[1,180],137:181,138:[1,182],139:[1,183],140:[1,184],141:[1,185],142:[1,9],143:[1,187],145:[1,186]},{33:[2,148],79:[2,148],135:[2,148],136:[2,148],138:[2,148],139:[2,148],140:[2,148],141:[2,148],142:[2,148],143:[2,148],145:[2,148]},{33:[2,76],79:[2,76],135:[2,76],136:[2,76],138:[2,76],139:[2,76],140:[2,76],141:[2,76],142:[2,76],143:[2,76],145:[2,76]},{11:[2,61],24:[2,61],32:[2,61],33:[1,192],35:[2,61],52:[2,61],56:[2,61],60:[2,61],62:[2,61],82:[1,188],83:[2,61],84:[1,189],85:[1,190],86:[1,191],112:[2,61],114:[2,61],121:[2,61],122:[2,61],123:[2,61],124:[2,61],126:[2,61],127:[2,61],128:[2,61],130:[2,61],131:[2,61],133:[2,61],134:[2,61],142:[2,61],147:[2,61],152:[2,61],163:[2,61],164:[2,61],165:[2,61],166:[2,61],167:[2,61],168:[2,61],169:[2,61]},{11:[2,55],24:[2,55],32:[2,55],33:[2,55],35:[2,55],52:[2,55],56:[2,55],60:[2,55],62:[2,55],82:[2,55],83:[2,55],84:[2,55],85:[2,55],86:[2,55],112:[2,55],114:[2,55],121:[2,55],122:[2,55],123:[2,55],124:[2,55],126:[2,55],127:[2,55],128:[2,55],130:[2,55],131:[2,55],133:[2,55],134:[2,55],142:[2,55],147:[2,55],152:[2,55],163:[2,55],164:[2,55],165:[2,55],166:[2,55],167:[2,55],168:[2,55],169:[2,55]},{11:[2,50],24:[2,50],32:[2,50],33:[2,50],35:[2,50],52:[2,50],56:[2,50],60:[2,50],62:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50],86:[2,50],112:[2,50],114:[2,50],121:[2,50],122:[2,50],123:[2,50],124:[2,50],126:[2,50],127:[2,50],128:[2,50],130:[2,50],131:[2,50],133:[2,50],134:[2,50],142:[2,50],147:[2,50],152:[2,50],163:[2,50],164:[2,50],165:[2,50],166:[2,50],167:[2,50],168:[2,50],169:[2,50]},{11:[2,51],24:[2,51],32:[2,51],33:[2,51],35:[2,51],52:[2,51],56:[2,51],60:[2,51],62:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51],86:[2,51],112:[2,51],114:[2,51],121:[2,51],122:[2,51],123:[2,51],124:[2,51],126:[2,51],127:[2,51],128:[2,51],130:[2,51],131:[2,51],133:[2,51],134:[2,51],142:[2,51],147:[2,51],152:[2,51],163:[2,51],164:[2,51],165:[2,51],166:[2,51],167:[2,51],168:[2,51],169:[2,51]},{11:[2,52],24:[2,52],32:[2,52],33:[2,52],35:[2,52],52:[2,52],56:[2,52],60:[2,52],62:[2,52],82:[2,52],83:[2,52],84:[2,52],85:[2,52],86:[2,52],112:[2,52],114:[2,52],121:[2,52],122:[2,52],123:[2,52],124:[2,52],126:[2,52],127:[2,52],128:[2,52],130:[2,52],131:[2,52],133:[2,52],134:[2,52],142:[2,52],147:[2,52],152:[2,52],163:[2,52],164:[2,52],165:[2,52],166:[2,52],167:[2,52],168:[2,52],169:[2,52]},{33:[2,169],48:193,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{11:[2,54],24:[2,54],32:[2,54],33:[2,54],35:[2,54],52:[2,54],56:[2,54],60:[2,54],62:[2,54],82:[2,54],83:[2,54],84:[2,54],85:[2,54],86:[2,54],112:[2,54],114:[2,54],121:[2,54],122:[2,54],123:[2,54],124:[2,54],126:[2,54],127:[2,54],128:[2,54],130:[2,54],131:[2,54],133:[2,54],134:[2,54],142:[2,54],147:[2,54],152:[2,54],163:[2,54],164:[2,54],165:[2,54],166:[2,54],167:[2,54],168:[2,54],169:[2,54]},{11:[2,90],24:[2,90],32:[2,90],33:[2,90],35:[2,90],52:[2,90],56:[2,90],60:[2,90],62:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90],86:[2,90],112:[2,90],114:[2,90],121:[2,90],122:[2,90],123:[2,90],124:[2,90],126:[2,90],127:[2,90],128:[2,90],130:[2,90],131:[2,90],133:[2,90],134:[2,90],142:[2,90],147:[2,90],150:[2,90],152:[2,90],163:[2,90],164:[2,90],165:[2,90],166:[2,90],167:[2,90],168:[2,90],169:[2,90]},{11:[2,91],24:[2,91],32:[2,91],33:[2,91],35:[2,91],52:[2,91],56:[2,91],60:[2,91],62:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91],86:[2,91],112:[2,91],114:[2,91],121:[2,91],122:[2,91],123:[2,91],124:[2,91],126:[2,91],127:[2,91],128:[2,91],130:[2,91],131:[2,91],133:[2,91],134:[2,91],142:[2,91],147:[2,91],150:[2,91],152:[2,91],163:[2,91],164:[2,91],165:[2,91],166:[2,91],167:[2,91],168:[2,91],169:[2,91]},{11:[2,92],24:[2,92],32:[2,92],33:[2,92],35:[2,92],52:[2,92],56:[2,92],60:[2,92],62:[2,92],82:[2,92],83:[2,92],84:[2,92],85:[2,92],86:[2,92],112:[2,92],114:[2,92],121:[2,92],122:[2,92],123:[2,92],124:[2,92],126:[2,92],127:[2,92],128:[2,92],130:[2,92],131:[2,92],133:[2,92],134:[2,92],142:[2,92],147:[2,92],150:[2,92],152:[2,92],163:[2,92],164:[2,92],165:[2,92],166:[2,92],167:[2,92],168:[2,92],169:[2,92]},{11:[2,93],24:[2,93],32:[2,93],33:[2,93],35:[2,93],52:[2,93],56:[2,93],60:[2,93],62:[2,93],82:[2,93],83:[2,93],84:[2,93],85:[2,93],86:[2,93],112:[2,93],114:[2,93],121:[2,93],122:[2,93],123:[2,93],124:[2,93],126:[2,93],127:[2,93],128:[2,93],130:[2,93],131:[2,93],133:[2,93],134:[2,93],142:[2,93],147:[2,93],150:[2,93],152:[2,93],163:[2,93],164:[2,93],165:[2,93],166:[2,93],167:[2,93],168:[2,93],169:[2,93]},{11:[2,94],24:[2,94],32:[2,94],33:[2,94],35:[2,94],52:[2,94],56:[2,94],60:[2,94],62:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94],86:[2,94],112:[2,94],114:[2,94],121:[2,94],122:[2,94],123:[2,94],124:[2,94],126:[2,94],127:[2,94],128:[2,94],130:[2,94],131:[2,94],133:[2,94],134:[2,94],142:[2,94],147:[2,94],150:[2,94],152:[2,94],163:[2,94],164:[2,94],165:[2,94],166:[2,94],167:[2,94],168:[2,94],169:[2,94]},{11:[2,95],24:[2,95],32:[2,95],33:[2,95],35:[2,95],52:[2,95],56:[2,95],60:[2,95],62:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95],86:[2,95],112:[2,95],114:[2,95],121:[2,95],122:[2,95],123:[2,95],124:[2,95],126:[2,95],127:[2,95],128:[2,95],130:[2,95],131:[2,95],133:[2,95],134:[2,95],142:[2,95],147:[2,95],150:[2,95],152:[2,95],163:[2,95],164:[2,95],165:[2,95],166:[2,95],167:[2,95],168:[2,95],169:[2,95]},{11:[2,96],24:[2,96],32:[2,96],33:[2,96],35:[2,96],52:[2,96],56:[2,96],60:[2,96],62:[2,96],82:[2,96],83:[2,96],84:[2,96],85:[2,96],86:[2,96],112:[2,96],114:[2,96],121:[2,96],122:[2,96],123:[2,96],124:[2,96],126:[2,96],127:[2,96],128:[2,96],130:[2,96],131:[2,96],133:[2,96],134:[2,96],142:[2,96],147:[2,96],150:[2,96],152:[2,96],163:[2,96],164:[2,96],165:[2,96],166:[2,96],167:[2,96],168:[2,96],169:[2,96]},{8:197,33:[1,200],78:198,79:[1,199],135:[1,179],136:[1,180],137:181,138:[1,182],139:[1,183],140:[1,184],141:[1,185],142:[1,9],143:[1,187],146:194,148:195,149:196},{11:[2,98],24:[2,98],32:[2,98],33:[2,98],35:[2,98],52:[2,98],56:[2,98],60:[2,98],62:[2,98],82:[2,98],83:[2,98],84:[2,98],85:[2,98],86:[2,98],112:[2,98],114:[2,98],121:[2,98],122:[2,98],123:[2,98],124:[2,98],126:[2,98],127:[2,98],128:[2,98],130:[2,98],131:[2,98],133:[2,98],134:[2,98],142:[2,98],147:[2,98],150:[2,98],152:[2,98],163:[2,98],164:[2,98],165:[2,98],166:[2,98],167:[2,98],168:[2,98],169:[2,98]},{33:[2,169],48:201,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{11:[2,57],24:[2,57],32:[2,57],33:[2,57],35:[2,57],52:[2,57],56:[2,57],60:[2,57],62:[2,57],82:[2,57],83:[2,57],84:[2,57],85:[2,57],86:[2,57],112:[2,57],114:[2,57],121:[2,57],122:[2,57],123:[2,57],124:[2,57],126:[2,57],127:[2,57],128:[2,57],130:[2,57],131:[2,57],133:[2,57],134:[2,57],142:[2,57],147:[2,57],152:[2,57],163:[2,57],164:[2,57],165:[2,57],166:[2,57],167:[2,57],168:[2,57],169:[2,57]},{11:[2,58],24:[2,58],32:[2,58],33:[2,58],35:[2,58],52:[2,58],56:[2,58],60:[2,58],62:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58],86:[2,58],112:[2,58],114:[2,58],121:[2,58],122:[2,58],123:[2,58],124:[2,58],126:[2,58],127:[2,58],128:[2,58],130:[2,58],131:[2,58],133:[2,58],134:[2,58],142:[2,58],147:[2,58],152:[2,58],163:[2,58],164:[2,58],165:[2,58],166:[2,58],167:[2,58],168:[2,58],169:[2,58]},{11:[2,59],24:[2,59],32:[2,59],33:[2,59],35:[2,59],52:[2,59],56:[2,59],60:[2,59],62:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59],86:[2,59],112:[2,59],114:[2,59],121:[2,59],122:[2,59],123:[2,59],124:[2,59],126:[2,59],127:[2,59],128:[2,59],130:[2,59],131:[2,59],133:[2,59],134:[2,59],142:[2,59],147:[2,59],152:[2,59],163:[2,59],164:[2,59],165:[2,59],166:[2,59],167:[2,59],168:[2,59],169:[2,59]},{33:[2,169],48:204,69:202,70:203,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{35:[1,205]},{147:[1,206]},{52:[1,207],147:[2,101]},{150:[1,208]},{150:[2,104]},{150:[2,105]},{150:[2,106]},{33:[2,169],48:209,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{83:[1,210]},{35:[1,211]},{35:[2,41],52:[1,212]},{35:[2,43],52:[2,43]},{11:[2,53],24:[2,53],32:[2,53],33:[2,53],35:[2,53],52:[2,53],56:[2,53],60:[2,53],62:[2,53],82:[2,53],83:[2,53],84:[2,53],85:[2,53],86:[2,53],112:[2,53],114:[2,53],121:[2,53],122:[2,53],123:[2,53],124:[2,53],126:[2,53],127:[2,53],128:[2,53],130:[2,53],131:[2,53],133:[2,53],134:[2,53],142:[2,53],147:[2,53],152:[2,53],163:[2,53],164:[2,53],165:[2,53],166:[2,53],167:[2,53],168:[2,53],169:[2,53]},{11:[2,100],24:[2,100],32:[2,100],33:[2,100],35:[2,100],52:[2,100],56:[2,100],60:[2,100],62:[2,100],82:[2,100],83:[2,100],84:[2,100],85:[2,100],86:[2,100],112:[2,100],114:[2,100],121:[2,100],122:[2,100],123:[2,100],124:[2,100],126:[2,100],127:[2,100],128:[2,100],130:[2,100],131:[2,100],133:[2,100],134:[2,100],142:[2,100],147:[2,100],152:[2,100],163:[2,100],164:[2,100],165:[2,100],166:[2,100],167:[2,100],168:[2,100],169:[2,100]},{8:197,33:[1,200],78:198,79:[1,199],135:[1,179],136:[1,180],137:181,138:[1,182],139:[1,183],140:[1,184],141:[1,185],142:[1,9],143:[1,187],146:213,148:195,149:196},{33:[2,169],48:214,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{35:[1,215]},{11:[2,56],24:[2,56],32:[2,56],33:[2,56],35:[2,56],52:[2,56],56:[2,56],60:[2,56],62:[2,56],82:[2,56],83:[2,56],84:[2,56],85:[2,56],86:[2,56],112:[2,56],114:[2,56],121:[2,56],122:[2,56],123:[2,56],124:[2,56],126:[2,56],127:[2,56],128:[2,56],130:[2,56],131:[2,56],133:[2,56],134:[2,56],142:[2,56],147:[2,56],152:[2,56],163:[2,56],164:[2,56],165:[2,56],166:[2,56],167:[2,56],168:[2,56],169:[2,56]},{11:[2,60],24:[2,60],32:[2,60],33:[2,60],35:[2,60],52:[2,60],56:[2,60],60:[2,60],62:[2,60],82:[2,60],83:[2,60],84:[2,60],85:[2,60],86:[2,60],112:[2,60],114:[2,60],121:[2,60],122:[2,60],123:[2,60],124:[2,60],126:[2,60],127:[2,60],128:[2,60],130:[2,60],131:[2,60],133:[2,60],134:[2,60],142:[2,60],147:[2,60],152:[2,60],163:[2,60],164:[2,60],165:[2,60],166:[2,60],167:[2,60],168:[2,60],169:[2,60]},{33:[2,169],48:204,69:216,70:203,79:[2,169],109:84,110:85,111:83,116:[2,169],135:[2,169],136:[2,169],138:[2,169],139:[2,169],140:[2,169],141:[2,169],142:[2,169],143:[2,169],145:[2,169]},{147:[2,102]},{52:[2,103],147:[2,103]},{150:[2,107]},{35:[2,42]}],
defaultActions: {3:[2,1],22:[2,118],63:[2,144],66:[2,140],70:[2,128],117:[2,16],118:[2,17],122:[2,136],197:[2,104],198:[2,105],199:[2,106],213:[2,102],215:[2,107],216:[2,42]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:/* ignore comment */
break;
case 2:return 13;
break;
case 3:return 155;
break;
case 4:return 'USES';
break;
case 5:return 74;
break;
case 6:return 75;
break;
case 7:return 7;
break;
case 8:return 'TEST';
break;
case 9:return 'IMAGE';
break;
case 10:return 'DATA';
break;
case 11:return 'NEEDS';
break;
case 12:return 60;
break;
case 13:return 32;
break;
case 14:return 36;
break;
case 15:return 46;
break;
case 16:return 47;
break;
case 17:return 49;
break;
case 18:return 50;
break;
case 19:return 'MAP';
break;
case 20:return 'FOR';
break;
case 21:return 'NULL';
break;
case 22:return 136;
break;
case 23:return 135;
break;
case 24:return 138;
break;
case 25:return 139;
break;
case 26:return 143;
break;
case 27:return 'REDUCE';
break;
case 28:return 112;
break;
case 29:return 'INT';
break;
case 30:return 'LONG';
break;
case 31:return 136;
break;
case 32:return 'DOUBLE';
break;
case 33:return 169;
break;
case 34:return 'ELSEIF';
break;
case 35:return 114; 
break;
case 36:return 56;
break;
case 37:return 58;
break;
case 38:return 24;
break;
case 39:return 27;
break;
case 40:return 162;
break;
case 41:return 40;
break;
case 42:return 42;
break;
case 43:return 'ESCAPE';	
break;
case 44:return 43;
break;
case 45:return 118;
break;
case 46:return 119;
break;
case 47:return 121;
break;
case 48:return 122;
break;
case 49:return 123;
break;
case 50:return 124;
break;
case 51:return 130;
break;
case 52:return 131;
break;
case 53:return 57;
break;
case 54:return 65;
break;
case 55:return 66;
break;
case 56:return 161;
break;
case 57:return 133;
break;
case 58:return 134;
break;
case 59:return 126;
break;
case 60:return 127;
break;
case 61:return 128;
break;
case 62:return 168;
break;
case 63:return 'PIPE';
break;
case 64:return 167;
break;
case 65:return 164;
break;
case 66:return 166;
break;
case 67:return 165;
break;
case 68:return 116;
break;
case 69:return 163;
break;
case 70:return 'QUESTION';
break;
case 71:return 86;
break;
case 72:return 145;
break;
case 73:return 147;
break;
case 74:return 33;
break;
case 75:return 35;
break;
case 76:return 82;
break;
case 77:return 83;
break;
case 78:return 150;
break;
case 79:return 62;
break;
case 80:return 52;
break;
case 81:return 140;
break;
case 82:return 141;
break;
case 83:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 79;
break;
case 84:return 159;
break;
case 85:
					if (typeof yy._iemitstack === 'undefined') {
						return 5;
					}
					
					var tokens = [];
				
				    while (0 < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				    if (tokens.length) return tokens;
				
break;
case 86:/* eat blank lines */
break;
case 87:
					if (typeof yy._iemitstack === 'undefined') {
						yy._iemitstack = [0];
					}
					var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
				    if (indentation > yy._iemitstack[0]) {
				        yy._iemitstack.unshift(indentation);
				        return 9;
				    }
				
				    var tokens = [];
				
				    while (indentation < yy._iemitstack[0]) {
				        tokens.push("DEDENT");
				        yy._iemitstack.shift();
				    }
				    if (tokens.length) return tokens;
				
break;
case 88:/* ignore whitespace */
break;
case 89:return 142;
break;
case 90:return 5;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:theory\b)/,/^(?:extends\b)/,/^(?:uses\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:namespace\b)/,/^(?:test\b)/,/^(?:image\b)/,/^(?:data\b)/,/^(?:needs\b)/,/^(?:fn\b)/,/^(?:ff\b)/,/^(?:->)/,/^(?:<-)/,/^(?:style\b)/,/^(?:where\b)/,/^(?:yield\b)/,/^(?:map\b)/,/^(?:for\b)/,/^(?:null\b)/,/^(?:(-?(?:[0-9]|[1-9][0-9]+)(f|\.[0-9]*f?)))/,/^(?:(-?(?:[0-9]|[1-9][0-9]+)))/,/^(?:0x([0-9A-Fa-f]+))/,/^(?:([0-1]+)b\b)/,/^(?:#([0-9A-Fa-f]+))/,/^(?:reduce\b)/,/^(?:if\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:else\s+if\b)/,/^(?:endif\b)/,/^(?:\[--)/,/^(?:--\])/,/^(?:\[\[)/,/^(?:\]\])/,/^(?:is\b)/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\\)/,/^(?:\.\.\.)/,/^(?:eq|==)/,/^(?:neq|!=)/,/^(?:gt|>)/,/^(?:lt|<)/,/^(?:gte|>=)/,/^(?:lte|<=)/,/^(?:<<)/,/^(?:>>)/,/^(?:::)/,/^(?:=)/,/^(?:@=)/,/^(?:@)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%|mod\b)/,/^(?:\|\||or\b)/,/^(?:\|)/,/^(?:&&|and\b)/,/^(?:&)/,/^(?:\|)/,/^(?:\^|xor\b)/,/^(?:not|!)/,/^(?:\*\*)/,/^(?:\?)/,/^(?:\?!)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:(-?(?:[0-9]|[1-9][0-9]+)(f|\.[0-9]*f?))([a-zA-Z][a-zA-Z0-9]*))/,/^(?:(-?(?:[0-9]|[1-9][0-9]+))([a-zA-Z][a-zA-Z0-9]*))/,/^(?:".*"|'.*')/,/^(?:\.)/,/^(?:[\n\r\s]+$)/,/^(?:[\n\r]+\s+(?![^\n\r]))/,/^(?:[\n\r]\s+)/,/^(?:\s+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = theory;
exports.Parser = theory.Parser;
exports.parse = function () { return theory.parse.apply(theory, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}