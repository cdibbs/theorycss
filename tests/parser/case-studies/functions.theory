TheoryTests
	theory Functions
		muststartwithtf

		basic_func_as_1st_class = \x, y => (x + y) * (x - y);

		fn normalFunc() -> if this then that else dunno endif;
		fn normalFunc(a, b, c', d) -> if we then
			span_multiple_lines
			else we_err()
			endif;

		ff fragMeBro(a, b, c)
			where we = initialize, some = things;
			...
				-> before_we_recurse(chris)
					where chris = me
					yield me = me;
				<- after_we_recurse()
					where we = have, some = new, things = 4*u;
				div
					-> { having : "a lonely little div somewhere" };
		
		ff noWhere(a, b)
			something
				beautiful
					|v "before breadth first recursive call";
					|^ "after that call, and we have more info";

		ff swyTests()
			one
				-> bob where bob = bob yield bob = bob;
			two
				-> bob yield bob = bob;
			three
				-> bob where bob = bob;
			four
				-> bob;
			five
				-> where bob = bob yield bob = bob;
			six
				-> yield bob = bob;
				
		
		
		fn applyInside(y) -> (\x => x * x)(y);

		fn lambdaWithinDict(myDict) -> within myDict: \use => variables * added * to * scope;
